
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  0800a000  0800a000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  0800a0c0  0800a0c0  0000a0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800d0d0  0800d0d0  0000d0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d274  0800d274  00010130  2**0
                  CONTENTS
  4 .ARM          00000000  0800d274  0800d274  00010130  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d274  0800d274  00010130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d274  0800d274  0000d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d278  0800d278  0000d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  200000c0  0800d27c  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ram_vector   000000c0  20000000  20000000  00020000  2**2
                  ALLOC
 10 .bss          0000013c  20000130  0800d2ec  00010130  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  0800d2ec  0001026c  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a3b  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000143f  00000000  00000000  00017b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  00018fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  00019638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d2c  00000000  00000000  00019c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008510  00000000  00000000  0002a93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00061ef7  00000000  00000000  00032e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00094d43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d60  00000000  00000000  00094d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800a0c0 <__do_global_dtors_aux>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	4c06      	ldr	r4, [pc, #24]	; (800a0dc <__do_global_dtors_aux+0x1c>)
 800a0c4:	7823      	ldrb	r3, [r4, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d107      	bne.n	800a0da <__do_global_dtors_aux+0x1a>
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <__do_global_dtors_aux+0x20>)
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <__do_global_dtors_aux+0x16>
 800a0d0:	4804      	ldr	r0, [pc, #16]	; (800a0e4 <__do_global_dtors_aux+0x24>)
 800a0d2:	e000      	b.n	800a0d6 <__do_global_dtors_aux+0x16>
 800a0d4:	bf00      	nop
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	7023      	strb	r3, [r4, #0]
 800a0da:	bd10      	pop	{r4, pc}
 800a0dc:	20000130 	.word	0x20000130
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	0800d0b8 	.word	0x0800d0b8

0800a0e8 <frame_dummy>:
 800a0e8:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <frame_dummy+0x14>)
 800a0ea:	b510      	push	{r4, lr}
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <frame_dummy+0x10>
 800a0f0:	4903      	ldr	r1, [pc, #12]	; (800a100 <frame_dummy+0x18>)
 800a0f2:	4804      	ldr	r0, [pc, #16]	; (800a104 <frame_dummy+0x1c>)
 800a0f4:	e000      	b.n	800a0f8 <frame_dummy+0x10>
 800a0f6:	bf00      	nop
 800a0f8:	bd10      	pop	{r4, pc}
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	00000000 	.word	0x00000000
 800a100:	20000134 	.word	0x20000134
 800a104:	0800d0b8 	.word	0x0800d0b8

0800a108 <__gnu_thumb1_case_shi>:
 800a108:	b403      	push	{r0, r1}
 800a10a:	4671      	mov	r1, lr
 800a10c:	0849      	lsrs	r1, r1, #1
 800a10e:	0040      	lsls	r0, r0, #1
 800a110:	0049      	lsls	r1, r1, #1
 800a112:	5e09      	ldrsh	r1, [r1, r0]
 800a114:	0049      	lsls	r1, r1, #1
 800a116:	448e      	add	lr, r1
 800a118:	bc03      	pop	{r0, r1}
 800a11a:	4770      	bx	lr

0800a11c <__udivsi3>:
 800a11c:	2200      	movs	r2, #0
 800a11e:	0843      	lsrs	r3, r0, #1
 800a120:	428b      	cmp	r3, r1
 800a122:	d374      	bcc.n	800a20e <__udivsi3+0xf2>
 800a124:	0903      	lsrs	r3, r0, #4
 800a126:	428b      	cmp	r3, r1
 800a128:	d35f      	bcc.n	800a1ea <__udivsi3+0xce>
 800a12a:	0a03      	lsrs	r3, r0, #8
 800a12c:	428b      	cmp	r3, r1
 800a12e:	d344      	bcc.n	800a1ba <__udivsi3+0x9e>
 800a130:	0b03      	lsrs	r3, r0, #12
 800a132:	428b      	cmp	r3, r1
 800a134:	d328      	bcc.n	800a188 <__udivsi3+0x6c>
 800a136:	0c03      	lsrs	r3, r0, #16
 800a138:	428b      	cmp	r3, r1
 800a13a:	d30d      	bcc.n	800a158 <__udivsi3+0x3c>
 800a13c:	22ff      	movs	r2, #255	; 0xff
 800a13e:	0209      	lsls	r1, r1, #8
 800a140:	ba12      	rev	r2, r2
 800a142:	0c03      	lsrs	r3, r0, #16
 800a144:	428b      	cmp	r3, r1
 800a146:	d302      	bcc.n	800a14e <__udivsi3+0x32>
 800a148:	1212      	asrs	r2, r2, #8
 800a14a:	0209      	lsls	r1, r1, #8
 800a14c:	d065      	beq.n	800a21a <__udivsi3+0xfe>
 800a14e:	0b03      	lsrs	r3, r0, #12
 800a150:	428b      	cmp	r3, r1
 800a152:	d319      	bcc.n	800a188 <__udivsi3+0x6c>
 800a154:	e000      	b.n	800a158 <__udivsi3+0x3c>
 800a156:	0a09      	lsrs	r1, r1, #8
 800a158:	0bc3      	lsrs	r3, r0, #15
 800a15a:	428b      	cmp	r3, r1
 800a15c:	d301      	bcc.n	800a162 <__udivsi3+0x46>
 800a15e:	03cb      	lsls	r3, r1, #15
 800a160:	1ac0      	subs	r0, r0, r3
 800a162:	4152      	adcs	r2, r2
 800a164:	0b83      	lsrs	r3, r0, #14
 800a166:	428b      	cmp	r3, r1
 800a168:	d301      	bcc.n	800a16e <__udivsi3+0x52>
 800a16a:	038b      	lsls	r3, r1, #14
 800a16c:	1ac0      	subs	r0, r0, r3
 800a16e:	4152      	adcs	r2, r2
 800a170:	0b43      	lsrs	r3, r0, #13
 800a172:	428b      	cmp	r3, r1
 800a174:	d301      	bcc.n	800a17a <__udivsi3+0x5e>
 800a176:	034b      	lsls	r3, r1, #13
 800a178:	1ac0      	subs	r0, r0, r3
 800a17a:	4152      	adcs	r2, r2
 800a17c:	0b03      	lsrs	r3, r0, #12
 800a17e:	428b      	cmp	r3, r1
 800a180:	d301      	bcc.n	800a186 <__udivsi3+0x6a>
 800a182:	030b      	lsls	r3, r1, #12
 800a184:	1ac0      	subs	r0, r0, r3
 800a186:	4152      	adcs	r2, r2
 800a188:	0ac3      	lsrs	r3, r0, #11
 800a18a:	428b      	cmp	r3, r1
 800a18c:	d301      	bcc.n	800a192 <__udivsi3+0x76>
 800a18e:	02cb      	lsls	r3, r1, #11
 800a190:	1ac0      	subs	r0, r0, r3
 800a192:	4152      	adcs	r2, r2
 800a194:	0a83      	lsrs	r3, r0, #10
 800a196:	428b      	cmp	r3, r1
 800a198:	d301      	bcc.n	800a19e <__udivsi3+0x82>
 800a19a:	028b      	lsls	r3, r1, #10
 800a19c:	1ac0      	subs	r0, r0, r3
 800a19e:	4152      	adcs	r2, r2
 800a1a0:	0a43      	lsrs	r3, r0, #9
 800a1a2:	428b      	cmp	r3, r1
 800a1a4:	d301      	bcc.n	800a1aa <__udivsi3+0x8e>
 800a1a6:	024b      	lsls	r3, r1, #9
 800a1a8:	1ac0      	subs	r0, r0, r3
 800a1aa:	4152      	adcs	r2, r2
 800a1ac:	0a03      	lsrs	r3, r0, #8
 800a1ae:	428b      	cmp	r3, r1
 800a1b0:	d301      	bcc.n	800a1b6 <__udivsi3+0x9a>
 800a1b2:	020b      	lsls	r3, r1, #8
 800a1b4:	1ac0      	subs	r0, r0, r3
 800a1b6:	4152      	adcs	r2, r2
 800a1b8:	d2cd      	bcs.n	800a156 <__udivsi3+0x3a>
 800a1ba:	09c3      	lsrs	r3, r0, #7
 800a1bc:	428b      	cmp	r3, r1
 800a1be:	d301      	bcc.n	800a1c4 <__udivsi3+0xa8>
 800a1c0:	01cb      	lsls	r3, r1, #7
 800a1c2:	1ac0      	subs	r0, r0, r3
 800a1c4:	4152      	adcs	r2, r2
 800a1c6:	0983      	lsrs	r3, r0, #6
 800a1c8:	428b      	cmp	r3, r1
 800a1ca:	d301      	bcc.n	800a1d0 <__udivsi3+0xb4>
 800a1cc:	018b      	lsls	r3, r1, #6
 800a1ce:	1ac0      	subs	r0, r0, r3
 800a1d0:	4152      	adcs	r2, r2
 800a1d2:	0943      	lsrs	r3, r0, #5
 800a1d4:	428b      	cmp	r3, r1
 800a1d6:	d301      	bcc.n	800a1dc <__udivsi3+0xc0>
 800a1d8:	014b      	lsls	r3, r1, #5
 800a1da:	1ac0      	subs	r0, r0, r3
 800a1dc:	4152      	adcs	r2, r2
 800a1de:	0903      	lsrs	r3, r0, #4
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	d301      	bcc.n	800a1e8 <__udivsi3+0xcc>
 800a1e4:	010b      	lsls	r3, r1, #4
 800a1e6:	1ac0      	subs	r0, r0, r3
 800a1e8:	4152      	adcs	r2, r2
 800a1ea:	08c3      	lsrs	r3, r0, #3
 800a1ec:	428b      	cmp	r3, r1
 800a1ee:	d301      	bcc.n	800a1f4 <__udivsi3+0xd8>
 800a1f0:	00cb      	lsls	r3, r1, #3
 800a1f2:	1ac0      	subs	r0, r0, r3
 800a1f4:	4152      	adcs	r2, r2
 800a1f6:	0883      	lsrs	r3, r0, #2
 800a1f8:	428b      	cmp	r3, r1
 800a1fa:	d301      	bcc.n	800a200 <__udivsi3+0xe4>
 800a1fc:	008b      	lsls	r3, r1, #2
 800a1fe:	1ac0      	subs	r0, r0, r3
 800a200:	4152      	adcs	r2, r2
 800a202:	0843      	lsrs	r3, r0, #1
 800a204:	428b      	cmp	r3, r1
 800a206:	d301      	bcc.n	800a20c <__udivsi3+0xf0>
 800a208:	004b      	lsls	r3, r1, #1
 800a20a:	1ac0      	subs	r0, r0, r3
 800a20c:	4152      	adcs	r2, r2
 800a20e:	1a41      	subs	r1, r0, r1
 800a210:	d200      	bcs.n	800a214 <__udivsi3+0xf8>
 800a212:	4601      	mov	r1, r0
 800a214:	4152      	adcs	r2, r2
 800a216:	4610      	mov	r0, r2
 800a218:	4770      	bx	lr
 800a21a:	e7ff      	b.n	800a21c <__udivsi3+0x100>
 800a21c:	b501      	push	{r0, lr}
 800a21e:	2000      	movs	r0, #0
 800a220:	f000 f806 	bl	800a230 <__aeabi_idiv0>
 800a224:	bd02      	pop	{r1, pc}
 800a226:	46c0      	nop			; (mov r8, r8)

0800a228 <__aeabi_uidivmod>:
 800a228:	2900      	cmp	r1, #0
 800a22a:	d0f7      	beq.n	800a21c <__udivsi3+0x100>
 800a22c:	e776      	b.n	800a11c <__udivsi3>
 800a22e:	4770      	bx	lr

0800a230 <__aeabi_idiv0>:
 800a230:	4770      	bx	lr
 800a232:	46c0      	nop			; (mov r8, r8)

0800a234 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 100);
 800a23c:	1d39      	adds	r1, r7, #4
 800a23e:	4805      	ldr	r0, [pc, #20]	; (800a254 <__io_putchar+0x20>)
 800a240:	2364      	movs	r3, #100	; 0x64
 800a242:	2201      	movs	r2, #1
 800a244:	f001 faf0 	bl	800b828 <HAL_UART_Transmit>
}
 800a248:	46c0      	nop			; (mov r8, r8)
 800a24a:	0018      	movs	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b002      	add	sp, #8
 800a250:	bd80      	pop	{r7, pc}
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	200001d0 	.word	0x200001d0

0800a258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;  // early enable to ensure clock is up and running when it comes to usage
 800a25e:	4b21      	ldr	r3, [pc, #132]	; (800a2e4 <main+0x8c>)
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <main+0x8c>)
 800a264:	2101      	movs	r1, #1
 800a266:	430a      	orrs	r2, r1
 800a268:	619a      	str	r2, [r3, #24]
    for (uint32_t i = 0; i < VECTOR_TABLE_SIZE; i++)
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
 800a26e:	e00a      	b.n	800a286 <main+0x2e>
    {//copy vector table
      ram_vector[i] = g_pfnVectors[i];
 800a270:	4b1d      	ldr	r3, [pc, #116]	; (800a2e8 <main+0x90>)
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	0092      	lsls	r2, r2, #2
 800a276:	58d1      	ldr	r1, [r2, r3]
 800a278:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <main+0x94>)
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	0092      	lsls	r2, r2, #2
 800a27e:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < VECTOR_TABLE_SIZE; i++)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3301      	adds	r3, #1
 800a284:	607b      	str	r3, [r7, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b2f      	cmp	r3, #47	; 0x2f
 800a28a:	d9f1      	bls.n	800a270 <main+0x18>
    }
    SYSCFG->CFGR1 = (SYSCFG->CFGR1 & ~SYSCFG_CFGR1_MEM_MODE) | (SYSCFG_CFGR1_MEM_MODE__SRAM * SYSCFG_CFGR1_MEM_MODE_0);  // remap 0x0000000 to RAM
 800a28c:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <main+0x98>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4b17      	ldr	r3, [pc, #92]	; (800a2f0 <main+0x98>)
 800a292:	2103      	movs	r1, #3
 800a294:	430a      	orrs	r2, r1
 800a296:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800a298:	b662      	cpsie	i
}
 800a29a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a29c:	f000 fb34 	bl	800a908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2a0:	f000 f828 	bl	800a2f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2a4:	f000 f8ce 	bl	800a444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800a2a8:	f000 f86c 	bl	800a384 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800a2ac:	f000 f89a 	bl	800a3e4 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800a2b0:	2390      	movs	r3, #144	; 0x90
 800a2b2:	05db      	lsls	r3, r3, #23
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	2120      	movs	r1, #32
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 fdd1 	bl	800ae60 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800a2be:	23fa      	movs	r3, #250	; 0xfa
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f000 fb84 	bl	800a9d0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a2c8:	2390      	movs	r3, #144	; 0x90
 800a2ca:	05db      	lsls	r3, r3, #23
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2120      	movs	r1, #32
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 fdc5 	bl	800ae60 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800a2d6:	23fa      	movs	r3, #250	; 0xfa
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f000 fb78 	bl	800a9d0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800a2e0:	e7e6      	b.n	800a2b0 <main+0x58>
 800a2e2:	46c0      	nop			; (mov r8, r8)
 800a2e4:	40021000 	.word	0x40021000
 800a2e8:	0800a000 	.word	0x0800a000
 800a2ec:	20000000 	.word	0x20000000
 800a2f0:	40010000 	.word	0x40010000

0800a2f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a2f4:	b590      	push	{r4, r7, lr}
 800a2f6:	b091      	sub	sp, #68	; 0x44
 800a2f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a2fa:	2410      	movs	r4, #16
 800a2fc:	193b      	adds	r3, r7, r4
 800a2fe:	0018      	movs	r0, r3
 800a300:	2330      	movs	r3, #48	; 0x30
 800a302:	001a      	movs	r2, r3
 800a304:	2100      	movs	r1, #0
 800a306:	f001 fe7b 	bl	800c000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a30a:	003b      	movs	r3, r7
 800a30c:	0018      	movs	r0, r3
 800a30e:	2310      	movs	r3, #16
 800a310:	001a      	movs	r2, r3
 800a312:	2100      	movs	r1, #0
 800a314:	f001 fe74 	bl	800c000 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a318:	0021      	movs	r1, r4
 800a31a:	187b      	adds	r3, r7, r1
 800a31c:	2201      	movs	r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a320:	187b      	adds	r3, r7, r1
 800a322:	2205      	movs	r2, #5
 800a324:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a326:	187b      	adds	r3, r7, r1
 800a328:	2202      	movs	r2, #2
 800a32a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a32c:	187b      	adds	r3, r7, r1
 800a32e:	2280      	movs	r2, #128	; 0x80
 800a330:	0252      	lsls	r2, r2, #9
 800a332:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a334:	187b      	adds	r3, r7, r1
 800a336:	2280      	movs	r2, #128	; 0x80
 800a338:	0352      	lsls	r2, r2, #13
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a33c:	187b      	adds	r3, r7, r1
 800a33e:	2200      	movs	r2, #0
 800a340:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a342:	187b      	adds	r3, r7, r1
 800a344:	0018      	movs	r0, r3
 800a346:	f000 fda9 	bl	800ae9c <HAL_RCC_OscConfig>
 800a34a:	1e03      	subs	r3, r0, #0
 800a34c:	d001      	beq.n	800a352 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800a34e:	f000 f8e3 	bl	800a518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a352:	003b      	movs	r3, r7
 800a354:	2207      	movs	r2, #7
 800a356:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a358:	003b      	movs	r3, r7
 800a35a:	2202      	movs	r2, #2
 800a35c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a35e:	003b      	movs	r3, r7
 800a360:	2200      	movs	r2, #0
 800a362:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a364:	003b      	movs	r3, r7
 800a366:	2200      	movs	r2, #0
 800a368:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a36a:	003b      	movs	r3, r7
 800a36c:	2101      	movs	r1, #1
 800a36e:	0018      	movs	r0, r3
 800a370:	f001 f8b2 	bl	800b4d8 <HAL_RCC_ClockConfig>
 800a374:	1e03      	subs	r3, r0, #0
 800a376:	d001      	beq.n	800a37c <SystemClock_Config+0x88>
  {
    Error_Handler();
 800a378:	f000 f8ce 	bl	800a518 <Error_Handler>
  }
}
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	46bd      	mov	sp, r7
 800a380:	b011      	add	sp, #68	; 0x44
 800a382:	bd90      	pop	{r4, r7, pc}

0800a384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a388:	4b14      	ldr	r3, [pc, #80]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a38a:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <MX_USART2_UART_Init+0x5c>)
 800a38c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800a38e:	4b13      	ldr	r3, [pc, #76]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a390:	2296      	movs	r2, #150	; 0x96
 800a392:	0212      	lsls	r2, r2, #8
 800a394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a398:	2200      	movs	r2, #0
 800a39a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3aa:	220c      	movs	r2, #12
 800a3ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3b4:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3ba:	4b08      	ldr	r3, [pc, #32]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3c0:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a3c6:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <MX_USART2_UART_Init+0x58>)
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f001 f9d9 	bl	800b780 <HAL_UART_Init>
 800a3ce:	1e03      	subs	r3, r0, #0
 800a3d0:	d001      	beq.n	800a3d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a3d2:	f000 f8a1 	bl	800a518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a3d6:	46c0      	nop			; (mov r8, r8)
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	2000014c 	.word	0x2000014c
 800a3e0:	40004400 	.word	0x40004400

0800a3e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a3e8:	4b14      	ldr	r3, [pc, #80]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a3ea:	4a15      	ldr	r2, [pc, #84]	; (800a440 <MX_USART3_UART_Init+0x5c>)
 800a3ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a3f0:	2296      	movs	r2, #150	; 0x96
 800a3f2:	0212      	lsls	r2, r2, #8
 800a3f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a3f6:	4b11      	ldr	r3, [pc, #68]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a402:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a404:	2200      	movs	r2, #0
 800a406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a40a:	220c      	movs	r2, #12
 800a40c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a40e:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a410:	2200      	movs	r2, #0
 800a412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a414:	4b09      	ldr	r3, [pc, #36]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a416:	2200      	movs	r2, #0
 800a418:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a41a:	4b08      	ldr	r3, [pc, #32]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a422:	2200      	movs	r2, #0
 800a424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a426:	4b05      	ldr	r3, [pc, #20]	; (800a43c <MX_USART3_UART_Init+0x58>)
 800a428:	0018      	movs	r0, r3
 800a42a:	f001 f9a9 	bl	800b780 <HAL_UART_Init>
 800a42e:	1e03      	subs	r3, r0, #0
 800a430:	d001      	beq.n	800a436 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a432:	f000 f871 	bl	800a518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200001d0 	.word	0x200001d0
 800a440:	40004800 	.word	0x40004800

0800a444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b089      	sub	sp, #36	; 0x24
 800a448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a44a:	240c      	movs	r4, #12
 800a44c:	193b      	adds	r3, r7, r4
 800a44e:	0018      	movs	r0, r3
 800a450:	2314      	movs	r3, #20
 800a452:	001a      	movs	r2, r3
 800a454:	2100      	movs	r1, #0
 800a456:	f001 fdd3 	bl	800c000 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a45a:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a45c:	695a      	ldr	r2, [r3, #20]
 800a45e:	4b2c      	ldr	r3, [pc, #176]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a460:	2180      	movs	r1, #128	; 0x80
 800a462:	0309      	lsls	r1, r1, #12
 800a464:	430a      	orrs	r2, r1
 800a466:	615a      	str	r2, [r3, #20]
 800a468:	4b29      	ldr	r3, [pc, #164]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a46a:	695a      	ldr	r2, [r3, #20]
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	031b      	lsls	r3, r3, #12
 800a470:	4013      	ands	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]
 800a474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a476:	4b26      	ldr	r3, [pc, #152]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a478:	695a      	ldr	r2, [r3, #20]
 800a47a:	4b25      	ldr	r3, [pc, #148]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a47c:	2180      	movs	r1, #128	; 0x80
 800a47e:	03c9      	lsls	r1, r1, #15
 800a480:	430a      	orrs	r2, r1
 800a482:	615a      	str	r2, [r3, #20]
 800a484:	4b22      	ldr	r3, [pc, #136]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a486:	695a      	ldr	r2, [r3, #20]
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	03db      	lsls	r3, r3, #15
 800a48c:	4013      	ands	r3, r2
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a492:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a494:	695a      	ldr	r2, [r3, #20]
 800a496:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a498:	2180      	movs	r1, #128	; 0x80
 800a49a:	0289      	lsls	r1, r1, #10
 800a49c:	430a      	orrs	r2, r1
 800a49e:	615a      	str	r2, [r3, #20]
 800a4a0:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <MX_GPIO_Init+0xcc>)
 800a4a2:	695a      	ldr	r2, [r3, #20]
 800a4a4:	2380      	movs	r3, #128	; 0x80
 800a4a6:	029b      	lsls	r3, r3, #10
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a4ae:	2390      	movs	r3, #144	; 0x90
 800a4b0:	05db      	lsls	r3, r3, #23
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2120      	movs	r1, #32
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f000 fcd2 	bl	800ae60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a4bc:	193b      	adds	r3, r7, r4
 800a4be:	2280      	movs	r2, #128	; 0x80
 800a4c0:	0192      	lsls	r2, r2, #6
 800a4c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a4c4:	193b      	adds	r3, r7, r4
 800a4c6:	2284      	movs	r2, #132	; 0x84
 800a4c8:	0392      	lsls	r2, r2, #14
 800a4ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4cc:	193b      	adds	r3, r7, r4
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a4d2:	193b      	adds	r3, r7, r4
 800a4d4:	4a0f      	ldr	r2, [pc, #60]	; (800a514 <MX_GPIO_Init+0xd0>)
 800a4d6:	0019      	movs	r1, r3
 800a4d8:	0010      	movs	r0, r2
 800a4da:	f000 fb51 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800a4de:	0021      	movs	r1, r4
 800a4e0:	187b      	adds	r3, r7, r1
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4e6:	187b      	adds	r3, r7, r1
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ec:	187b      	adds	r3, r7, r1
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f2:	187b      	adds	r3, r7, r1
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a4f8:	187a      	adds	r2, r7, r1
 800a4fa:	2390      	movs	r3, #144	; 0x90
 800a4fc:	05db      	lsls	r3, r3, #23
 800a4fe:	0011      	movs	r1, r2
 800a500:	0018      	movs	r0, r3
 800a502:	f000 fb3d 	bl	800ab80 <HAL_GPIO_Init>

}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	46bd      	mov	sp, r7
 800a50a:	b009      	add	sp, #36	; 0x24
 800a50c:	bd90      	pop	{r4, r7, pc}
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	40021000 	.word	0x40021000
 800a514:	48000800 	.word	0x48000800

0800a518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a51c:	b672      	cpsid	i
}
 800a51e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a520:	e7fe      	b.n	800a520 <Error_Handler+0x8>
	...

0800a524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <HAL_MspInit+0x44>)
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <HAL_MspInit+0x44>)
 800a530:	2101      	movs	r1, #1
 800a532:	430a      	orrs	r2, r1
 800a534:	619a      	str	r2, [r3, #24]
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <HAL_MspInit+0x44>)
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	2201      	movs	r2, #1
 800a53c:	4013      	ands	r3, r2
 800a53e:	607b      	str	r3, [r7, #4]
 800a540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <HAL_MspInit+0x44>)
 800a544:	69da      	ldr	r2, [r3, #28]
 800a546:	4b08      	ldr	r3, [pc, #32]	; (800a568 <HAL_MspInit+0x44>)
 800a548:	2180      	movs	r1, #128	; 0x80
 800a54a:	0549      	lsls	r1, r1, #21
 800a54c:	430a      	orrs	r2, r1
 800a54e:	61da      	str	r2, [r3, #28]
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <HAL_MspInit+0x44>)
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	055b      	lsls	r3, r3, #21
 800a558:	4013      	ands	r3, r2
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	46bd      	mov	sp, r7
 800a562:	b002      	add	sp, #8
 800a564:	bd80      	pop	{r7, pc}
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	40021000 	.word	0x40021000

0800a56c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a56c:	b590      	push	{r4, r7, lr}
 800a56e:	b08d      	sub	sp, #52	; 0x34
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a574:	241c      	movs	r4, #28
 800a576:	193b      	adds	r3, r7, r4
 800a578:	0018      	movs	r0, r3
 800a57a:	2314      	movs	r3, #20
 800a57c:	001a      	movs	r2, r3
 800a57e:	2100      	movs	r1, #0
 800a580:	f001 fd3e 	bl	800c000 <memset>
  if(huart->Instance==USART2)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a38      	ldr	r2, [pc, #224]	; (800a66c <HAL_UART_MspInit+0x100>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d133      	bne.n	800a5f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a58e:	4b38      	ldr	r3, [pc, #224]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a590:	69da      	ldr	r2, [r3, #28]
 800a592:	4b37      	ldr	r3, [pc, #220]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a594:	2180      	movs	r1, #128	; 0x80
 800a596:	0289      	lsls	r1, r1, #10
 800a598:	430a      	orrs	r2, r1
 800a59a:	61da      	str	r2, [r3, #28]
 800a59c:	4b34      	ldr	r3, [pc, #208]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a59e:	69da      	ldr	r2, [r3, #28]
 800a5a0:	2380      	movs	r3, #128	; 0x80
 800a5a2:	029b      	lsls	r3, r3, #10
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	61bb      	str	r3, [r7, #24]
 800a5a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5aa:	4b31      	ldr	r3, [pc, #196]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a5ac:	695a      	ldr	r2, [r3, #20]
 800a5ae:	4b30      	ldr	r3, [pc, #192]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a5b0:	2180      	movs	r1, #128	; 0x80
 800a5b2:	0289      	lsls	r1, r1, #10
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	615a      	str	r2, [r3, #20]
 800a5b8:	4b2d      	ldr	r3, [pc, #180]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a5ba:	695a      	ldr	r2, [r3, #20]
 800a5bc:	2380      	movs	r3, #128	; 0x80
 800a5be:	029b      	lsls	r3, r3, #10
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800a5c6:	0021      	movs	r1, r4
 800a5c8:	187b      	adds	r3, r7, r1
 800a5ca:	220c      	movs	r2, #12
 800a5cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ce:	187b      	adds	r3, r7, r1
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d4:	187b      	adds	r3, r7, r1
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a5da:	187b      	adds	r3, r7, r1
 800a5dc:	2203      	movs	r2, #3
 800a5de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800a5e0:	187b      	adds	r3, r7, r1
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5e6:	187a      	adds	r2, r7, r1
 800a5e8:	2390      	movs	r3, #144	; 0x90
 800a5ea:	05db      	lsls	r3, r3, #23
 800a5ec:	0011      	movs	r1, r2
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	f000 fac6 	bl	800ab80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a5f4:	e036      	b.n	800a664 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a1e      	ldr	r2, [pc, #120]	; (800a674 <HAL_UART_MspInit+0x108>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d131      	bne.n	800a664 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a600:	4b1b      	ldr	r3, [pc, #108]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a602:	69da      	ldr	r2, [r3, #28]
 800a604:	4b1a      	ldr	r3, [pc, #104]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a606:	2180      	movs	r1, #128	; 0x80
 800a608:	02c9      	lsls	r1, r1, #11
 800a60a:	430a      	orrs	r2, r1
 800a60c:	61da      	str	r2, [r3, #28]
 800a60e:	4b18      	ldr	r3, [pc, #96]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a610:	69da      	ldr	r2, [r3, #28]
 800a612:	2380      	movs	r3, #128	; 0x80
 800a614:	02db      	lsls	r3, r3, #11
 800a616:	4013      	ands	r3, r2
 800a618:	613b      	str	r3, [r7, #16]
 800a61a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a61c:	4b14      	ldr	r3, [pc, #80]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a61e:	695a      	ldr	r2, [r3, #20]
 800a620:	4b13      	ldr	r3, [pc, #76]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a622:	2180      	movs	r1, #128	; 0x80
 800a624:	0309      	lsls	r1, r1, #12
 800a626:	430a      	orrs	r2, r1
 800a628:	615a      	str	r2, [r3, #20]
 800a62a:	4b11      	ldr	r3, [pc, #68]	; (800a670 <HAL_UART_MspInit+0x104>)
 800a62c:	695a      	ldr	r2, [r3, #20]
 800a62e:	2380      	movs	r3, #128	; 0x80
 800a630:	031b      	lsls	r3, r3, #12
 800a632:	4013      	ands	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a638:	211c      	movs	r1, #28
 800a63a:	187b      	adds	r3, r7, r1
 800a63c:	2230      	movs	r2, #48	; 0x30
 800a63e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a640:	187b      	adds	r3, r7, r1
 800a642:	2202      	movs	r2, #2
 800a644:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	187b      	adds	r3, r7, r1
 800a648:	2200      	movs	r2, #0
 800a64a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a64c:	187b      	adds	r3, r7, r1
 800a64e:	2203      	movs	r2, #3
 800a650:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800a652:	187b      	adds	r3, r7, r1
 800a654:	2201      	movs	r2, #1
 800a656:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a658:	187b      	adds	r3, r7, r1
 800a65a:	4a07      	ldr	r2, [pc, #28]	; (800a678 <HAL_UART_MspInit+0x10c>)
 800a65c:	0019      	movs	r1, r3
 800a65e:	0010      	movs	r0, r2
 800a660:	f000 fa8e 	bl	800ab80 <HAL_GPIO_Init>
}
 800a664:	46c0      	nop			; (mov r8, r8)
 800a666:	46bd      	mov	sp, r7
 800a668:	b00d      	add	sp, #52	; 0x34
 800a66a:	bd90      	pop	{r4, r7, pc}
 800a66c:	40004400 	.word	0x40004400
 800a670:	40021000 	.word	0x40021000
 800a674:	40004800 	.word	0x40004800
 800a678:	48000800 	.word	0x48000800

0800a67c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a680:	e7fe      	b.n	800a680 <NMI_Handler+0x4>

0800a682 <HardFault_Handler>:
__attribute__((naked)) void HardFault_Handler(void)
{
	//here we extracted the value of MSP which happens to be the
	//base address of the stack frame(thread mode) which got saved during the exception entry
	//from thread mode to handler mode
	__asm ("MRS r0,MSP");
 800a682:	f3ef 8008 	mrs	r0, MSP
	__asm ("B HardFault_Handler_c");
 800a686:	e011      	b.n	800a6ac <HardFault_Handler_c>
}
 800a688:	46c0      	nop			; (mov r8, r8)

0800a68a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a698:	46c0      	nop			; (mov r8, r8)
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a6a2:	f000 f979 	bl	800a998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HardFault_Handler_c>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void HardFault_Handler_c(uint32_t *pBaseStackFrame)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	//uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	//MY_PRINTF("Exception : UsageFault\n");
	//MY_PRINTF("UFSR = %lx\n",(*pUFSR) & 0xFFFF);
	MY_PRINTF("!!!HARD FAULT!!!\r\n");
 800a6b4:	4b24      	ldr	r3, [pc, #144]	; (800a748 <HardFault_Handler_c+0x9c>)
 800a6b6:	0018      	movs	r0, r3
 800a6b8:	f001 fd36 	bl	800c128 <puts>
	MY_PRINTF("pBaseStackFrame = %p\r\n",pBaseStackFrame);
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	4b23      	ldr	r3, [pc, #140]	; (800a74c <HardFault_Handler_c+0xa0>)
 800a6c0:	0011      	movs	r1, r2
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	f001 fca4 	bl	800c010 <iprintf>
	MY_PRINTF("Value of R0 = %lx\r\n", pBaseStackFrame[0]);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	4b20      	ldr	r3, [pc, #128]	; (800a750 <HardFault_Handler_c+0xa4>)
 800a6ce:	0011      	movs	r1, r2
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f001 fc9d 	bl	800c010 <iprintf>
	MY_PRINTF("Value of R1 = %lx\r\n", pBaseStackFrame[1]);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <HardFault_Handler_c+0xa8>)
 800a6de:	0011      	movs	r1, r2
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f001 fc95 	bl	800c010 <iprintf>
	MY_PRINTF("Value of R2 = %lx\r\n", pBaseStackFrame[2]);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <HardFault_Handler_c+0xac>)
 800a6ee:	0011      	movs	r1, r2
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f001 fc8d 	bl	800c010 <iprintf>
	MY_PRINTF("Value of R3 = %lx\r\n", pBaseStackFrame[3]);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	4b17      	ldr	r3, [pc, #92]	; (800a75c <HardFault_Handler_c+0xb0>)
 800a6fe:	0011      	movs	r1, r2
 800a700:	0018      	movs	r0, r3
 800a702:	f001 fc85 	bl	800c010 <iprintf>
	MY_PRINTF("Value of R12 = %lx\r\n", pBaseStackFrame[4]);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3310      	adds	r3, #16
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <HardFault_Handler_c+0xb4>)
 800a70e:	0011      	movs	r1, r2
 800a710:	0018      	movs	r0, r3
 800a712:	f001 fc7d 	bl	800c010 <iprintf>
	MY_PRINTF("Value of LR = %lx\r\n", pBaseStackFrame[5]);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3314      	adds	r3, #20
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	4b11      	ldr	r3, [pc, #68]	; (800a764 <HardFault_Handler_c+0xb8>)
 800a71e:	0011      	movs	r1, r2
 800a720:	0018      	movs	r0, r3
 800a722:	f001 fc75 	bl	800c010 <iprintf>
	MY_PRINTF("Value of PC = %lx\r\n", pBaseStackFrame[6]);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3318      	adds	r3, #24
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	4b0e      	ldr	r3, [pc, #56]	; (800a768 <HardFault_Handler_c+0xbc>)
 800a72e:	0011      	movs	r1, r2
 800a730:	0018      	movs	r0, r3
 800a732:	f001 fc6d 	bl	800c010 <iprintf>
	MY_PRINTF("Value of XPSR = %lx\r\n", pBaseStackFrame[7]);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	331c      	adds	r3, #28
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <HardFault_Handler_c+0xc0>)
 800a73e:	0011      	movs	r1, r2
 800a740:	0018      	movs	r0, r3
 800a742:	f001 fc65 	bl	800c010 <iprintf>
	while(1);
 800a746:	e7fe      	b.n	800a746 <HardFault_Handler_c+0x9a>
 800a748:	0800d0d0 	.word	0x0800d0d0
 800a74c:	0800d0e4 	.word	0x0800d0e4
 800a750:	0800d0fc 	.word	0x0800d0fc
 800a754:	0800d110 	.word	0x0800d110
 800a758:	0800d124 	.word	0x0800d124
 800a75c:	0800d138 	.word	0x0800d138
 800a760:	0800d14c 	.word	0x0800d14c
 800a764:	0800d164 	.word	0x0800d164
 800a768:	0800d178 	.word	0x0800d178
 800a76c:	0800d18c 	.word	0x0800d18c

0800a770 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	e00a      	b.n	800a798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a782:	e000      	b.n	800a786 <_read+0x16>
 800a784:	bf00      	nop
 800a786:	0001      	movs	r1, r0
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	60ba      	str	r2, [r7, #8]
 800a78e:	b2ca      	uxtb	r2, r1
 800a790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	3301      	adds	r3, #1
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	dbf0      	blt.n	800a782 <_read+0x12>
	}

return len;
 800a7a0:	687b      	ldr	r3, [r7, #4]
}
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	b006      	add	sp, #24
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	e009      	b.n	800a7d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	1c5a      	adds	r2, r3, #1
 800a7c0:	60ba      	str	r2, [r7, #8]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f7ff fd35 	bl	800a234 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	dbf1      	blt.n	800a7bc <_write+0x12>
	}
	return len;
 800a7d8:	687b      	ldr	r3, [r7, #4]
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b006      	add	sp, #24
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <_close>:

int _close(int file)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
	return -1;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	425b      	negs	r3, r3
}
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b002      	add	sp, #8
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2280      	movs	r2, #128	; 0x80
 800a804:	0192      	lsls	r2, r2, #6
 800a806:	605a      	str	r2, [r3, #4]
	return 0;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	0018      	movs	r0, r3
 800a80c:	46bd      	mov	sp, r7
 800a80e:	b002      	add	sp, #8
 800a810:	bd80      	pop	{r7, pc}

0800a812 <_isatty>:

int _isatty(int file)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
	return 1;
 800a81a:	2301      	movs	r3, #1
}
 800a81c:	0018      	movs	r0, r3
 800a81e:	46bd      	mov	sp, r7
 800a820:	b002      	add	sp, #8
 800a822:	bd80      	pop	{r7, pc}

0800a824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
	return 0;
 800a830:	2300      	movs	r3, #0
}
 800a832:	0018      	movs	r0, r3
 800a834:	46bd      	mov	sp, r7
 800a836:	b004      	add	sp, #16
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a844:	4a14      	ldr	r2, [pc, #80]	; (800a898 <_sbrk+0x5c>)
 800a846:	4b15      	ldr	r3, [pc, #84]	; (800a89c <_sbrk+0x60>)
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a850:	4b13      	ldr	r3, [pc, #76]	; (800a8a0 <_sbrk+0x64>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a858:	4b11      	ldr	r3, [pc, #68]	; (800a8a0 <_sbrk+0x64>)
 800a85a:	4a12      	ldr	r2, [pc, #72]	; (800a8a4 <_sbrk+0x68>)
 800a85c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <_sbrk+0x64>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	18d3      	adds	r3, r2, r3
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d207      	bcs.n	800a87c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a86c:	f001 fb9e 	bl	800bfac <__errno>
 800a870:	0003      	movs	r3, r0
 800a872:	220c      	movs	r2, #12
 800a874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a876:	2301      	movs	r3, #1
 800a878:	425b      	negs	r3, r3
 800a87a:	e009      	b.n	800a890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a87c:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <_sbrk+0x64>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a882:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <_sbrk+0x64>)
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	18d2      	adds	r2, r2, r3
 800a88a:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <_sbrk+0x64>)
 800a88c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800a88e:	68fb      	ldr	r3, [r7, #12]
}
 800a890:	0018      	movs	r0, r3
 800a892:	46bd      	mov	sp, r7
 800a894:	b006      	add	sp, #24
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20004000 	.word	0x20004000
 800a89c:	00000400 	.word	0x00000400
 800a8a0:	20000254 	.word	0x20000254
 800a8a4:	20000270 	.word	0x20000270

0800a8a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800a8ac:	46c0      	nop			; (mov r8, r8)
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a8b4:	480d      	ldr	r0, [pc, #52]	; (800a8ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a8b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a8b8:	480d      	ldr	r0, [pc, #52]	; (800a8f0 <LoopForever+0x6>)
  ldr r1, =_edata
 800a8ba:	490e      	ldr	r1, [pc, #56]	; (800a8f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a8bc:	4a0e      	ldr	r2, [pc, #56]	; (800a8f8 <LoopForever+0xe>)
  movs r3, #0
 800a8be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a8c0:	e002      	b.n	800a8c8 <LoopCopyDataInit>

0800a8c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a8c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a8c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a8c6:	3304      	adds	r3, #4

0800a8c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a8c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a8ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a8cc:	d3f9      	bcc.n	800a8c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a8ce:	4a0b      	ldr	r2, [pc, #44]	; (800a8fc <LoopForever+0x12>)
  ldr r4, =_ebss
 800a8d0:	4c0b      	ldr	r4, [pc, #44]	; (800a900 <LoopForever+0x16>)
  movs r3, #0
 800a8d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a8d4:	e001      	b.n	800a8da <LoopFillZerobss>

0800a8d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a8d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a8d8:	3204      	adds	r2, #4

0800a8da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a8da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a8dc:	d3fb      	bcc.n	800a8d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800a8de:	f7ff ffe3 	bl	800a8a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800a8e2:	f001 fb69 	bl	800bfb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a8e6:	f7ff fcb7 	bl	800a258 <main>

0800a8ea <LoopForever>:

LoopForever:
    b LoopForever
 800a8ea:	e7fe      	b.n	800a8ea <LoopForever>
  ldr   r0, =_estack
 800a8ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800a8f0:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800a8f4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800a8f8:	0800d27c 	.word	0x0800d27c
  ldr r2, =_sbss
 800a8fc:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 800a900:	2000026c 	.word	0x2000026c

0800a904 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a904:	e7fe      	b.n	800a904 <ADC1_IRQHandler>
	...

0800a908 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <HAL_Init+0x24>)
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <HAL_Init+0x24>)
 800a912:	2110      	movs	r1, #16
 800a914:	430a      	orrs	r2, r1
 800a916:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800a918:	2000      	movs	r0, #0
 800a91a:	f000 f809 	bl	800a930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a91e:	f7ff fe01 	bl	800a524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	46c0      	nop			; (mov r8, r8)
 800a92c:	40022000 	.word	0x40022000

0800a930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a938:	4b14      	ldr	r3, [pc, #80]	; (800a98c <HAL_InitTick+0x5c>)
 800a93a:	681c      	ldr	r4, [r3, #0]
 800a93c:	4b14      	ldr	r3, [pc, #80]	; (800a990 <HAL_InitTick+0x60>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	0019      	movs	r1, r3
 800a942:	23fa      	movs	r3, #250	; 0xfa
 800a944:	0098      	lsls	r0, r3, #2
 800a946:	f7ff fbe9 	bl	800a11c <__udivsi3>
 800a94a:	0003      	movs	r3, r0
 800a94c:	0019      	movs	r1, r3
 800a94e:	0020      	movs	r0, r4
 800a950:	f7ff fbe4 	bl	800a11c <__udivsi3>
 800a954:	0003      	movs	r3, r0
 800a956:	0018      	movs	r0, r3
 800a958:	f000 f905 	bl	800ab66 <HAL_SYSTICK_Config>
 800a95c:	1e03      	subs	r3, r0, #0
 800a95e:	d001      	beq.n	800a964 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e00f      	b.n	800a984 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d80b      	bhi.n	800a982 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	2301      	movs	r3, #1
 800a96e:	425b      	negs	r3, r3
 800a970:	2200      	movs	r2, #0
 800a972:	0018      	movs	r0, r3
 800a974:	f000 f8e2 	bl	800ab3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a978:	4b06      	ldr	r3, [pc, #24]	; (800a994 <HAL_InitTick+0x64>)
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	e000      	b.n	800a984 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
}
 800a984:	0018      	movs	r0, r3
 800a986:	46bd      	mov	sp, r7
 800a988:	b003      	add	sp, #12
 800a98a:	bd90      	pop	{r4, r7, pc}
 800a98c:	200000c0 	.word	0x200000c0
 800a990:	200000c8 	.word	0x200000c8
 800a994:	200000c4 	.word	0x200000c4

0800a998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a99c:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <HAL_IncTick+0x1c>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	001a      	movs	r2, r3
 800a9a2:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <HAL_IncTick+0x20>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	18d2      	adds	r2, r2, r3
 800a9a8:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <HAL_IncTick+0x20>)
 800a9aa:	601a      	str	r2, [r3, #0]
}
 800a9ac:	46c0      	nop			; (mov r8, r8)
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	46c0      	nop			; (mov r8, r8)
 800a9b4:	200000c8 	.word	0x200000c8
 800a9b8:	20000258 	.word	0x20000258

0800a9bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  return uwTick;
 800a9c0:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <HAL_GetTick+0x10>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
}
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	20000258 	.word	0x20000258

0800a9d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a9d8:	f7ff fff0 	bl	800a9bc <HAL_GetTick>
 800a9dc:	0003      	movs	r3, r0
 800a9de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	d005      	beq.n	800a9f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a9ea:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <HAL_Delay+0x44>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	001a      	movs	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	189b      	adds	r3, r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	f7ff ffe0 	bl	800a9bc <HAL_GetTick>
 800a9fc:	0002      	movs	r2, r0
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d8f7      	bhi.n	800a9f8 <HAL_Delay+0x28>
  {
  }
}
 800aa08:	46c0      	nop			; (mov r8, r8)
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	b004      	add	sp, #16
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	200000c8 	.word	0x200000c8

0800aa18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa18:	b590      	push	{r4, r7, lr}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	0002      	movs	r2, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	1dfb      	adds	r3, r7, #7
 800aa24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aa26:	1dfb      	adds	r3, r7, #7
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b7f      	cmp	r3, #127	; 0x7f
 800aa2c:	d828      	bhi.n	800aa80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa2e:	4a2f      	ldr	r2, [pc, #188]	; (800aaec <__NVIC_SetPriority+0xd4>)
 800aa30:	1dfb      	adds	r3, r7, #7
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	b25b      	sxtb	r3, r3
 800aa36:	089b      	lsrs	r3, r3, #2
 800aa38:	33c0      	adds	r3, #192	; 0xc0
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	589b      	ldr	r3, [r3, r2]
 800aa3e:	1dfa      	adds	r2, r7, #7
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	0011      	movs	r1, r2
 800aa44:	2203      	movs	r2, #3
 800aa46:	400a      	ands	r2, r1
 800aa48:	00d2      	lsls	r2, r2, #3
 800aa4a:	21ff      	movs	r1, #255	; 0xff
 800aa4c:	4091      	lsls	r1, r2
 800aa4e:	000a      	movs	r2, r1
 800aa50:	43d2      	mvns	r2, r2
 800aa52:	401a      	ands	r2, r3
 800aa54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	019b      	lsls	r3, r3, #6
 800aa5a:	22ff      	movs	r2, #255	; 0xff
 800aa5c:	401a      	ands	r2, r3
 800aa5e:	1dfb      	adds	r3, r7, #7
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	0018      	movs	r0, r3
 800aa64:	2303      	movs	r3, #3
 800aa66:	4003      	ands	r3, r0
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa6c:	481f      	ldr	r0, [pc, #124]	; (800aaec <__NVIC_SetPriority+0xd4>)
 800aa6e:	1dfb      	adds	r3, r7, #7
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	b25b      	sxtb	r3, r3
 800aa74:	089b      	lsrs	r3, r3, #2
 800aa76:	430a      	orrs	r2, r1
 800aa78:	33c0      	adds	r3, #192	; 0xc0
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800aa7e:	e031      	b.n	800aae4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa80:	4a1b      	ldr	r2, [pc, #108]	; (800aaf0 <__NVIC_SetPriority+0xd8>)
 800aa82:	1dfb      	adds	r3, r7, #7
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	0019      	movs	r1, r3
 800aa88:	230f      	movs	r3, #15
 800aa8a:	400b      	ands	r3, r1
 800aa8c:	3b08      	subs	r3, #8
 800aa8e:	089b      	lsrs	r3, r3, #2
 800aa90:	3306      	adds	r3, #6
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	18d3      	adds	r3, r2, r3
 800aa96:	3304      	adds	r3, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	1dfa      	adds	r2, r7, #7
 800aa9c:	7812      	ldrb	r2, [r2, #0]
 800aa9e:	0011      	movs	r1, r2
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	400a      	ands	r2, r1
 800aaa4:	00d2      	lsls	r2, r2, #3
 800aaa6:	21ff      	movs	r1, #255	; 0xff
 800aaa8:	4091      	lsls	r1, r2
 800aaaa:	000a      	movs	r2, r1
 800aaac:	43d2      	mvns	r2, r2
 800aaae:	401a      	ands	r2, r3
 800aab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	019b      	lsls	r3, r3, #6
 800aab6:	22ff      	movs	r2, #255	; 0xff
 800aab8:	401a      	ands	r2, r3
 800aaba:	1dfb      	adds	r3, r7, #7
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	0018      	movs	r0, r3
 800aac0:	2303      	movs	r3, #3
 800aac2:	4003      	ands	r3, r0
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aac8:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <__NVIC_SetPriority+0xd8>)
 800aaca:	1dfb      	adds	r3, r7, #7
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	001c      	movs	r4, r3
 800aad0:	230f      	movs	r3, #15
 800aad2:	4023      	ands	r3, r4
 800aad4:	3b08      	subs	r3, #8
 800aad6:	089b      	lsrs	r3, r3, #2
 800aad8:	430a      	orrs	r2, r1
 800aada:	3306      	adds	r3, #6
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	18c3      	adds	r3, r0, r3
 800aae0:	3304      	adds	r3, #4
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	46c0      	nop			; (mov r8, r8)
 800aae6:	46bd      	mov	sp, r7
 800aae8:	b003      	add	sp, #12
 800aaea:	bd90      	pop	{r4, r7, pc}
 800aaec:	e000e100 	.word	0xe000e100
 800aaf0:	e000ed00 	.word	0xe000ed00

0800aaf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	1e5a      	subs	r2, r3, #1
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	045b      	lsls	r3, r3, #17
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d301      	bcc.n	800ab0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e010      	b.n	800ab2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <SysTick_Config+0x44>)
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	3a01      	subs	r2, #1
 800ab12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ab14:	2301      	movs	r3, #1
 800ab16:	425b      	negs	r3, r3
 800ab18:	2103      	movs	r1, #3
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f7ff ff7c 	bl	800aa18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ab20:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <SysTick_Config+0x44>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab26:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <SysTick_Config+0x44>)
 800ab28:	2207      	movs	r2, #7
 800ab2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	0018      	movs	r0, r3
 800ab30:	46bd      	mov	sp, r7
 800ab32:	b002      	add	sp, #8
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	e000e010 	.word	0xe000e010

0800ab3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	210f      	movs	r1, #15
 800ab48:	187b      	adds	r3, r7, r1
 800ab4a:	1c02      	adds	r2, r0, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	187b      	adds	r3, r7, r1
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	b25b      	sxtb	r3, r3
 800ab56:	0011      	movs	r1, r2
 800ab58:	0018      	movs	r0, r3
 800ab5a:	f7ff ff5d 	bl	800aa18 <__NVIC_SetPriority>
}
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	46bd      	mov	sp, r7
 800ab62:	b004      	add	sp, #16
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	0018      	movs	r0, r3
 800ab72:	f7ff ffbf 	bl	800aaf4 <SysTick_Config>
 800ab76:	0003      	movs	r3, r0
}
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab8e:	e14f      	b.n	800ae30 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2101      	movs	r1, #1
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4091      	lsls	r1, r2
 800ab9a:	000a      	movs	r2, r1
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d100      	bne.n	800aba8 <HAL_GPIO_Init+0x28>
 800aba6:	e140      	b.n	800ae2a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2203      	movs	r2, #3
 800abae:	4013      	ands	r3, r2
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d005      	beq.n	800abc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2203      	movs	r2, #3
 800abba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d130      	bne.n	800ac22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	2203      	movs	r2, #3
 800abcc:	409a      	lsls	r2, r3
 800abce:	0013      	movs	r3, r2
 800abd0:	43da      	mvns	r2, r3
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	4013      	ands	r3, r2
 800abd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	68da      	ldr	r2, [r3, #12]
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	409a      	lsls	r2, r3
 800abe2:	0013      	movs	r3, r2
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abf6:	2201      	movs	r2, #1
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	409a      	lsls	r2, r3
 800abfc:	0013      	movs	r3, r2
 800abfe:	43da      	mvns	r2, r3
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	4013      	ands	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	091b      	lsrs	r3, r3, #4
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	401a      	ands	r2, r3
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	409a      	lsls	r2, r3
 800ac14:	0013      	movs	r3, r2
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2203      	movs	r2, #3
 800ac28:	4013      	ands	r3, r2
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d017      	beq.n	800ac5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	2203      	movs	r2, #3
 800ac3a:	409a      	lsls	r2, r3
 800ac3c:	0013      	movs	r3, r2
 800ac3e:	43da      	mvns	r2, r3
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	4013      	ands	r3, r2
 800ac44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	689a      	ldr	r2, [r3, #8]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	409a      	lsls	r2, r3
 800ac50:	0013      	movs	r3, r2
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2203      	movs	r2, #3
 800ac64:	4013      	ands	r3, r2
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d123      	bne.n	800acb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	08da      	lsrs	r2, r3, #3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	3208      	adds	r2, #8
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	58d3      	ldr	r3, [r2, r3]
 800ac76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2207      	movs	r2, #7
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	220f      	movs	r2, #15
 800ac82:	409a      	lsls	r2, r3
 800ac84:	0013      	movs	r3, r2
 800ac86:	43da      	mvns	r2, r3
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	691a      	ldr	r2, [r3, #16]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2107      	movs	r1, #7
 800ac96:	400b      	ands	r3, r1
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	409a      	lsls	r2, r3
 800ac9c:	0013      	movs	r3, r2
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	08da      	lsrs	r2, r3, #3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3208      	adds	r2, #8
 800acac:	0092      	lsls	r2, r2, #2
 800acae:	6939      	ldr	r1, [r7, #16]
 800acb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	2203      	movs	r2, #3
 800acbe:	409a      	lsls	r2, r3
 800acc0:	0013      	movs	r3, r2
 800acc2:	43da      	mvns	r2, r3
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	4013      	ands	r3, r2
 800acc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2203      	movs	r2, #3
 800acd0:	401a      	ands	r2, r3
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	409a      	lsls	r2, r3
 800acd8:	0013      	movs	r3, r2
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	23c0      	movs	r3, #192	; 0xc0
 800acec:	029b      	lsls	r3, r3, #10
 800acee:	4013      	ands	r3, r2
 800acf0:	d100      	bne.n	800acf4 <HAL_GPIO_Init+0x174>
 800acf2:	e09a      	b.n	800ae2a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acf4:	4b54      	ldr	r3, [pc, #336]	; (800ae48 <HAL_GPIO_Init+0x2c8>)
 800acf6:	699a      	ldr	r2, [r3, #24]
 800acf8:	4b53      	ldr	r3, [pc, #332]	; (800ae48 <HAL_GPIO_Init+0x2c8>)
 800acfa:	2101      	movs	r1, #1
 800acfc:	430a      	orrs	r2, r1
 800acfe:	619a      	str	r2, [r3, #24]
 800ad00:	4b51      	ldr	r3, [pc, #324]	; (800ae48 <HAL_GPIO_Init+0x2c8>)
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	2201      	movs	r2, #1
 800ad06:	4013      	ands	r3, r2
 800ad08:	60bb      	str	r3, [r7, #8]
 800ad0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ad0c:	4a4f      	ldr	r2, [pc, #316]	; (800ae4c <HAL_GPIO_Init+0x2cc>)
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	089b      	lsrs	r3, r3, #2
 800ad12:	3302      	adds	r3, #2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	589b      	ldr	r3, [r3, r2]
 800ad18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	4013      	ands	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	220f      	movs	r2, #15
 800ad24:	409a      	lsls	r2, r3
 800ad26:	0013      	movs	r3, r2
 800ad28:	43da      	mvns	r2, r3
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	2390      	movs	r3, #144	; 0x90
 800ad34:	05db      	lsls	r3, r3, #23
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d013      	beq.n	800ad62 <HAL_GPIO_Init+0x1e2>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a44      	ldr	r2, [pc, #272]	; (800ae50 <HAL_GPIO_Init+0x2d0>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00d      	beq.n	800ad5e <HAL_GPIO_Init+0x1de>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a43      	ldr	r2, [pc, #268]	; (800ae54 <HAL_GPIO_Init+0x2d4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d007      	beq.n	800ad5a <HAL_GPIO_Init+0x1da>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a42      	ldr	r2, [pc, #264]	; (800ae58 <HAL_GPIO_Init+0x2d8>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d101      	bne.n	800ad56 <HAL_GPIO_Init+0x1d6>
 800ad52:	2303      	movs	r3, #3
 800ad54:	e006      	b.n	800ad64 <HAL_GPIO_Init+0x1e4>
 800ad56:	2305      	movs	r3, #5
 800ad58:	e004      	b.n	800ad64 <HAL_GPIO_Init+0x1e4>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e002      	b.n	800ad64 <HAL_GPIO_Init+0x1e4>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <HAL_GPIO_Init+0x1e4>
 800ad62:	2300      	movs	r3, #0
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	2103      	movs	r1, #3
 800ad68:	400a      	ands	r2, r1
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	4093      	lsls	r3, r2
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ad74:	4935      	ldr	r1, [pc, #212]	; (800ae4c <HAL_GPIO_Init+0x2cc>)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	089b      	lsrs	r3, r3, #2
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad82:	4b36      	ldr	r3, [pc, #216]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	43da      	mvns	r2, r3
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	4013      	ands	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	2380      	movs	r3, #128	; 0x80
 800ad98:	025b      	lsls	r3, r3, #9
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	d003      	beq.n	800ada6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ada6:	4b2d      	ldr	r3, [pc, #180]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800adac:	4b2b      	ldr	r3, [pc, #172]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	43da      	mvns	r2, r3
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	4013      	ands	r3, r2
 800adba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	2380      	movs	r3, #128	; 0x80
 800adc2:	029b      	lsls	r3, r3, #10
 800adc4:	4013      	ands	r3, r2
 800adc6:	d003      	beq.n	800add0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800add0:	4b22      	ldr	r3, [pc, #136]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800add6:	4b21      	ldr	r3, [pc, #132]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	43da      	mvns	r2, r3
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4013      	ands	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	2380      	movs	r3, #128	; 0x80
 800adec:	035b      	lsls	r3, r3, #13
 800adee:	4013      	ands	r3, r2
 800adf0:	d003      	beq.n	800adfa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800adfa:	4b18      	ldr	r3, [pc, #96]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800ae00:	4b16      	ldr	r3, [pc, #88]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	43da      	mvns	r2, r3
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	2380      	movs	r3, #128	; 0x80
 800ae16:	039b      	lsls	r3, r3, #14
 800ae18:	4013      	ands	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ae24:	4b0d      	ldr	r3, [pc, #52]	; (800ae5c <HAL_GPIO_Init+0x2dc>)
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	40da      	lsrs	r2, r3
 800ae38:	1e13      	subs	r3, r2, #0
 800ae3a:	d000      	beq.n	800ae3e <HAL_GPIO_Init+0x2be>
 800ae3c:	e6a8      	b.n	800ab90 <HAL_GPIO_Init+0x10>
  } 
}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	46c0      	nop			; (mov r8, r8)
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b006      	add	sp, #24
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	40021000 	.word	0x40021000
 800ae4c:	40010000 	.word	0x40010000
 800ae50:	48000400 	.word	0x48000400
 800ae54:	48000800 	.word	0x48000800
 800ae58:	48000c00 	.word	0x48000c00
 800ae5c:	40010400 	.word	0x40010400

0800ae60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	0008      	movs	r0, r1
 800ae6a:	0011      	movs	r1, r2
 800ae6c:	1cbb      	adds	r3, r7, #2
 800ae6e:	1c02      	adds	r2, r0, #0
 800ae70:	801a      	strh	r2, [r3, #0]
 800ae72:	1c7b      	adds	r3, r7, #1
 800ae74:	1c0a      	adds	r2, r1, #0
 800ae76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae78:	1c7b      	adds	r3, r7, #1
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ae80:	1cbb      	adds	r3, r7, #2
 800ae82:	881a      	ldrh	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ae88:	e003      	b.n	800ae92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ae8a:	1cbb      	adds	r3, r7, #2
 800ae8c:	881a      	ldrh	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	46bd      	mov	sp, r7
 800ae96:	b002      	add	sp, #8
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e305      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	d100      	bne.n	800aeba <HAL_RCC_OscConfig+0x1e>
 800aeb8:	e08d      	b.n	800afd6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800aeba:	4bc5      	ldr	r3, [pc, #788]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	220c      	movs	r2, #12
 800aec0:	4013      	ands	r3, r2
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d00e      	beq.n	800aee4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aec6:	4bc2      	ldr	r3, [pc, #776]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	220c      	movs	r2, #12
 800aecc:	4013      	ands	r3, r2
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d116      	bne.n	800af00 <HAL_RCC_OscConfig+0x64>
 800aed2:	4bbf      	ldr	r3, [pc, #764]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	23c0      	movs	r3, #192	; 0xc0
 800aed8:	025b      	lsls	r3, r3, #9
 800aeda:	401a      	ands	r2, r3
 800aedc:	2380      	movs	r3, #128	; 0x80
 800aede:	025b      	lsls	r3, r3, #9
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d10d      	bne.n	800af00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aee4:	4bba      	ldr	r3, [pc, #744]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	2380      	movs	r3, #128	; 0x80
 800aeea:	029b      	lsls	r3, r3, #10
 800aeec:	4013      	ands	r3, r2
 800aeee:	d100      	bne.n	800aef2 <HAL_RCC_OscConfig+0x56>
 800aef0:	e070      	b.n	800afd4 <HAL_RCC_OscConfig+0x138>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d000      	beq.n	800aefc <HAL_RCC_OscConfig+0x60>
 800aefa:	e06b      	b.n	800afd4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e2dc      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d107      	bne.n	800af18 <HAL_RCC_OscConfig+0x7c>
 800af08:	4bb1      	ldr	r3, [pc, #708]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	4bb0      	ldr	r3, [pc, #704]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af0e:	2180      	movs	r1, #128	; 0x80
 800af10:	0249      	lsls	r1, r1, #9
 800af12:	430a      	orrs	r2, r1
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	e02f      	b.n	800af78 <HAL_RCC_OscConfig+0xdc>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10c      	bne.n	800af3a <HAL_RCC_OscConfig+0x9e>
 800af20:	4bab      	ldr	r3, [pc, #684]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	4baa      	ldr	r3, [pc, #680]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af26:	49ab      	ldr	r1, [pc, #684]	; (800b1d4 <HAL_RCC_OscConfig+0x338>)
 800af28:	400a      	ands	r2, r1
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	4ba8      	ldr	r3, [pc, #672]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	4ba7      	ldr	r3, [pc, #668]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af32:	49a9      	ldr	r1, [pc, #676]	; (800b1d8 <HAL_RCC_OscConfig+0x33c>)
 800af34:	400a      	ands	r2, r1
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e01e      	b.n	800af78 <HAL_RCC_OscConfig+0xdc>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	2b05      	cmp	r3, #5
 800af40:	d10e      	bne.n	800af60 <HAL_RCC_OscConfig+0xc4>
 800af42:	4ba3      	ldr	r3, [pc, #652]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4ba2      	ldr	r3, [pc, #648]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af48:	2180      	movs	r1, #128	; 0x80
 800af4a:	02c9      	lsls	r1, r1, #11
 800af4c:	430a      	orrs	r2, r1
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	4b9f      	ldr	r3, [pc, #636]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	4b9e      	ldr	r3, [pc, #632]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af56:	2180      	movs	r1, #128	; 0x80
 800af58:	0249      	lsls	r1, r1, #9
 800af5a:	430a      	orrs	r2, r1
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	e00b      	b.n	800af78 <HAL_RCC_OscConfig+0xdc>
 800af60:	4b9b      	ldr	r3, [pc, #620]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	4b9a      	ldr	r3, [pc, #616]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af66:	499b      	ldr	r1, [pc, #620]	; (800b1d4 <HAL_RCC_OscConfig+0x338>)
 800af68:	400a      	ands	r2, r1
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	4b98      	ldr	r3, [pc, #608]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	4b97      	ldr	r3, [pc, #604]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af72:	4999      	ldr	r1, [pc, #612]	; (800b1d8 <HAL_RCC_OscConfig+0x33c>)
 800af74:	400a      	ands	r2, r1
 800af76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d014      	beq.n	800afaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af80:	f7ff fd1c 	bl	800a9bc <HAL_GetTick>
 800af84:	0003      	movs	r3, r0
 800af86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af88:	e008      	b.n	800af9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af8a:	f7ff fd17 	bl	800a9bc <HAL_GetTick>
 800af8e:	0002      	movs	r2, r0
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	2b64      	cmp	r3, #100	; 0x64
 800af96:	d901      	bls.n	800af9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	e28e      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af9c:	4b8c      	ldr	r3, [pc, #560]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	2380      	movs	r3, #128	; 0x80
 800afa2:	029b      	lsls	r3, r3, #10
 800afa4:	4013      	ands	r3, r2
 800afa6:	d0f0      	beq.n	800af8a <HAL_RCC_OscConfig+0xee>
 800afa8:	e015      	b.n	800afd6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afaa:	f7ff fd07 	bl	800a9bc <HAL_GetTick>
 800afae:	0003      	movs	r3, r0
 800afb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afb2:	e008      	b.n	800afc6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afb4:	f7ff fd02 	bl	800a9bc <HAL_GetTick>
 800afb8:	0002      	movs	r2, r0
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b64      	cmp	r3, #100	; 0x64
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e279      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afc6:	4b82      	ldr	r3, [pc, #520]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	2380      	movs	r3, #128	; 0x80
 800afcc:	029b      	lsls	r3, r3, #10
 800afce:	4013      	ands	r3, r2
 800afd0:	d1f0      	bne.n	800afb4 <HAL_RCC_OscConfig+0x118>
 800afd2:	e000      	b.n	800afd6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2202      	movs	r2, #2
 800afdc:	4013      	ands	r3, r2
 800afde:	d100      	bne.n	800afe2 <HAL_RCC_OscConfig+0x146>
 800afe0:	e06c      	b.n	800b0bc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800afe2:	4b7b      	ldr	r3, [pc, #492]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	220c      	movs	r2, #12
 800afe8:	4013      	ands	r3, r2
 800afea:	d00e      	beq.n	800b00a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800afec:	4b78      	ldr	r3, [pc, #480]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	220c      	movs	r2, #12
 800aff2:	4013      	ands	r3, r2
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d11f      	bne.n	800b038 <HAL_RCC_OscConfig+0x19c>
 800aff8:	4b75      	ldr	r3, [pc, #468]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	23c0      	movs	r3, #192	; 0xc0
 800affe:	025b      	lsls	r3, r3, #9
 800b000:	401a      	ands	r2, r3
 800b002:	2380      	movs	r3, #128	; 0x80
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	429a      	cmp	r2, r3
 800b008:	d116      	bne.n	800b038 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b00a:	4b71      	ldr	r3, [pc, #452]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2202      	movs	r2, #2
 800b010:	4013      	ands	r3, r2
 800b012:	d005      	beq.n	800b020 <HAL_RCC_OscConfig+0x184>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d001      	beq.n	800b020 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e24c      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b020:	4b6b      	ldr	r3, [pc, #428]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	22f8      	movs	r2, #248	; 0xf8
 800b026:	4393      	bics	r3, r2
 800b028:	0019      	movs	r1, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	00da      	lsls	r2, r3, #3
 800b030:	4b67      	ldr	r3, [pc, #412]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b032:	430a      	orrs	r2, r1
 800b034:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b036:	e041      	b.n	800b0bc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d024      	beq.n	800b08a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b040:	4b63      	ldr	r3, [pc, #396]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4b62      	ldr	r3, [pc, #392]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b046:	2101      	movs	r1, #1
 800b048:	430a      	orrs	r2, r1
 800b04a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b04c:	f7ff fcb6 	bl	800a9bc <HAL_GetTick>
 800b050:	0003      	movs	r3, r0
 800b052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b054:	e008      	b.n	800b068 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b056:	f7ff fcb1 	bl	800a9bc <HAL_GetTick>
 800b05a:	0002      	movs	r2, r0
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	2b02      	cmp	r3, #2
 800b062:	d901      	bls.n	800b068 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e228      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b068:	4b59      	ldr	r3, [pc, #356]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2202      	movs	r2, #2
 800b06e:	4013      	ands	r3, r2
 800b070:	d0f1      	beq.n	800b056 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b072:	4b57      	ldr	r3, [pc, #348]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	22f8      	movs	r2, #248	; 0xf8
 800b078:	4393      	bics	r3, r2
 800b07a:	0019      	movs	r1, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	00da      	lsls	r2, r3, #3
 800b082:	4b53      	ldr	r3, [pc, #332]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b084:	430a      	orrs	r2, r1
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	e018      	b.n	800b0bc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b08a:	4b51      	ldr	r3, [pc, #324]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b50      	ldr	r3, [pc, #320]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b090:	2101      	movs	r1, #1
 800b092:	438a      	bics	r2, r1
 800b094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b096:	f7ff fc91 	bl	800a9bc <HAL_GetTick>
 800b09a:	0003      	movs	r3, r0
 800b09c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b09e:	e008      	b.n	800b0b2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0a0:	f7ff fc8c 	bl	800a9bc <HAL_GetTick>
 800b0a4:	0002      	movs	r2, r0
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e203      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0b2:	4b47      	ldr	r3, [pc, #284]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	d1f1      	bne.n	800b0a0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	d036      	beq.n	800b134 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d019      	beq.n	800b102 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0ce:	4b40      	ldr	r3, [pc, #256]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d2:	4b3f      	ldr	r3, [pc, #252]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0da:	f7ff fc6f 	bl	800a9bc <HAL_GetTick>
 800b0de:	0003      	movs	r3, r0
 800b0e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0e4:	f7ff fc6a 	bl	800a9bc <HAL_GetTick>
 800b0e8:	0002      	movs	r2, r0
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e1e1      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0f6:	4b36      	ldr	r3, [pc, #216]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	d0f1      	beq.n	800b0e4 <HAL_RCC_OscConfig+0x248>
 800b100:	e018      	b.n	800b134 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b102:	4b33      	ldr	r3, [pc, #204]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b106:	4b32      	ldr	r3, [pc, #200]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b108:	2101      	movs	r1, #1
 800b10a:	438a      	bics	r2, r1
 800b10c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b10e:	f7ff fc55 	bl	800a9bc <HAL_GetTick>
 800b112:	0003      	movs	r3, r0
 800b114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b118:	f7ff fc50 	bl	800a9bc <HAL_GetTick>
 800b11c:	0002      	movs	r2, r0
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b02      	cmp	r3, #2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e1c7      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b12a:	4b29      	ldr	r3, [pc, #164]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2202      	movs	r2, #2
 800b130:	4013      	ands	r3, r2
 800b132:	d1f1      	bne.n	800b118 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2204      	movs	r2, #4
 800b13a:	4013      	ands	r3, r2
 800b13c:	d100      	bne.n	800b140 <HAL_RCC_OscConfig+0x2a4>
 800b13e:	e0b5      	b.n	800b2ac <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b140:	201f      	movs	r0, #31
 800b142:	183b      	adds	r3, r7, r0
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b148:	4b21      	ldr	r3, [pc, #132]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b14a:	69da      	ldr	r2, [r3, #28]
 800b14c:	2380      	movs	r3, #128	; 0x80
 800b14e:	055b      	lsls	r3, r3, #21
 800b150:	4013      	ands	r3, r2
 800b152:	d110      	bne.n	800b176 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b154:	4b1e      	ldr	r3, [pc, #120]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b156:	69da      	ldr	r2, [r3, #28]
 800b158:	4b1d      	ldr	r3, [pc, #116]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b15a:	2180      	movs	r1, #128	; 0x80
 800b15c:	0549      	lsls	r1, r1, #21
 800b15e:	430a      	orrs	r2, r1
 800b160:	61da      	str	r2, [r3, #28]
 800b162:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b164:	69da      	ldr	r2, [r3, #28]
 800b166:	2380      	movs	r3, #128	; 0x80
 800b168:	055b      	lsls	r3, r3, #21
 800b16a:	4013      	ands	r3, r2
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b170:	183b      	adds	r3, r7, r0
 800b172:	2201      	movs	r2, #1
 800b174:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b176:	4b19      	ldr	r3, [pc, #100]	; (800b1dc <HAL_RCC_OscConfig+0x340>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	2380      	movs	r3, #128	; 0x80
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	4013      	ands	r3, r2
 800b180:	d11a      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b182:	4b16      	ldr	r3, [pc, #88]	; (800b1dc <HAL_RCC_OscConfig+0x340>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	4b15      	ldr	r3, [pc, #84]	; (800b1dc <HAL_RCC_OscConfig+0x340>)
 800b188:	2180      	movs	r1, #128	; 0x80
 800b18a:	0049      	lsls	r1, r1, #1
 800b18c:	430a      	orrs	r2, r1
 800b18e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b190:	f7ff fc14 	bl	800a9bc <HAL_GetTick>
 800b194:	0003      	movs	r3, r0
 800b196:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b198:	e008      	b.n	800b1ac <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b19a:	f7ff fc0f 	bl	800a9bc <HAL_GetTick>
 800b19e:	0002      	movs	r2, r0
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b64      	cmp	r3, #100	; 0x64
 800b1a6:	d901      	bls.n	800b1ac <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e186      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1ac:	4b0b      	ldr	r3, [pc, #44]	; (800b1dc <HAL_RCC_OscConfig+0x340>)
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d0f0      	beq.n	800b19a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d10f      	bne.n	800b1e0 <HAL_RCC_OscConfig+0x344>
 800b1c0:	4b03      	ldr	r3, [pc, #12]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b1c2:	6a1a      	ldr	r2, [r3, #32]
 800b1c4:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <HAL_RCC_OscConfig+0x334>)
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	621a      	str	r2, [r3, #32]
 800b1cc:	e036      	b.n	800b23c <HAL_RCC_OscConfig+0x3a0>
 800b1ce:	46c0      	nop			; (mov r8, r8)
 800b1d0:	40021000 	.word	0x40021000
 800b1d4:	fffeffff 	.word	0xfffeffff
 800b1d8:	fffbffff 	.word	0xfffbffff
 800b1dc:	40007000 	.word	0x40007000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10c      	bne.n	800b202 <HAL_RCC_OscConfig+0x366>
 800b1e8:	4bb6      	ldr	r3, [pc, #728]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b1ea:	6a1a      	ldr	r2, [r3, #32]
 800b1ec:	4bb5      	ldr	r3, [pc, #724]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	438a      	bics	r2, r1
 800b1f2:	621a      	str	r2, [r3, #32]
 800b1f4:	4bb3      	ldr	r3, [pc, #716]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b1f6:	6a1a      	ldr	r2, [r3, #32]
 800b1f8:	4bb2      	ldr	r3, [pc, #712]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b1fa:	2104      	movs	r1, #4
 800b1fc:	438a      	bics	r2, r1
 800b1fe:	621a      	str	r2, [r3, #32]
 800b200:	e01c      	b.n	800b23c <HAL_RCC_OscConfig+0x3a0>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	2b05      	cmp	r3, #5
 800b208:	d10c      	bne.n	800b224 <HAL_RCC_OscConfig+0x388>
 800b20a:	4bae      	ldr	r3, [pc, #696]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b20c:	6a1a      	ldr	r2, [r3, #32]
 800b20e:	4bad      	ldr	r3, [pc, #692]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b210:	2104      	movs	r1, #4
 800b212:	430a      	orrs	r2, r1
 800b214:	621a      	str	r2, [r3, #32]
 800b216:	4bab      	ldr	r3, [pc, #684]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b218:	6a1a      	ldr	r2, [r3, #32]
 800b21a:	4baa      	ldr	r3, [pc, #680]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b21c:	2101      	movs	r1, #1
 800b21e:	430a      	orrs	r2, r1
 800b220:	621a      	str	r2, [r3, #32]
 800b222:	e00b      	b.n	800b23c <HAL_RCC_OscConfig+0x3a0>
 800b224:	4ba7      	ldr	r3, [pc, #668]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b226:	6a1a      	ldr	r2, [r3, #32]
 800b228:	4ba6      	ldr	r3, [pc, #664]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b22a:	2101      	movs	r1, #1
 800b22c:	438a      	bics	r2, r1
 800b22e:	621a      	str	r2, [r3, #32]
 800b230:	4ba4      	ldr	r3, [pc, #656]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b232:	6a1a      	ldr	r2, [r3, #32]
 800b234:	4ba3      	ldr	r3, [pc, #652]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b236:	2104      	movs	r1, #4
 800b238:	438a      	bics	r2, r1
 800b23a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d014      	beq.n	800b26e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b244:	f7ff fbba 	bl	800a9bc <HAL_GetTick>
 800b248:	0003      	movs	r3, r0
 800b24a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b24c:	e009      	b.n	800b262 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b24e:	f7ff fbb5 	bl	800a9bc <HAL_GetTick>
 800b252:	0002      	movs	r2, r0
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	4a9b      	ldr	r2, [pc, #620]	; (800b4c8 <HAL_RCC_OscConfig+0x62c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d901      	bls.n	800b262 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e12b      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b262:	4b98      	ldr	r3, [pc, #608]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	2202      	movs	r2, #2
 800b268:	4013      	ands	r3, r2
 800b26a:	d0f0      	beq.n	800b24e <HAL_RCC_OscConfig+0x3b2>
 800b26c:	e013      	b.n	800b296 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b26e:	f7ff fba5 	bl	800a9bc <HAL_GetTick>
 800b272:	0003      	movs	r3, r0
 800b274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b276:	e009      	b.n	800b28c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b278:	f7ff fba0 	bl	800a9bc <HAL_GetTick>
 800b27c:	0002      	movs	r2, r0
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	4a91      	ldr	r2, [pc, #580]	; (800b4c8 <HAL_RCC_OscConfig+0x62c>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d901      	bls.n	800b28c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e116      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b28c:	4b8d      	ldr	r3, [pc, #564]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	2202      	movs	r2, #2
 800b292:	4013      	ands	r3, r2
 800b294:	d1f0      	bne.n	800b278 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b296:	231f      	movs	r3, #31
 800b298:	18fb      	adds	r3, r7, r3
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d105      	bne.n	800b2ac <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2a0:	4b88      	ldr	r3, [pc, #544]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2a2:	69da      	ldr	r2, [r3, #28]
 800b2a4:	4b87      	ldr	r3, [pc, #540]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2a6:	4989      	ldr	r1, [pc, #548]	; (800b4cc <HAL_RCC_OscConfig+0x630>)
 800b2a8:	400a      	ands	r2, r1
 800b2aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2210      	movs	r2, #16
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	d063      	beq.n	800b37e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d12a      	bne.n	800b314 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800b2be:	4b81      	ldr	r3, [pc, #516]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2c2:	4b80      	ldr	r3, [pc, #512]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2c4:	2104      	movs	r1, #4
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800b2ca:	4b7e      	ldr	r3, [pc, #504]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ce:	4b7d      	ldr	r3, [pc, #500]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2d6:	f7ff fb71 	bl	800a9bc <HAL_GetTick>
 800b2da:	0003      	movs	r3, r0
 800b2dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800b2de:	e008      	b.n	800b2f2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800b2e0:	f7ff fb6c 	bl	800a9bc <HAL_GetTick>
 800b2e4:	0002      	movs	r2, r0
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e0e3      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800b2f2:	4b74      	ldr	r3, [pc, #464]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	d0f1      	beq.n	800b2e0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800b2fc:	4b71      	ldr	r3, [pc, #452]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b300:	22f8      	movs	r2, #248	; 0xf8
 800b302:	4393      	bics	r3, r2
 800b304:	0019      	movs	r1, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	00da      	lsls	r2, r3, #3
 800b30c:	4b6d      	ldr	r3, [pc, #436]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b30e:	430a      	orrs	r2, r1
 800b310:	635a      	str	r2, [r3, #52]	; 0x34
 800b312:	e034      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	3305      	adds	r3, #5
 800b31a:	d111      	bne.n	800b340 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800b31c:	4b69      	ldr	r3, [pc, #420]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b320:	4b68      	ldr	r3, [pc, #416]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b322:	2104      	movs	r1, #4
 800b324:	438a      	bics	r2, r1
 800b326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800b328:	4b66      	ldr	r3, [pc, #408]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32c:	22f8      	movs	r2, #248	; 0xf8
 800b32e:	4393      	bics	r3, r2
 800b330:	0019      	movs	r1, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	00da      	lsls	r2, r3, #3
 800b338:	4b62      	ldr	r3, [pc, #392]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b33a:	430a      	orrs	r2, r1
 800b33c:	635a      	str	r2, [r3, #52]	; 0x34
 800b33e:	e01e      	b.n	800b37e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800b340:	4b60      	ldr	r3, [pc, #384]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b344:	4b5f      	ldr	r3, [pc, #380]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b346:	2104      	movs	r1, #4
 800b348:	430a      	orrs	r2, r1
 800b34a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800b34c:	4b5d      	ldr	r3, [pc, #372]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b350:	4b5c      	ldr	r3, [pc, #368]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b352:	2101      	movs	r1, #1
 800b354:	438a      	bics	r2, r1
 800b356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b358:	f7ff fb30 	bl	800a9bc <HAL_GetTick>
 800b35c:	0003      	movs	r3, r0
 800b35e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800b360:	e008      	b.n	800b374 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800b362:	f7ff fb2b 	bl	800a9bc <HAL_GetTick>
 800b366:	0002      	movs	r2, r0
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d901      	bls.n	800b374 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e0a2      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800b374:	4b53      	ldr	r3, [pc, #332]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	2202      	movs	r2, #2
 800b37a:	4013      	ands	r3, r2
 800b37c:	d1f1      	bne.n	800b362 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d100      	bne.n	800b388 <HAL_RCC_OscConfig+0x4ec>
 800b386:	e097      	b.n	800b4b8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b388:	4b4e      	ldr	r3, [pc, #312]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	220c      	movs	r2, #12
 800b38e:	4013      	ands	r3, r2
 800b390:	2b08      	cmp	r3, #8
 800b392:	d100      	bne.n	800b396 <HAL_RCC_OscConfig+0x4fa>
 800b394:	e06b      	b.n	800b46e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d14c      	bne.n	800b438 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b39e:	4b49      	ldr	r3, [pc, #292]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b48      	ldr	r3, [pc, #288]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3a4:	494a      	ldr	r1, [pc, #296]	; (800b4d0 <HAL_RCC_OscConfig+0x634>)
 800b3a6:	400a      	ands	r2, r1
 800b3a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3aa:	f7ff fb07 	bl	800a9bc <HAL_GetTick>
 800b3ae:	0003      	movs	r3, r0
 800b3b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b3b2:	e008      	b.n	800b3c6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3b4:	f7ff fb02 	bl	800a9bc <HAL_GetTick>
 800b3b8:	0002      	movs	r2, r0
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e079      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b3c6:	4b3f      	ldr	r3, [pc, #252]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	2380      	movs	r3, #128	; 0x80
 800b3cc:	049b      	lsls	r3, r3, #18
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	d1f0      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3d2:	4b3c      	ldr	r3, [pc, #240]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	220f      	movs	r2, #15
 800b3d8:	4393      	bics	r3, r2
 800b3da:	0019      	movs	r1, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e0:	4b38      	ldr	r3, [pc, #224]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b3e6:	4b37      	ldr	r3, [pc, #220]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4a3a      	ldr	r2, [pc, #232]	; (800b4d4 <HAL_RCC_OscConfig+0x638>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	0019      	movs	r1, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	4b32      	ldr	r3, [pc, #200]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b400:	4b30      	ldr	r3, [pc, #192]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	4b2f      	ldr	r3, [pc, #188]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b406:	2180      	movs	r1, #128	; 0x80
 800b408:	0449      	lsls	r1, r1, #17
 800b40a:	430a      	orrs	r2, r1
 800b40c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b40e:	f7ff fad5 	bl	800a9bc <HAL_GetTick>
 800b412:	0003      	movs	r3, r0
 800b414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b416:	e008      	b.n	800b42a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b418:	f7ff fad0 	bl	800a9bc <HAL_GetTick>
 800b41c:	0002      	movs	r2, r0
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	2b02      	cmp	r3, #2
 800b424:	d901      	bls.n	800b42a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800b426:	2303      	movs	r3, #3
 800b428:	e047      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b42a:	4b26      	ldr	r3, [pc, #152]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	2380      	movs	r3, #128	; 0x80
 800b430:	049b      	lsls	r3, r3, #18
 800b432:	4013      	ands	r3, r2
 800b434:	d0f0      	beq.n	800b418 <HAL_RCC_OscConfig+0x57c>
 800b436:	e03f      	b.n	800b4b8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b438:	4b22      	ldr	r3, [pc, #136]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	4b21      	ldr	r3, [pc, #132]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b43e:	4924      	ldr	r1, [pc, #144]	; (800b4d0 <HAL_RCC_OscConfig+0x634>)
 800b440:	400a      	ands	r2, r1
 800b442:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b444:	f7ff faba 	bl	800a9bc <HAL_GetTick>
 800b448:	0003      	movs	r3, r0
 800b44a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b44c:	e008      	b.n	800b460 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b44e:	f7ff fab5 	bl	800a9bc <HAL_GetTick>
 800b452:	0002      	movs	r2, r0
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d901      	bls.n	800b460 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e02c      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b460:	4b18      	ldr	r3, [pc, #96]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	2380      	movs	r3, #128	; 0x80
 800b466:	049b      	lsls	r3, r3, #18
 800b468:	4013      	ands	r3, r2
 800b46a:	d1f0      	bne.n	800b44e <HAL_RCC_OscConfig+0x5b2>
 800b46c:	e024      	b.n	800b4b8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d101      	bne.n	800b47a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e01f      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800b480:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <HAL_RCC_OscConfig+0x628>)
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	23c0      	movs	r3, #192	; 0xc0
 800b48a:	025b      	lsls	r3, r3, #9
 800b48c:	401a      	ands	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b492:	429a      	cmp	r2, r3
 800b494:	d10e      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	220f      	movs	r2, #15
 800b49a:	401a      	ands	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d107      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	23f0      	movs	r3, #240	; 0xf0
 800b4a8:	039b      	lsls	r3, r3, #14
 800b4aa:	401a      	ands	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d001      	beq.n	800b4b8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e000      	b.n	800b4ba <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	b008      	add	sp, #32
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	46c0      	nop			; (mov r8, r8)
 800b4c4:	40021000 	.word	0x40021000
 800b4c8:	00001388 	.word	0x00001388
 800b4cc:	efffffff 	.word	0xefffffff
 800b4d0:	feffffff 	.word	0xfeffffff
 800b4d4:	ffc27fff 	.word	0xffc27fff

0800b4d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e0b3      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b4ec:	4b5b      	ldr	r3, [pc, #364]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d911      	bls.n	800b51e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4fa:	4b58      	ldr	r3, [pc, #352]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2201      	movs	r2, #1
 800b500:	4393      	bics	r3, r2
 800b502:	0019      	movs	r1, r3
 800b504:	4b55      	ldr	r3, [pc, #340]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	430a      	orrs	r2, r1
 800b50a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b50c:	4b53      	ldr	r3, [pc, #332]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2201      	movs	r2, #1
 800b512:	4013      	ands	r3, r2
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d001      	beq.n	800b51e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e09a      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2202      	movs	r2, #2
 800b524:	4013      	ands	r3, r2
 800b526:	d015      	beq.n	800b554 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2204      	movs	r2, #4
 800b52e:	4013      	ands	r3, r2
 800b530:	d006      	beq.n	800b540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b532:	4b4b      	ldr	r3, [pc, #300]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	4b4a      	ldr	r3, [pc, #296]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b538:	21e0      	movs	r1, #224	; 0xe0
 800b53a:	00c9      	lsls	r1, r1, #3
 800b53c:	430a      	orrs	r2, r1
 800b53e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b540:	4b47      	ldr	r3, [pc, #284]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	22f0      	movs	r2, #240	; 0xf0
 800b546:	4393      	bics	r3, r2
 800b548:	0019      	movs	r1, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689a      	ldr	r2, [r3, #8]
 800b54e:	4b44      	ldr	r3, [pc, #272]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b550:	430a      	orrs	r2, r1
 800b552:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2201      	movs	r2, #1
 800b55a:	4013      	ands	r3, r2
 800b55c:	d040      	beq.n	800b5e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d107      	bne.n	800b576 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b566:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	2380      	movs	r3, #128	; 0x80
 800b56c:	029b      	lsls	r3, r3, #10
 800b56e:	4013      	ands	r3, r2
 800b570:	d114      	bne.n	800b59c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e06e      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d107      	bne.n	800b58e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b57e:	4b38      	ldr	r3, [pc, #224]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	2380      	movs	r3, #128	; 0x80
 800b584:	049b      	lsls	r3, r3, #18
 800b586:	4013      	ands	r3, r2
 800b588:	d108      	bne.n	800b59c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e062      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b58e:	4b34      	ldr	r3, [pc, #208]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2202      	movs	r2, #2
 800b594:	4013      	ands	r3, r2
 800b596:	d101      	bne.n	800b59c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e05b      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b59c:	4b30      	ldr	r3, [pc, #192]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2203      	movs	r2, #3
 800b5a2:	4393      	bics	r3, r2
 800b5a4:	0019      	movs	r1, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	4b2d      	ldr	r3, [pc, #180]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b5b0:	f7ff fa04 	bl	800a9bc <HAL_GetTick>
 800b5b4:	0003      	movs	r3, r0
 800b5b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5b8:	e009      	b.n	800b5ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5ba:	f7ff f9ff 	bl	800a9bc <HAL_GetTick>
 800b5be:	0002      	movs	r2, r0
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	4a27      	ldr	r2, [pc, #156]	; (800b664 <HAL_RCC_ClockConfig+0x18c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d901      	bls.n	800b5ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e042      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ce:	4b24      	ldr	r3, [pc, #144]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	220c      	movs	r2, #12
 800b5d4:	401a      	ands	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d1ec      	bne.n	800b5ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b5e0:	4b1e      	ldr	r3, [pc, #120]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d211      	bcs.n	800b612 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4393      	bics	r3, r2
 800b5f6:	0019      	movs	r1, r3
 800b5f8:	4b18      	ldr	r3, [pc, #96]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b600:	4b16      	ldr	r3, [pc, #88]	; (800b65c <HAL_RCC_ClockConfig+0x184>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2201      	movs	r2, #1
 800b606:	4013      	ands	r3, r2
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d001      	beq.n	800b612 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e020      	b.n	800b654 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2204      	movs	r2, #4
 800b618:	4013      	ands	r3, r2
 800b61a:	d009      	beq.n	800b630 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800b61c:	4b10      	ldr	r3, [pc, #64]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4a11      	ldr	r2, [pc, #68]	; (800b668 <HAL_RCC_ClockConfig+0x190>)
 800b622:	4013      	ands	r3, r2
 800b624:	0019      	movs	r1, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b62c:	430a      	orrs	r2, r1
 800b62e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800b630:	f000 f820 	bl	800b674 <HAL_RCC_GetSysClockFreq>
 800b634:	0001      	movs	r1, r0
 800b636:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <HAL_RCC_ClockConfig+0x188>)
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	091b      	lsrs	r3, r3, #4
 800b63c:	220f      	movs	r2, #15
 800b63e:	4013      	ands	r3, r2
 800b640:	4a0a      	ldr	r2, [pc, #40]	; (800b66c <HAL_RCC_ClockConfig+0x194>)
 800b642:	5cd3      	ldrb	r3, [r2, r3]
 800b644:	000a      	movs	r2, r1
 800b646:	40da      	lsrs	r2, r3
 800b648:	4b09      	ldr	r3, [pc, #36]	; (800b670 <HAL_RCC_ClockConfig+0x198>)
 800b64a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800b64c:	2000      	movs	r0, #0
 800b64e:	f7ff f96f 	bl	800a930 <HAL_InitTick>
  
  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	0018      	movs	r0, r3
 800b656:	46bd      	mov	sp, r7
 800b658:	b004      	add	sp, #16
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	40022000 	.word	0x40022000
 800b660:	40021000 	.word	0x40021000
 800b664:	00001388 	.word	0x00001388
 800b668:	fffff8ff 	.word	0xfffff8ff
 800b66c:	0800d1c4 	.word	0x0800d1c4
 800b670:	200000c0 	.word	0x200000c0

0800b674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b08f      	sub	sp, #60	; 0x3c
 800b678:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800b67a:	2314      	movs	r3, #20
 800b67c:	18fb      	adds	r3, r7, r3
 800b67e:	4a2c      	ldr	r2, [pc, #176]	; (800b730 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b680:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b682:	c313      	stmia	r3!, {r0, r1, r4}
 800b684:	6812      	ldr	r2, [r2, #0]
 800b686:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800b688:	1d3b      	adds	r3, r7, #4
 800b68a:	4a2a      	ldr	r2, [pc, #168]	; (800b734 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b68c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b68e:	c313      	stmia	r3!, {r0, r1, r4}
 800b690:	6812      	ldr	r2, [r2, #0]
 800b692:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b698:	2300      	movs	r3, #0
 800b69a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b69c:	2300      	movs	r3, #0
 800b69e:	637b      	str	r3, [r7, #52]	; 0x34
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800b6a8:	4b23      	ldr	r3, [pc, #140]	; (800b738 <HAL_RCC_GetSysClockFreq+0xc4>)
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b0:	220c      	movs	r2, #12
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	d002      	beq.n	800b6be <HAL_RCC_GetSysClockFreq+0x4a>
 800b6b8:	2b08      	cmp	r3, #8
 800b6ba:	d003      	beq.n	800b6c4 <HAL_RCC_GetSysClockFreq+0x50>
 800b6bc:	e02f      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b6be:	4b1f      	ldr	r3, [pc, #124]	; (800b73c <HAL_RCC_GetSysClockFreq+0xc8>)
 800b6c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b6c2:	e02f      	b.n	800b724 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800b6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c6:	0c9b      	lsrs	r3, r3, #18
 800b6c8:	220f      	movs	r2, #15
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2214      	movs	r2, #20
 800b6ce:	18ba      	adds	r2, r7, r2
 800b6d0:	5cd3      	ldrb	r3, [r2, r3]
 800b6d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800b6d4:	4b18      	ldr	r3, [pc, #96]	; (800b738 <HAL_RCC_GetSysClockFreq+0xc4>)
 800b6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d8:	220f      	movs	r2, #15
 800b6da:	4013      	ands	r3, r2
 800b6dc:	1d3a      	adds	r2, r7, #4
 800b6de:	5cd3      	ldrb	r3, [r2, r3]
 800b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e4:	23c0      	movs	r3, #192	; 0xc0
 800b6e6:	025b      	lsls	r3, r3, #9
 800b6e8:	401a      	ands	r2, r3
 800b6ea:	2380      	movs	r3, #128	; 0x80
 800b6ec:	025b      	lsls	r3, r3, #9
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d109      	bne.n	800b706 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800b6f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6f4:	4811      	ldr	r0, [pc, #68]	; (800b73c <HAL_RCC_GetSysClockFreq+0xc8>)
 800b6f6:	f7fe fd11 	bl	800a11c <__udivsi3>
 800b6fa:	0003      	movs	r3, r0
 800b6fc:	001a      	movs	r2, r3
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	4353      	muls	r3, r2
 800b702:	637b      	str	r3, [r7, #52]	; 0x34
 800b704:	e008      	b.n	800b718 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800b706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b708:	480c      	ldr	r0, [pc, #48]	; (800b73c <HAL_RCC_GetSysClockFreq+0xc8>)
 800b70a:	f7fe fd07 	bl	800a11c <__udivsi3>
 800b70e:	0003      	movs	r3, r0
 800b710:	001a      	movs	r2, r3
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	4353      	muls	r3, r2
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800b718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b71c:	e002      	b.n	800b724 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b71e:	4b07      	ldr	r3, [pc, #28]	; (800b73c <HAL_RCC_GetSysClockFreq+0xc8>)
 800b720:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b722:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800b726:	0018      	movs	r0, r3
 800b728:	46bd      	mov	sp, r7
 800b72a:	b00f      	add	sp, #60	; 0x3c
 800b72c:	bd90      	pop	{r4, r7, pc}
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	0800d1a4 	.word	0x0800d1a4
 800b734:	0800d1b4 	.word	0x0800d1b4
 800b738:	40021000 	.word	0x40021000
 800b73c:	007a1200 	.word	0x007a1200

0800b740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <HAL_RCC_GetHCLKFreq+0x10>)
 800b746:	681b      	ldr	r3, [r3, #0]
}
 800b748:	0018      	movs	r0, r3
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	46c0      	nop			; (mov r8, r8)
 800b750:	200000c0 	.word	0x200000c0

0800b754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800b758:	f7ff fff2 	bl	800b740 <HAL_RCC_GetHCLKFreq>
 800b75c:	0001      	movs	r1, r0
 800b75e:	4b06      	ldr	r3, [pc, #24]	; (800b778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	0a1b      	lsrs	r3, r3, #8
 800b764:	2207      	movs	r2, #7
 800b766:	4013      	ands	r3, r2
 800b768:	4a04      	ldr	r2, [pc, #16]	; (800b77c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b76a:	5cd3      	ldrb	r3, [r2, r3]
 800b76c:	40d9      	lsrs	r1, r3
 800b76e:	000b      	movs	r3, r1
}    
 800b770:	0018      	movs	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	46c0      	nop			; (mov r8, r8)
 800b778:	40021000 	.word	0x40021000
 800b77c:	0800d1d4 	.word	0x0800d1d4

0800b780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e044      	b.n	800b81c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b796:	2b00      	cmp	r3, #0
 800b798:	d107      	bne.n	800b7aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2274      	movs	r2, #116	; 0x74
 800b79e:	2100      	movs	r1, #0
 800b7a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	f7fe fee1 	bl	800a56c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2224      	movs	r2, #36	; 0x24
 800b7ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	438a      	bics	r2, r1
 800b7be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	f000 f8da 	bl	800b97c <UART_SetConfig>
 800b7c8:	0003      	movs	r3, r0
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e024      	b.n	800b81c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f000 fa25 	bl	800bc2c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	685a      	ldr	r2, [r3, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	490d      	ldr	r1, [pc, #52]	; (800b824 <HAL_UART_Init+0xa4>)
 800b7ee:	400a      	ands	r2, r1
 800b7f0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2108      	movs	r1, #8
 800b7fe:	438a      	bics	r2, r1
 800b800:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2101      	movs	r1, #1
 800b80e:	430a      	orrs	r2, r1
 800b810:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	0018      	movs	r0, r3
 800b816:	f000 fabd 	bl	800bd94 <UART_CheckIdleState>
 800b81a:	0003      	movs	r3, r0
}
 800b81c:	0018      	movs	r0, r3
 800b81e:	46bd      	mov	sp, r7
 800b820:	b002      	add	sp, #8
 800b822:	bd80      	pop	{r7, pc}
 800b824:	fffff7ff 	.word	0xfffff7ff

0800b828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	; 0x28
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	1dbb      	adds	r3, r7, #6
 800b836:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b83c:	2b20      	cmp	r3, #32
 800b83e:	d000      	beq.n	800b842 <HAL_UART_Transmit+0x1a>
 800b840:	e096      	b.n	800b970 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d003      	beq.n	800b850 <HAL_UART_Transmit+0x28>
 800b848:	1dbb      	adds	r3, r7, #6
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e08e      	b.n	800b972 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	2380      	movs	r3, #128	; 0x80
 800b85a:	015b      	lsls	r3, r3, #5
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d109      	bne.n	800b874 <HAL_UART_Transmit+0x4c>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d105      	bne.n	800b874 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2201      	movs	r2, #1
 800b86c:	4013      	ands	r3, r2
 800b86e:	d001      	beq.n	800b874 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e07e      	b.n	800b972 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2274      	movs	r2, #116	; 0x74
 800b878:	5c9b      	ldrb	r3, [r3, r2]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d101      	bne.n	800b882 <HAL_UART_Transmit+0x5a>
 800b87e:	2302      	movs	r3, #2
 800b880:	e077      	b.n	800b972 <HAL_UART_Transmit+0x14a>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2274      	movs	r2, #116	; 0x74
 800b886:	2101      	movs	r1, #1
 800b888:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2280      	movs	r2, #128	; 0x80
 800b88e:	2100      	movs	r1, #0
 800b890:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2221      	movs	r2, #33	; 0x21
 800b896:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b898:	f7ff f890 	bl	800a9bc <HAL_GetTick>
 800b89c:	0003      	movs	r3, r0
 800b89e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	1dba      	adds	r2, r7, #6
 800b8a4:	2150      	movs	r1, #80	; 0x50
 800b8a6:	8812      	ldrh	r2, [r2, #0]
 800b8a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	1dba      	adds	r2, r7, #6
 800b8ae:	2152      	movs	r1, #82	; 0x52
 800b8b0:	8812      	ldrh	r2, [r2, #0]
 800b8b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	2380      	movs	r3, #128	; 0x80
 800b8ba:	015b      	lsls	r3, r3, #5
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d108      	bne.n	800b8d2 <HAL_UART_Transmit+0xaa>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d104      	bne.n	800b8d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	61bb      	str	r3, [r7, #24]
 800b8d0:	e003      	b.n	800b8da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2274      	movs	r2, #116	; 0x74
 800b8de:	2100      	movs	r1, #0
 800b8e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800b8e2:	e02d      	b.n	800b940 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	0013      	movs	r3, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2180      	movs	r1, #128	; 0x80
 800b8f2:	f000 fa97 	bl	800be24 <UART_WaitOnFlagUntilTimeout>
 800b8f6:	1e03      	subs	r3, r0, #0
 800b8f8:	d001      	beq.n	800b8fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e039      	b.n	800b972 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10b      	bne.n	800b91c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	881a      	ldrh	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	05d2      	lsls	r2, r2, #23
 800b90e:	0dd2      	lsrs	r2, r2, #23
 800b910:	b292      	uxth	r2, r2
 800b912:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	3302      	adds	r3, #2
 800b918:	61bb      	str	r3, [r7, #24]
 800b91a:	e008      	b.n	800b92e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	781a      	ldrb	r2, [r3, #0]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	b292      	uxth	r2, r2
 800b926:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	3301      	adds	r3, #1
 800b92c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2252      	movs	r2, #82	; 0x52
 800b932:	5a9b      	ldrh	r3, [r3, r2]
 800b934:	b29b      	uxth	r3, r3
 800b936:	3b01      	subs	r3, #1
 800b938:	b299      	uxth	r1, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2252      	movs	r2, #82	; 0x52
 800b93e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2252      	movs	r2, #82	; 0x52
 800b944:	5a9b      	ldrh	r3, [r3, r2]
 800b946:	b29b      	uxth	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1cb      	bne.n	800b8e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	0013      	movs	r3, r2
 800b956:	2200      	movs	r2, #0
 800b958:	2140      	movs	r1, #64	; 0x40
 800b95a:	f000 fa63 	bl	800be24 <UART_WaitOnFlagUntilTimeout>
 800b95e:	1e03      	subs	r3, r0, #0
 800b960:	d001      	beq.n	800b966 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e005      	b.n	800b972 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2220      	movs	r2, #32
 800b96a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	e000      	b.n	800b972 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800b970:	2302      	movs	r3, #2
  }
}
 800b972:	0018      	movs	r0, r3
 800b974:	46bd      	mov	sp, r7
 800b976:	b008      	add	sp, #32
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b984:	231e      	movs	r3, #30
 800b986:	18fb      	adds	r3, r7, r3
 800b988:	2200      	movs	r2, #0
 800b98a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689a      	ldr	r2, [r3, #8]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	431a      	orrs	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a97      	ldr	r2, [pc, #604]	; (800bc08 <UART_SetConfig+0x28c>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	0019      	movs	r1, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	4a92      	ldr	r2, [pc, #584]	; (800bc0c <UART_SetConfig+0x290>)
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	0019      	movs	r1, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68da      	ldr	r2, [r3, #12]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	4a89      	ldr	r2, [pc, #548]	; (800bc10 <UART_SetConfig+0x294>)
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	0019      	movs	r1, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a85      	ldr	r2, [pc, #532]	; (800bc14 <UART_SetConfig+0x298>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d127      	bne.n	800ba52 <UART_SetConfig+0xd6>
 800ba02:	4b85      	ldr	r3, [pc, #532]	; (800bc18 <UART_SetConfig+0x29c>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba06:	2203      	movs	r2, #3
 800ba08:	4013      	ands	r3, r2
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d00d      	beq.n	800ba2a <UART_SetConfig+0xae>
 800ba0e:	d81b      	bhi.n	800ba48 <UART_SetConfig+0xcc>
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d014      	beq.n	800ba3e <UART_SetConfig+0xc2>
 800ba14:	d818      	bhi.n	800ba48 <UART_SetConfig+0xcc>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <UART_SetConfig+0xa4>
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d00a      	beq.n	800ba34 <UART_SetConfig+0xb8>
 800ba1e:	e013      	b.n	800ba48 <UART_SetConfig+0xcc>
 800ba20:	231f      	movs	r3, #31
 800ba22:	18fb      	adds	r3, r7, r3
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e035      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba2a:	231f      	movs	r3, #31
 800ba2c:	18fb      	adds	r3, r7, r3
 800ba2e:	2202      	movs	r2, #2
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	e030      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba34:	231f      	movs	r3, #31
 800ba36:	18fb      	adds	r3, r7, r3
 800ba38:	2204      	movs	r2, #4
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	e02b      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba3e:	231f      	movs	r3, #31
 800ba40:	18fb      	adds	r3, r7, r3
 800ba42:	2208      	movs	r2, #8
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	e026      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba48:	231f      	movs	r3, #31
 800ba4a:	18fb      	adds	r3, r7, r3
 800ba4c:	2210      	movs	r2, #16
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e021      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a71      	ldr	r2, [pc, #452]	; (800bc1c <UART_SetConfig+0x2a0>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d104      	bne.n	800ba66 <UART_SetConfig+0xea>
 800ba5c:	231f      	movs	r3, #31
 800ba5e:	18fb      	adds	r3, r7, r3
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
 800ba64:	e017      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a6d      	ldr	r2, [pc, #436]	; (800bc20 <UART_SetConfig+0x2a4>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d104      	bne.n	800ba7a <UART_SetConfig+0xfe>
 800ba70:	231f      	movs	r3, #31
 800ba72:	18fb      	adds	r3, r7, r3
 800ba74:	2200      	movs	r2, #0
 800ba76:	701a      	strb	r2, [r3, #0]
 800ba78:	e00d      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a69      	ldr	r2, [pc, #420]	; (800bc24 <UART_SetConfig+0x2a8>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d104      	bne.n	800ba8e <UART_SetConfig+0x112>
 800ba84:	231f      	movs	r3, #31
 800ba86:	18fb      	adds	r3, r7, r3
 800ba88:	2200      	movs	r2, #0
 800ba8a:	701a      	strb	r2, [r3, #0]
 800ba8c:	e003      	b.n	800ba96 <UART_SetConfig+0x11a>
 800ba8e:	231f      	movs	r3, #31
 800ba90:	18fb      	adds	r3, r7, r3
 800ba92:	2210      	movs	r2, #16
 800ba94:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	69da      	ldr	r2, [r3, #28]
 800ba9a:	2380      	movs	r3, #128	; 0x80
 800ba9c:	021b      	lsls	r3, r3, #8
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d15d      	bne.n	800bb5e <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800baa2:	231f      	movs	r3, #31
 800baa4:	18fb      	adds	r3, r7, r3
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d015      	beq.n	800bad8 <UART_SetConfig+0x15c>
 800baac:	dc18      	bgt.n	800bae0 <UART_SetConfig+0x164>
 800baae:	2b04      	cmp	r3, #4
 800bab0:	d00d      	beq.n	800bace <UART_SetConfig+0x152>
 800bab2:	dc15      	bgt.n	800bae0 <UART_SetConfig+0x164>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <UART_SetConfig+0x142>
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d005      	beq.n	800bac8 <UART_SetConfig+0x14c>
 800babc:	e010      	b.n	800bae0 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800babe:	f7ff fe49 	bl	800b754 <HAL_RCC_GetPCLK1Freq>
 800bac2:	0003      	movs	r3, r0
 800bac4:	61bb      	str	r3, [r7, #24]
        break;
 800bac6:	e012      	b.n	800baee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bac8:	4b57      	ldr	r3, [pc, #348]	; (800bc28 <UART_SetConfig+0x2ac>)
 800baca:	61bb      	str	r3, [r7, #24]
        break;
 800bacc:	e00f      	b.n	800baee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bace:	f7ff fdd1 	bl	800b674 <HAL_RCC_GetSysClockFreq>
 800bad2:	0003      	movs	r3, r0
 800bad4:	61bb      	str	r3, [r7, #24]
        break;
 800bad6:	e00a      	b.n	800baee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bad8:	2380      	movs	r3, #128	; 0x80
 800bada:	021b      	lsls	r3, r3, #8
 800badc:	61bb      	str	r3, [r7, #24]
        break;
 800bade:	e006      	b.n	800baee <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bae4:	231e      	movs	r3, #30
 800bae6:	18fb      	adds	r3, r7, r3
 800bae8:	2201      	movs	r2, #1
 800baea:	701a      	strb	r2, [r3, #0]
        break;
 800baec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d100      	bne.n	800baf6 <UART_SetConfig+0x17a>
 800baf4:	e07b      	b.n	800bbee <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	005a      	lsls	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	085b      	lsrs	r3, r3, #1
 800bb00:	18d2      	adds	r2, r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	0019      	movs	r1, r3
 800bb08:	0010      	movs	r0, r2
 800bb0a:	f7fe fb07 	bl	800a11c <__udivsi3>
 800bb0e:	0003      	movs	r3, r0
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	2b0f      	cmp	r3, #15
 800bb18:	d91c      	bls.n	800bb54 <UART_SetConfig+0x1d8>
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	2380      	movs	r3, #128	; 0x80
 800bb1e:	025b      	lsls	r3, r3, #9
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d217      	bcs.n	800bb54 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	200e      	movs	r0, #14
 800bb2a:	183b      	adds	r3, r7, r0
 800bb2c:	210f      	movs	r1, #15
 800bb2e:	438a      	bics	r2, r1
 800bb30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	085b      	lsrs	r3, r3, #1
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	2207      	movs	r2, #7
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	b299      	uxth	r1, r3
 800bb3e:	183b      	adds	r3, r7, r0
 800bb40:	183a      	adds	r2, r7, r0
 800bb42:	8812      	ldrh	r2, [r2, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	183a      	adds	r2, r7, r0
 800bb4e:	8812      	ldrh	r2, [r2, #0]
 800bb50:	60da      	str	r2, [r3, #12]
 800bb52:	e04c      	b.n	800bbee <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800bb54:	231e      	movs	r3, #30
 800bb56:	18fb      	adds	r3, r7, r3
 800bb58:	2201      	movs	r2, #1
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	e047      	b.n	800bbee <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb5e:	231f      	movs	r3, #31
 800bb60:	18fb      	adds	r3, r7, r3
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d015      	beq.n	800bb94 <UART_SetConfig+0x218>
 800bb68:	dc18      	bgt.n	800bb9c <UART_SetConfig+0x220>
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d00d      	beq.n	800bb8a <UART_SetConfig+0x20e>
 800bb6e:	dc15      	bgt.n	800bb9c <UART_SetConfig+0x220>
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <UART_SetConfig+0x1fe>
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d005      	beq.n	800bb84 <UART_SetConfig+0x208>
 800bb78:	e010      	b.n	800bb9c <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb7a:	f7ff fdeb 	bl	800b754 <HAL_RCC_GetPCLK1Freq>
 800bb7e:	0003      	movs	r3, r0
 800bb80:	61bb      	str	r3, [r7, #24]
        break;
 800bb82:	e012      	b.n	800bbaa <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb84:	4b28      	ldr	r3, [pc, #160]	; (800bc28 <UART_SetConfig+0x2ac>)
 800bb86:	61bb      	str	r3, [r7, #24]
        break;
 800bb88:	e00f      	b.n	800bbaa <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb8a:	f7ff fd73 	bl	800b674 <HAL_RCC_GetSysClockFreq>
 800bb8e:	0003      	movs	r3, r0
 800bb90:	61bb      	str	r3, [r7, #24]
        break;
 800bb92:	e00a      	b.n	800bbaa <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb94:	2380      	movs	r3, #128	; 0x80
 800bb96:	021b      	lsls	r3, r3, #8
 800bb98:	61bb      	str	r3, [r7, #24]
        break;
 800bb9a:	e006      	b.n	800bbaa <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bba0:	231e      	movs	r3, #30
 800bba2:	18fb      	adds	r3, r7, r3
 800bba4:	2201      	movs	r2, #1
 800bba6:	701a      	strb	r2, [r3, #0]
        break;
 800bba8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01e      	beq.n	800bbee <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	085a      	lsrs	r2, r3, #1
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	18d2      	adds	r2, r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	0019      	movs	r1, r3
 800bbc0:	0010      	movs	r0, r2
 800bbc2:	f7fe faab 	bl	800a11c <__udivsi3>
 800bbc6:	0003      	movs	r3, r0
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2b0f      	cmp	r3, #15
 800bbd0:	d909      	bls.n	800bbe6 <UART_SetConfig+0x26a>
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	2380      	movs	r3, #128	; 0x80
 800bbd6:	025b      	lsls	r3, r3, #9
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d204      	bcs.n	800bbe6 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	60da      	str	r2, [r3, #12]
 800bbe4:	e003      	b.n	800bbee <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800bbe6:	231e      	movs	r3, #30
 800bbe8:	18fb      	adds	r3, r7, r3
 800bbea:	2201      	movs	r2, #1
 800bbec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bbfa:	231e      	movs	r3, #30
 800bbfc:	18fb      	adds	r3, r7, r3
 800bbfe:	781b      	ldrb	r3, [r3, #0]
}
 800bc00:	0018      	movs	r0, r3
 800bc02:	46bd      	mov	sp, r7
 800bc04:	b008      	add	sp, #32
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	efff69f3 	.word	0xefff69f3
 800bc0c:	ffffcfff 	.word	0xffffcfff
 800bc10:	fffff4ff 	.word	0xfffff4ff
 800bc14:	40013800 	.word	0x40013800
 800bc18:	40021000 	.word	0x40021000
 800bc1c:	40004400 	.word	0x40004400
 800bc20:	40004800 	.word	0x40004800
 800bc24:	40004c00 	.word	0x40004c00
 800bc28:	007a1200 	.word	0x007a1200

0800bc2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	2201      	movs	r2, #1
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	d00b      	beq.n	800bc56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4a4a      	ldr	r2, [pc, #296]	; (800bd70 <UART_AdvFeatureConfig+0x144>)
 800bc46:	4013      	ands	r3, r2
 800bc48:	0019      	movs	r1, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	430a      	orrs	r2, r1
 800bc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	d00b      	beq.n	800bc78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	4a43      	ldr	r2, [pc, #268]	; (800bd74 <UART_AdvFeatureConfig+0x148>)
 800bc68:	4013      	ands	r3, r2
 800bc6a:	0019      	movs	r1, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2204      	movs	r2, #4
 800bc7e:	4013      	ands	r3, r2
 800bc80:	d00b      	beq.n	800bc9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	4a3b      	ldr	r2, [pc, #236]	; (800bd78 <UART_AdvFeatureConfig+0x14c>)
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	0019      	movs	r1, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	2208      	movs	r2, #8
 800bca0:	4013      	ands	r3, r2
 800bca2:	d00b      	beq.n	800bcbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	4a34      	ldr	r2, [pc, #208]	; (800bd7c <UART_AdvFeatureConfig+0x150>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	0019      	movs	r1, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2210      	movs	r2, #16
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	d00b      	beq.n	800bcde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	4a2c      	ldr	r2, [pc, #176]	; (800bd80 <UART_AdvFeatureConfig+0x154>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	0019      	movs	r1, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	2220      	movs	r2, #32
 800bce4:	4013      	ands	r3, r2
 800bce6:	d00b      	beq.n	800bd00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	4a25      	ldr	r2, [pc, #148]	; (800bd84 <UART_AdvFeatureConfig+0x158>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	0019      	movs	r1, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	430a      	orrs	r2, r1
 800bcfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2240      	movs	r2, #64	; 0x40
 800bd06:	4013      	ands	r3, r2
 800bd08:	d01d      	beq.n	800bd46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	4a1d      	ldr	r2, [pc, #116]	; (800bd88 <UART_AdvFeatureConfig+0x15c>)
 800bd12:	4013      	ands	r3, r2
 800bd14:	0019      	movs	r1, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd26:	2380      	movs	r3, #128	; 0x80
 800bd28:	035b      	lsls	r3, r3, #13
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d10b      	bne.n	800bd46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	4a15      	ldr	r2, [pc, #84]	; (800bd8c <UART_AdvFeatureConfig+0x160>)
 800bd36:	4013      	ands	r3, r2
 800bd38:	0019      	movs	r1, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	2280      	movs	r2, #128	; 0x80
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	d00b      	beq.n	800bd68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	4a0e      	ldr	r2, [pc, #56]	; (800bd90 <UART_AdvFeatureConfig+0x164>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	0019      	movs	r1, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	605a      	str	r2, [r3, #4]
  }
}
 800bd68:	46c0      	nop			; (mov r8, r8)
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	b002      	add	sp, #8
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	fffdffff 	.word	0xfffdffff
 800bd74:	fffeffff 	.word	0xfffeffff
 800bd78:	fffbffff 	.word	0xfffbffff
 800bd7c:	ffff7fff 	.word	0xffff7fff
 800bd80:	ffffefff 	.word	0xffffefff
 800bd84:	ffffdfff 	.word	0xffffdfff
 800bd88:	ffefffff 	.word	0xffefffff
 800bd8c:	ff9fffff 	.word	0xff9fffff
 800bd90:	fff7ffff 	.word	0xfff7ffff

0800bd94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2280      	movs	r2, #128	; 0x80
 800bda0:	2100      	movs	r1, #0
 800bda2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bda4:	f7fe fe0a 	bl	800a9bc <HAL_GetTick>
 800bda8:	0003      	movs	r3, r0
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2208      	movs	r2, #8
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	2b08      	cmp	r3, #8
 800bdb8:	d10c      	bne.n	800bdd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2280      	movs	r2, #128	; 0x80
 800bdbe:	0391      	lsls	r1, r2, #14
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	4a17      	ldr	r2, [pc, #92]	; (800be20 <UART_CheckIdleState+0x8c>)
 800bdc4:	9200      	str	r2, [sp, #0]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f000 f82c 	bl	800be24 <UART_WaitOnFlagUntilTimeout>
 800bdcc:	1e03      	subs	r3, r0, #0
 800bdce:	d001      	beq.n	800bdd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e021      	b.n	800be18 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2204      	movs	r2, #4
 800bddc:	4013      	ands	r3, r2
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d10c      	bne.n	800bdfc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2280      	movs	r2, #128	; 0x80
 800bde6:	03d1      	lsls	r1, r2, #15
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	4a0d      	ldr	r2, [pc, #52]	; (800be20 <UART_CheckIdleState+0x8c>)
 800bdec:	9200      	str	r2, [sp, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f000 f818 	bl	800be24 <UART_WaitOnFlagUntilTimeout>
 800bdf4:	1e03      	subs	r3, r0, #0
 800bdf6:	d001      	beq.n	800bdfc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	e00d      	b.n	800be18 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2220      	movs	r2, #32
 800be06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2274      	movs	r2, #116	; 0x74
 800be12:	2100      	movs	r1, #0
 800be14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	0018      	movs	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	b004      	add	sp, #16
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	01ffffff 	.word	0x01ffffff

0800be24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b094      	sub	sp, #80	; 0x50
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	1dfb      	adds	r3, r7, #7
 800be32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be34:	e0a3      	b.n	800bf7e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be38:	3301      	adds	r3, #1
 800be3a:	d100      	bne.n	800be3e <UART_WaitOnFlagUntilTimeout+0x1a>
 800be3c:	e09f      	b.n	800bf7e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be3e:	f7fe fdbd 	bl	800a9bc <HAL_GetTick>
 800be42:	0002      	movs	r2, r0
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d302      	bcc.n	800be54 <UART_WaitOnFlagUntilTimeout+0x30>
 800be4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be50:	2b00      	cmp	r3, #0
 800be52:	d13d      	bne.n	800bed0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be54:	f3ef 8310 	mrs	r3, PRIMASK
 800be58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be5c:	647b      	str	r3, [r7, #68]	; 0x44
 800be5e:	2301      	movs	r3, #1
 800be60:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	f383 8810 	msr	PRIMASK, r3
}
 800be68:	46c0      	nop			; (mov r8, r8)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	494c      	ldr	r1, [pc, #304]	; (800bfa8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800be76:	400a      	ands	r2, r1
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f383 8810 	msr	PRIMASK, r3
}
 800be84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be86:	f3ef 8310 	mrs	r3, PRIMASK
 800be8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800be8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be8e:	643b      	str	r3, [r7, #64]	; 0x40
 800be90:	2301      	movs	r3, #1
 800be92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	f383 8810 	msr	PRIMASK, r3
}
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2101      	movs	r1, #1
 800bea8:	438a      	bics	r2, r1
 800beaa:	609a      	str	r2, [r3, #8]
 800beac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb2:	f383 8810 	msr	PRIMASK, r3
}
 800beb6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2220      	movs	r2, #32
 800bebc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2220      	movs	r2, #32
 800bec2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2274      	movs	r2, #116	; 0x74
 800bec8:	2100      	movs	r1, #0
 800beca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800becc:	2303      	movs	r3, #3
 800bece:	e067      	b.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2204      	movs	r2, #4
 800bed8:	4013      	ands	r3, r2
 800beda:	d050      	beq.n	800bf7e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69da      	ldr	r2, [r3, #28]
 800bee2:	2380      	movs	r3, #128	; 0x80
 800bee4:	011b      	lsls	r3, r3, #4
 800bee6:	401a      	ands	r2, r3
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	429a      	cmp	r2, r3
 800beee:	d146      	bne.n	800bf7e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2280      	movs	r2, #128	; 0x80
 800bef6:	0112      	lsls	r2, r2, #4
 800bef8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800befa:	f3ef 8310 	mrs	r3, PRIMASK
 800befe:	613b      	str	r3, [r7, #16]
  return(result);
 800bf00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf04:	2301      	movs	r3, #1
 800bf06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f383 8810 	msr	PRIMASK, r3
}
 800bf0e:	46c0      	nop			; (mov r8, r8)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4923      	ldr	r1, [pc, #140]	; (800bfa8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800bf1c:	400a      	ands	r2, r1
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	f383 8810 	msr	PRIMASK, r3
}
 800bf2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf30:	61fb      	str	r3, [r7, #28]
  return(result);
 800bf32:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf34:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf36:	2301      	movs	r3, #1
 800bf38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	f383 8810 	msr	PRIMASK, r3
}
 800bf40:	46c0      	nop			; (mov r8, r8)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	438a      	bics	r2, r1
 800bf50:	609a      	str	r2, [r3, #8]
 800bf52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	f383 8810 	msr	PRIMASK, r3
}
 800bf5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2220      	movs	r2, #32
 800bf62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2220      	movs	r2, #32
 800bf68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2280      	movs	r2, #128	; 0x80
 800bf6e:	2120      	movs	r1, #32
 800bf70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2274      	movs	r2, #116	; 0x74
 800bf76:	2100      	movs	r1, #0
 800bf78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e010      	b.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	4013      	ands	r3, r2
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	425a      	negs	r2, r3
 800bf8e:	4153      	adcs	r3, r2
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	001a      	movs	r2, r3
 800bf94:	1dfb      	adds	r3, r7, #7
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d100      	bne.n	800bf9e <UART_WaitOnFlagUntilTimeout+0x17a>
 800bf9c:	e74b      	b.n	800be36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	0018      	movs	r0, r3
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	b014      	add	sp, #80	; 0x50
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	fffffe5f 	.word	0xfffffe5f

0800bfac <__errno>:
 800bfac:	4b01      	ldr	r3, [pc, #4]	; (800bfb4 <__errno+0x8>)
 800bfae:	6818      	ldr	r0, [r3, #0]
 800bfb0:	4770      	bx	lr
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	200000cc 	.word	0x200000cc

0800bfb8 <__libc_init_array>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	2600      	movs	r6, #0
 800bfbc:	4d0c      	ldr	r5, [pc, #48]	; (800bff0 <__libc_init_array+0x38>)
 800bfbe:	4c0d      	ldr	r4, [pc, #52]	; (800bff4 <__libc_init_array+0x3c>)
 800bfc0:	1b64      	subs	r4, r4, r5
 800bfc2:	10a4      	asrs	r4, r4, #2
 800bfc4:	42a6      	cmp	r6, r4
 800bfc6:	d109      	bne.n	800bfdc <__libc_init_array+0x24>
 800bfc8:	2600      	movs	r6, #0
 800bfca:	f001 f875 	bl	800d0b8 <_init>
 800bfce:	4d0a      	ldr	r5, [pc, #40]	; (800bff8 <__libc_init_array+0x40>)
 800bfd0:	4c0a      	ldr	r4, [pc, #40]	; (800bffc <__libc_init_array+0x44>)
 800bfd2:	1b64      	subs	r4, r4, r5
 800bfd4:	10a4      	asrs	r4, r4, #2
 800bfd6:	42a6      	cmp	r6, r4
 800bfd8:	d105      	bne.n	800bfe6 <__libc_init_array+0x2e>
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	00b3      	lsls	r3, r6, #2
 800bfde:	58eb      	ldr	r3, [r5, r3]
 800bfe0:	4798      	blx	r3
 800bfe2:	3601      	adds	r6, #1
 800bfe4:	e7ee      	b.n	800bfc4 <__libc_init_array+0xc>
 800bfe6:	00b3      	lsls	r3, r6, #2
 800bfe8:	58eb      	ldr	r3, [r5, r3]
 800bfea:	4798      	blx	r3
 800bfec:	3601      	adds	r6, #1
 800bfee:	e7f2      	b.n	800bfd6 <__libc_init_array+0x1e>
 800bff0:	0800d274 	.word	0x0800d274
 800bff4:	0800d274 	.word	0x0800d274
 800bff8:	0800d274 	.word	0x0800d274
 800bffc:	0800d278 	.word	0x0800d278

0800c000 <memset>:
 800c000:	0003      	movs	r3, r0
 800c002:	1882      	adds	r2, r0, r2
 800c004:	4293      	cmp	r3, r2
 800c006:	d100      	bne.n	800c00a <memset+0xa>
 800c008:	4770      	bx	lr
 800c00a:	7019      	strb	r1, [r3, #0]
 800c00c:	3301      	adds	r3, #1
 800c00e:	e7f9      	b.n	800c004 <memset+0x4>

0800c010 <iprintf>:
 800c010:	b40f      	push	{r0, r1, r2, r3}
 800c012:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <iprintf+0x30>)
 800c014:	b513      	push	{r0, r1, r4, lr}
 800c016:	681c      	ldr	r4, [r3, #0]
 800c018:	2c00      	cmp	r4, #0
 800c01a:	d005      	beq.n	800c028 <iprintf+0x18>
 800c01c:	69a3      	ldr	r3, [r4, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <iprintf+0x18>
 800c022:	0020      	movs	r0, r4
 800c024:	f000 fa86 	bl	800c534 <__sinit>
 800c028:	ab05      	add	r3, sp, #20
 800c02a:	0020      	movs	r0, r4
 800c02c:	9a04      	ldr	r2, [sp, #16]
 800c02e:	68a1      	ldr	r1, [r4, #8]
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	f000 fc99 	bl	800c968 <_vfiprintf_r>
 800c036:	bc16      	pop	{r1, r2, r4}
 800c038:	bc08      	pop	{r3}
 800c03a:	b004      	add	sp, #16
 800c03c:	4718      	bx	r3
 800c03e:	46c0      	nop			; (mov r8, r8)
 800c040:	200000cc 	.word	0x200000cc

0800c044 <_puts_r>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	0005      	movs	r5, r0
 800c048:	000e      	movs	r6, r1
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d004      	beq.n	800c058 <_puts_r+0x14>
 800c04e:	6983      	ldr	r3, [r0, #24]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <_puts_r+0x14>
 800c054:	f000 fa6e 	bl	800c534 <__sinit>
 800c058:	69ab      	ldr	r3, [r5, #24]
 800c05a:	68ac      	ldr	r4, [r5, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d102      	bne.n	800c066 <_puts_r+0x22>
 800c060:	0028      	movs	r0, r5
 800c062:	f000 fa67 	bl	800c534 <__sinit>
 800c066:	4b2d      	ldr	r3, [pc, #180]	; (800c11c <_puts_r+0xd8>)
 800c068:	429c      	cmp	r4, r3
 800c06a:	d122      	bne.n	800c0b2 <_puts_r+0x6e>
 800c06c:	686c      	ldr	r4, [r5, #4]
 800c06e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c070:	07db      	lsls	r3, r3, #31
 800c072:	d405      	bmi.n	800c080 <_puts_r+0x3c>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	059b      	lsls	r3, r3, #22
 800c078:	d402      	bmi.n	800c080 <_puts_r+0x3c>
 800c07a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c07c:	f000 fafb 	bl	800c676 <__retarget_lock_acquire_recursive>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	071b      	lsls	r3, r3, #28
 800c084:	d502      	bpl.n	800c08c <_puts_r+0x48>
 800c086:	6923      	ldr	r3, [r4, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d129      	bne.n	800c0e0 <_puts_r+0x9c>
 800c08c:	0021      	movs	r1, r4
 800c08e:	0028      	movs	r0, r5
 800c090:	f000 f8aa 	bl	800c1e8 <__swsetup_r>
 800c094:	2800      	cmp	r0, #0
 800c096:	d023      	beq.n	800c0e0 <_puts_r+0x9c>
 800c098:	2501      	movs	r5, #1
 800c09a:	426d      	negs	r5, r5
 800c09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c09e:	07db      	lsls	r3, r3, #31
 800c0a0:	d405      	bmi.n	800c0ae <_puts_r+0x6a>
 800c0a2:	89a3      	ldrh	r3, [r4, #12]
 800c0a4:	059b      	lsls	r3, r3, #22
 800c0a6:	d402      	bmi.n	800c0ae <_puts_r+0x6a>
 800c0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0aa:	f000 fae5 	bl	800c678 <__retarget_lock_release_recursive>
 800c0ae:	0028      	movs	r0, r5
 800c0b0:	bd70      	pop	{r4, r5, r6, pc}
 800c0b2:	4b1b      	ldr	r3, [pc, #108]	; (800c120 <_puts_r+0xdc>)
 800c0b4:	429c      	cmp	r4, r3
 800c0b6:	d101      	bne.n	800c0bc <_puts_r+0x78>
 800c0b8:	68ac      	ldr	r4, [r5, #8]
 800c0ba:	e7d8      	b.n	800c06e <_puts_r+0x2a>
 800c0bc:	4b19      	ldr	r3, [pc, #100]	; (800c124 <_puts_r+0xe0>)
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	d1d5      	bne.n	800c06e <_puts_r+0x2a>
 800c0c2:	68ec      	ldr	r4, [r5, #12]
 800c0c4:	e7d3      	b.n	800c06e <_puts_r+0x2a>
 800c0c6:	3601      	adds	r6, #1
 800c0c8:	60a3      	str	r3, [r4, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	da04      	bge.n	800c0d8 <_puts_r+0x94>
 800c0ce:	69a2      	ldr	r2, [r4, #24]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	dc16      	bgt.n	800c102 <_puts_r+0xbe>
 800c0d4:	290a      	cmp	r1, #10
 800c0d6:	d014      	beq.n	800c102 <_puts_r+0xbe>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	6022      	str	r2, [r4, #0]
 800c0de:	7019      	strb	r1, [r3, #0]
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	7831      	ldrb	r1, [r6, #0]
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	2900      	cmp	r1, #0
 800c0e8:	d1ed      	bne.n	800c0c6 <_puts_r+0x82>
 800c0ea:	60a3      	str	r3, [r4, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da0f      	bge.n	800c110 <_puts_r+0xcc>
 800c0f0:	0028      	movs	r0, r5
 800c0f2:	0022      	movs	r2, r4
 800c0f4:	310a      	adds	r1, #10
 800c0f6:	f000 f821 	bl	800c13c <__swbuf_r>
 800c0fa:	250a      	movs	r5, #10
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d1cd      	bne.n	800c09c <_puts_r+0x58>
 800c100:	e7ca      	b.n	800c098 <_puts_r+0x54>
 800c102:	0022      	movs	r2, r4
 800c104:	0028      	movs	r0, r5
 800c106:	f000 f819 	bl	800c13c <__swbuf_r>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d1e8      	bne.n	800c0e0 <_puts_r+0x9c>
 800c10e:	e7c3      	b.n	800c098 <_puts_r+0x54>
 800c110:	250a      	movs	r5, #10
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	6022      	str	r2, [r4, #0]
 800c118:	701d      	strb	r5, [r3, #0]
 800c11a:	e7bf      	b.n	800c09c <_puts_r+0x58>
 800c11c:	0800d200 	.word	0x0800d200
 800c120:	0800d220 	.word	0x0800d220
 800c124:	0800d1e0 	.word	0x0800d1e0

0800c128 <puts>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	4b03      	ldr	r3, [pc, #12]	; (800c138 <puts+0x10>)
 800c12c:	0001      	movs	r1, r0
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	f7ff ff88 	bl	800c044 <_puts_r>
 800c134:	bd10      	pop	{r4, pc}
 800c136:	46c0      	nop			; (mov r8, r8)
 800c138:	200000cc 	.word	0x200000cc

0800c13c <__swbuf_r>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	0005      	movs	r5, r0
 800c140:	000e      	movs	r6, r1
 800c142:	0014      	movs	r4, r2
 800c144:	2800      	cmp	r0, #0
 800c146:	d004      	beq.n	800c152 <__swbuf_r+0x16>
 800c148:	6983      	ldr	r3, [r0, #24]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <__swbuf_r+0x16>
 800c14e:	f000 f9f1 	bl	800c534 <__sinit>
 800c152:	4b22      	ldr	r3, [pc, #136]	; (800c1dc <__swbuf_r+0xa0>)
 800c154:	429c      	cmp	r4, r3
 800c156:	d12e      	bne.n	800c1b6 <__swbuf_r+0x7a>
 800c158:	686c      	ldr	r4, [r5, #4]
 800c15a:	69a3      	ldr	r3, [r4, #24]
 800c15c:	60a3      	str	r3, [r4, #8]
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	071b      	lsls	r3, r3, #28
 800c162:	d532      	bpl.n	800c1ca <__swbuf_r+0x8e>
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d02f      	beq.n	800c1ca <__swbuf_r+0x8e>
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	b2f7      	uxtb	r7, r6
 800c170:	1a98      	subs	r0, r3, r2
 800c172:	6963      	ldr	r3, [r4, #20]
 800c174:	b2f6      	uxtb	r6, r6
 800c176:	4283      	cmp	r3, r0
 800c178:	dc05      	bgt.n	800c186 <__swbuf_r+0x4a>
 800c17a:	0021      	movs	r1, r4
 800c17c:	0028      	movs	r0, r5
 800c17e:	f000 f937 	bl	800c3f0 <_fflush_r>
 800c182:	2800      	cmp	r0, #0
 800c184:	d127      	bne.n	800c1d6 <__swbuf_r+0x9a>
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	3001      	adds	r0, #1
 800c18a:	3b01      	subs	r3, #1
 800c18c:	60a3      	str	r3, [r4, #8]
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	6022      	str	r2, [r4, #0]
 800c194:	701f      	strb	r7, [r3, #0]
 800c196:	6963      	ldr	r3, [r4, #20]
 800c198:	4283      	cmp	r3, r0
 800c19a:	d004      	beq.n	800c1a6 <__swbuf_r+0x6a>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	07db      	lsls	r3, r3, #31
 800c1a0:	d507      	bpl.n	800c1b2 <__swbuf_r+0x76>
 800c1a2:	2e0a      	cmp	r6, #10
 800c1a4:	d105      	bne.n	800c1b2 <__swbuf_r+0x76>
 800c1a6:	0021      	movs	r1, r4
 800c1a8:	0028      	movs	r0, r5
 800c1aa:	f000 f921 	bl	800c3f0 <_fflush_r>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d111      	bne.n	800c1d6 <__swbuf_r+0x9a>
 800c1b2:	0030      	movs	r0, r6
 800c1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b6:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <__swbuf_r+0xa4>)
 800c1b8:	429c      	cmp	r4, r3
 800c1ba:	d101      	bne.n	800c1c0 <__swbuf_r+0x84>
 800c1bc:	68ac      	ldr	r4, [r5, #8]
 800c1be:	e7cc      	b.n	800c15a <__swbuf_r+0x1e>
 800c1c0:	4b08      	ldr	r3, [pc, #32]	; (800c1e4 <__swbuf_r+0xa8>)
 800c1c2:	429c      	cmp	r4, r3
 800c1c4:	d1c9      	bne.n	800c15a <__swbuf_r+0x1e>
 800c1c6:	68ec      	ldr	r4, [r5, #12]
 800c1c8:	e7c7      	b.n	800c15a <__swbuf_r+0x1e>
 800c1ca:	0021      	movs	r1, r4
 800c1cc:	0028      	movs	r0, r5
 800c1ce:	f000 f80b 	bl	800c1e8 <__swsetup_r>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d0c9      	beq.n	800c16a <__swbuf_r+0x2e>
 800c1d6:	2601      	movs	r6, #1
 800c1d8:	4276      	negs	r6, r6
 800c1da:	e7ea      	b.n	800c1b2 <__swbuf_r+0x76>
 800c1dc:	0800d200 	.word	0x0800d200
 800c1e0:	0800d220 	.word	0x0800d220
 800c1e4:	0800d1e0 	.word	0x0800d1e0

0800c1e8 <__swsetup_r>:
 800c1e8:	4b37      	ldr	r3, [pc, #220]	; (800c2c8 <__swsetup_r+0xe0>)
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	681d      	ldr	r5, [r3, #0]
 800c1ee:	0006      	movs	r6, r0
 800c1f0:	000c      	movs	r4, r1
 800c1f2:	2d00      	cmp	r5, #0
 800c1f4:	d005      	beq.n	800c202 <__swsetup_r+0x1a>
 800c1f6:	69ab      	ldr	r3, [r5, #24]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d102      	bne.n	800c202 <__swsetup_r+0x1a>
 800c1fc:	0028      	movs	r0, r5
 800c1fe:	f000 f999 	bl	800c534 <__sinit>
 800c202:	4b32      	ldr	r3, [pc, #200]	; (800c2cc <__swsetup_r+0xe4>)
 800c204:	429c      	cmp	r4, r3
 800c206:	d10f      	bne.n	800c228 <__swsetup_r+0x40>
 800c208:	686c      	ldr	r4, [r5, #4]
 800c20a:	230c      	movs	r3, #12
 800c20c:	5ee2      	ldrsh	r2, [r4, r3]
 800c20e:	b293      	uxth	r3, r2
 800c210:	0711      	lsls	r1, r2, #28
 800c212:	d42d      	bmi.n	800c270 <__swsetup_r+0x88>
 800c214:	06d9      	lsls	r1, r3, #27
 800c216:	d411      	bmi.n	800c23c <__swsetup_r+0x54>
 800c218:	2309      	movs	r3, #9
 800c21a:	2001      	movs	r0, #1
 800c21c:	6033      	str	r3, [r6, #0]
 800c21e:	3337      	adds	r3, #55	; 0x37
 800c220:	4313      	orrs	r3, r2
 800c222:	81a3      	strh	r3, [r4, #12]
 800c224:	4240      	negs	r0, r0
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	4b29      	ldr	r3, [pc, #164]	; (800c2d0 <__swsetup_r+0xe8>)
 800c22a:	429c      	cmp	r4, r3
 800c22c:	d101      	bne.n	800c232 <__swsetup_r+0x4a>
 800c22e:	68ac      	ldr	r4, [r5, #8]
 800c230:	e7eb      	b.n	800c20a <__swsetup_r+0x22>
 800c232:	4b28      	ldr	r3, [pc, #160]	; (800c2d4 <__swsetup_r+0xec>)
 800c234:	429c      	cmp	r4, r3
 800c236:	d1e8      	bne.n	800c20a <__swsetup_r+0x22>
 800c238:	68ec      	ldr	r4, [r5, #12]
 800c23a:	e7e6      	b.n	800c20a <__swsetup_r+0x22>
 800c23c:	075b      	lsls	r3, r3, #29
 800c23e:	d513      	bpl.n	800c268 <__swsetup_r+0x80>
 800c240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c242:	2900      	cmp	r1, #0
 800c244:	d008      	beq.n	800c258 <__swsetup_r+0x70>
 800c246:	0023      	movs	r3, r4
 800c248:	3344      	adds	r3, #68	; 0x44
 800c24a:	4299      	cmp	r1, r3
 800c24c:	d002      	beq.n	800c254 <__swsetup_r+0x6c>
 800c24e:	0030      	movs	r0, r6
 800c250:	f000 fa80 	bl	800c754 <_free_r>
 800c254:	2300      	movs	r3, #0
 800c256:	6363      	str	r3, [r4, #52]	; 0x34
 800c258:	2224      	movs	r2, #36	; 0x24
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	4393      	bics	r3, r2
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	2300      	movs	r3, #0
 800c262:	6063      	str	r3, [r4, #4]
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	2308      	movs	r3, #8
 800c26a:	89a2      	ldrh	r2, [r4, #12]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	81a3      	strh	r3, [r4, #12]
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <__swsetup_r+0xa6>
 800c276:	21a0      	movs	r1, #160	; 0xa0
 800c278:	2280      	movs	r2, #128	; 0x80
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	0089      	lsls	r1, r1, #2
 800c27e:	0092      	lsls	r2, r2, #2
 800c280:	400b      	ands	r3, r1
 800c282:	4293      	cmp	r3, r2
 800c284:	d003      	beq.n	800c28e <__swsetup_r+0xa6>
 800c286:	0021      	movs	r1, r4
 800c288:	0030      	movs	r0, r6
 800c28a:	f000 fa1f 	bl	800c6cc <__smakebuf_r>
 800c28e:	220c      	movs	r2, #12
 800c290:	5ea3      	ldrsh	r3, [r4, r2]
 800c292:	2001      	movs	r0, #1
 800c294:	001a      	movs	r2, r3
 800c296:	b299      	uxth	r1, r3
 800c298:	4002      	ands	r2, r0
 800c29a:	4203      	tst	r3, r0
 800c29c:	d00f      	beq.n	800c2be <__swsetup_r+0xd6>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	60a2      	str	r2, [r4, #8]
 800c2a2:	6962      	ldr	r2, [r4, #20]
 800c2a4:	4252      	negs	r2, r2
 800c2a6:	61a2      	str	r2, [r4, #24]
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	6922      	ldr	r2, [r4, #16]
 800c2ac:	4282      	cmp	r2, r0
 800c2ae:	d1ba      	bne.n	800c226 <__swsetup_r+0x3e>
 800c2b0:	060a      	lsls	r2, r1, #24
 800c2b2:	d5b8      	bpl.n	800c226 <__swsetup_r+0x3e>
 800c2b4:	2240      	movs	r2, #64	; 0x40
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	3801      	subs	r0, #1
 800c2bc:	e7b3      	b.n	800c226 <__swsetup_r+0x3e>
 800c2be:	0788      	lsls	r0, r1, #30
 800c2c0:	d400      	bmi.n	800c2c4 <__swsetup_r+0xdc>
 800c2c2:	6962      	ldr	r2, [r4, #20]
 800c2c4:	60a2      	str	r2, [r4, #8]
 800c2c6:	e7ef      	b.n	800c2a8 <__swsetup_r+0xc0>
 800c2c8:	200000cc 	.word	0x200000cc
 800c2cc:	0800d200 	.word	0x0800d200
 800c2d0:	0800d220 	.word	0x0800d220
 800c2d4:	0800d1e0 	.word	0x0800d1e0

0800c2d8 <__sflush_r>:
 800c2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2da:	898b      	ldrh	r3, [r1, #12]
 800c2dc:	0005      	movs	r5, r0
 800c2de:	000c      	movs	r4, r1
 800c2e0:	071a      	lsls	r2, r3, #28
 800c2e2:	d45f      	bmi.n	800c3a4 <__sflush_r+0xcc>
 800c2e4:	684a      	ldr	r2, [r1, #4]
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	dc04      	bgt.n	800c2f4 <__sflush_r+0x1c>
 800c2ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	dc01      	bgt.n	800c2f4 <__sflush_r+0x1c>
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c2f6:	2f00      	cmp	r7, #0
 800c2f8:	d0fa      	beq.n	800c2f0 <__sflush_r+0x18>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2180      	movs	r1, #128	; 0x80
 800c2fe:	682e      	ldr	r6, [r5, #0]
 800c300:	602a      	str	r2, [r5, #0]
 800c302:	001a      	movs	r2, r3
 800c304:	0149      	lsls	r1, r1, #5
 800c306:	400a      	ands	r2, r1
 800c308:	420b      	tst	r3, r1
 800c30a:	d034      	beq.n	800c376 <__sflush_r+0x9e>
 800c30c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	075b      	lsls	r3, r3, #29
 800c312:	d506      	bpl.n	800c322 <__sflush_r+0x4a>
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	1ac0      	subs	r0, r0, r3
 800c318:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <__sflush_r+0x4a>
 800c31e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c320:	1ac0      	subs	r0, r0, r3
 800c322:	0002      	movs	r2, r0
 800c324:	6a21      	ldr	r1, [r4, #32]
 800c326:	2300      	movs	r3, #0
 800c328:	0028      	movs	r0, r5
 800c32a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c32c:	47b8      	blx	r7
 800c32e:	89a1      	ldrh	r1, [r4, #12]
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d106      	bne.n	800c342 <__sflush_r+0x6a>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	2b1d      	cmp	r3, #29
 800c338:	d831      	bhi.n	800c39e <__sflush_r+0xc6>
 800c33a:	4a2c      	ldr	r2, [pc, #176]	; (800c3ec <__sflush_r+0x114>)
 800c33c:	40da      	lsrs	r2, r3
 800c33e:	07d3      	lsls	r3, r2, #31
 800c340:	d52d      	bpl.n	800c39e <__sflush_r+0xc6>
 800c342:	2300      	movs	r3, #0
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	04cb      	lsls	r3, r1, #19
 800c34c:	d505      	bpl.n	800c35a <__sflush_r+0x82>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d102      	bne.n	800c358 <__sflush_r+0x80>
 800c352:	682b      	ldr	r3, [r5, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d100      	bne.n	800c35a <__sflush_r+0x82>
 800c358:	6560      	str	r0, [r4, #84]	; 0x54
 800c35a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c35c:	602e      	str	r6, [r5, #0]
 800c35e:	2900      	cmp	r1, #0
 800c360:	d0c6      	beq.n	800c2f0 <__sflush_r+0x18>
 800c362:	0023      	movs	r3, r4
 800c364:	3344      	adds	r3, #68	; 0x44
 800c366:	4299      	cmp	r1, r3
 800c368:	d002      	beq.n	800c370 <__sflush_r+0x98>
 800c36a:	0028      	movs	r0, r5
 800c36c:	f000 f9f2 	bl	800c754 <_free_r>
 800c370:	2000      	movs	r0, #0
 800c372:	6360      	str	r0, [r4, #52]	; 0x34
 800c374:	e7bd      	b.n	800c2f2 <__sflush_r+0x1a>
 800c376:	2301      	movs	r3, #1
 800c378:	0028      	movs	r0, r5
 800c37a:	6a21      	ldr	r1, [r4, #32]
 800c37c:	47b8      	blx	r7
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	d1c5      	bne.n	800c30e <__sflush_r+0x36>
 800c382:	682b      	ldr	r3, [r5, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0c2      	beq.n	800c30e <__sflush_r+0x36>
 800c388:	2b1d      	cmp	r3, #29
 800c38a:	d001      	beq.n	800c390 <__sflush_r+0xb8>
 800c38c:	2b16      	cmp	r3, #22
 800c38e:	d101      	bne.n	800c394 <__sflush_r+0xbc>
 800c390:	602e      	str	r6, [r5, #0]
 800c392:	e7ad      	b.n	800c2f0 <__sflush_r+0x18>
 800c394:	2340      	movs	r3, #64	; 0x40
 800c396:	89a2      	ldrh	r2, [r4, #12]
 800c398:	4313      	orrs	r3, r2
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	e7a9      	b.n	800c2f2 <__sflush_r+0x1a>
 800c39e:	2340      	movs	r3, #64	; 0x40
 800c3a0:	430b      	orrs	r3, r1
 800c3a2:	e7fa      	b.n	800c39a <__sflush_r+0xc2>
 800c3a4:	690f      	ldr	r7, [r1, #16]
 800c3a6:	2f00      	cmp	r7, #0
 800c3a8:	d0a2      	beq.n	800c2f0 <__sflush_r+0x18>
 800c3aa:	680a      	ldr	r2, [r1, #0]
 800c3ac:	600f      	str	r7, [r1, #0]
 800c3ae:	1bd2      	subs	r2, r2, r7
 800c3b0:	9201      	str	r2, [sp, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	079b      	lsls	r3, r3, #30
 800c3b6:	d100      	bne.n	800c3ba <__sflush_r+0xe2>
 800c3b8:	694a      	ldr	r2, [r1, #20]
 800c3ba:	60a2      	str	r2, [r4, #8]
 800c3bc:	9b01      	ldr	r3, [sp, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	dc00      	bgt.n	800c3c4 <__sflush_r+0xec>
 800c3c2:	e795      	b.n	800c2f0 <__sflush_r+0x18>
 800c3c4:	003a      	movs	r2, r7
 800c3c6:	0028      	movs	r0, r5
 800c3c8:	9b01      	ldr	r3, [sp, #4]
 800c3ca:	6a21      	ldr	r1, [r4, #32]
 800c3cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3ce:	47b0      	blx	r6
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	dc06      	bgt.n	800c3e2 <__sflush_r+0x10a>
 800c3d4:	2340      	movs	r3, #64	; 0x40
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	89a2      	ldrh	r2, [r4, #12]
 800c3da:	4240      	negs	r0, r0
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	e787      	b.n	800c2f2 <__sflush_r+0x1a>
 800c3e2:	9b01      	ldr	r3, [sp, #4]
 800c3e4:	183f      	adds	r7, r7, r0
 800c3e6:	1a1b      	subs	r3, r3, r0
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	e7e7      	b.n	800c3bc <__sflush_r+0xe4>
 800c3ec:	20400001 	.word	0x20400001

0800c3f0 <_fflush_r>:
 800c3f0:	690b      	ldr	r3, [r1, #16]
 800c3f2:	b570      	push	{r4, r5, r6, lr}
 800c3f4:	0005      	movs	r5, r0
 800c3f6:	000c      	movs	r4, r1
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <_fflush_r+0x12>
 800c3fc:	2500      	movs	r5, #0
 800c3fe:	0028      	movs	r0, r5
 800c400:	bd70      	pop	{r4, r5, r6, pc}
 800c402:	2800      	cmp	r0, #0
 800c404:	d004      	beq.n	800c410 <_fflush_r+0x20>
 800c406:	6983      	ldr	r3, [r0, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <_fflush_r+0x20>
 800c40c:	f000 f892 	bl	800c534 <__sinit>
 800c410:	4b14      	ldr	r3, [pc, #80]	; (800c464 <_fflush_r+0x74>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d11b      	bne.n	800c44e <_fflush_r+0x5e>
 800c416:	686c      	ldr	r4, [r5, #4]
 800c418:	220c      	movs	r2, #12
 800c41a:	5ea3      	ldrsh	r3, [r4, r2]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d0ed      	beq.n	800c3fc <_fflush_r+0xc>
 800c420:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c422:	07d2      	lsls	r2, r2, #31
 800c424:	d404      	bmi.n	800c430 <_fflush_r+0x40>
 800c426:	059b      	lsls	r3, r3, #22
 800c428:	d402      	bmi.n	800c430 <_fflush_r+0x40>
 800c42a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c42c:	f000 f923 	bl	800c676 <__retarget_lock_acquire_recursive>
 800c430:	0028      	movs	r0, r5
 800c432:	0021      	movs	r1, r4
 800c434:	f7ff ff50 	bl	800c2d8 <__sflush_r>
 800c438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c43a:	0005      	movs	r5, r0
 800c43c:	07db      	lsls	r3, r3, #31
 800c43e:	d4de      	bmi.n	800c3fe <_fflush_r+0xe>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	059b      	lsls	r3, r3, #22
 800c444:	d4db      	bmi.n	800c3fe <_fflush_r+0xe>
 800c446:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c448:	f000 f916 	bl	800c678 <__retarget_lock_release_recursive>
 800c44c:	e7d7      	b.n	800c3fe <_fflush_r+0xe>
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <_fflush_r+0x78>)
 800c450:	429c      	cmp	r4, r3
 800c452:	d101      	bne.n	800c458 <_fflush_r+0x68>
 800c454:	68ac      	ldr	r4, [r5, #8]
 800c456:	e7df      	b.n	800c418 <_fflush_r+0x28>
 800c458:	4b04      	ldr	r3, [pc, #16]	; (800c46c <_fflush_r+0x7c>)
 800c45a:	429c      	cmp	r4, r3
 800c45c:	d1dc      	bne.n	800c418 <_fflush_r+0x28>
 800c45e:	68ec      	ldr	r4, [r5, #12]
 800c460:	e7da      	b.n	800c418 <_fflush_r+0x28>
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	0800d200 	.word	0x0800d200
 800c468:	0800d220 	.word	0x0800d220
 800c46c:	0800d1e0 	.word	0x0800d1e0

0800c470 <std>:
 800c470:	2300      	movs	r3, #0
 800c472:	b510      	push	{r4, lr}
 800c474:	0004      	movs	r4, r0
 800c476:	6003      	str	r3, [r0, #0]
 800c478:	6043      	str	r3, [r0, #4]
 800c47a:	6083      	str	r3, [r0, #8]
 800c47c:	8181      	strh	r1, [r0, #12]
 800c47e:	6643      	str	r3, [r0, #100]	; 0x64
 800c480:	0019      	movs	r1, r3
 800c482:	81c2      	strh	r2, [r0, #14]
 800c484:	6103      	str	r3, [r0, #16]
 800c486:	6143      	str	r3, [r0, #20]
 800c488:	6183      	str	r3, [r0, #24]
 800c48a:	2208      	movs	r2, #8
 800c48c:	305c      	adds	r0, #92	; 0x5c
 800c48e:	f7ff fdb7 	bl	800c000 <memset>
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <std+0x38>)
 800c494:	6224      	str	r4, [r4, #32]
 800c496:	6263      	str	r3, [r4, #36]	; 0x24
 800c498:	4b04      	ldr	r3, [pc, #16]	; (800c4ac <std+0x3c>)
 800c49a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c49c:	4b04      	ldr	r3, [pc, #16]	; (800c4b0 <std+0x40>)
 800c49e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4a0:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <std+0x44>)
 800c4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	46c0      	nop			; (mov r8, r8)
 800c4a8:	0800cf05 	.word	0x0800cf05
 800c4ac:	0800cf2d 	.word	0x0800cf2d
 800c4b0:	0800cf65 	.word	0x0800cf65
 800c4b4:	0800cf91 	.word	0x0800cf91

0800c4b8 <_cleanup_r>:
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	4902      	ldr	r1, [pc, #8]	; (800c4c4 <_cleanup_r+0xc>)
 800c4bc:	f000 f8ba 	bl	800c634 <_fwalk_reent>
 800c4c0:	bd10      	pop	{r4, pc}
 800c4c2:	46c0      	nop			; (mov r8, r8)
 800c4c4:	0800c3f1 	.word	0x0800c3f1

0800c4c8 <__sfmoreglue>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	2568      	movs	r5, #104	; 0x68
 800c4cc:	1e4a      	subs	r2, r1, #1
 800c4ce:	4355      	muls	r5, r2
 800c4d0:	000e      	movs	r6, r1
 800c4d2:	0029      	movs	r1, r5
 800c4d4:	3174      	adds	r1, #116	; 0x74
 800c4d6:	f000 f9a9 	bl	800c82c <_malloc_r>
 800c4da:	1e04      	subs	r4, r0, #0
 800c4dc:	d008      	beq.n	800c4f0 <__sfmoreglue+0x28>
 800c4de:	2100      	movs	r1, #0
 800c4e0:	002a      	movs	r2, r5
 800c4e2:	6001      	str	r1, [r0, #0]
 800c4e4:	6046      	str	r6, [r0, #4]
 800c4e6:	300c      	adds	r0, #12
 800c4e8:	60a0      	str	r0, [r4, #8]
 800c4ea:	3268      	adds	r2, #104	; 0x68
 800c4ec:	f7ff fd88 	bl	800c000 <memset>
 800c4f0:	0020      	movs	r0, r4
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}

0800c4f4 <__sfp_lock_acquire>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	4802      	ldr	r0, [pc, #8]	; (800c500 <__sfp_lock_acquire+0xc>)
 800c4f8:	f000 f8bd 	bl	800c676 <__retarget_lock_acquire_recursive>
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	2000025d 	.word	0x2000025d

0800c504 <__sfp_lock_release>:
 800c504:	b510      	push	{r4, lr}
 800c506:	4802      	ldr	r0, [pc, #8]	; (800c510 <__sfp_lock_release+0xc>)
 800c508:	f000 f8b6 	bl	800c678 <__retarget_lock_release_recursive>
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	46c0      	nop			; (mov r8, r8)
 800c510:	2000025d 	.word	0x2000025d

0800c514 <__sinit_lock_acquire>:
 800c514:	b510      	push	{r4, lr}
 800c516:	4802      	ldr	r0, [pc, #8]	; (800c520 <__sinit_lock_acquire+0xc>)
 800c518:	f000 f8ad 	bl	800c676 <__retarget_lock_acquire_recursive>
 800c51c:	bd10      	pop	{r4, pc}
 800c51e:	46c0      	nop			; (mov r8, r8)
 800c520:	2000025e 	.word	0x2000025e

0800c524 <__sinit_lock_release>:
 800c524:	b510      	push	{r4, lr}
 800c526:	4802      	ldr	r0, [pc, #8]	; (800c530 <__sinit_lock_release+0xc>)
 800c528:	f000 f8a6 	bl	800c678 <__retarget_lock_release_recursive>
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	46c0      	nop			; (mov r8, r8)
 800c530:	2000025e 	.word	0x2000025e

0800c534 <__sinit>:
 800c534:	b513      	push	{r0, r1, r4, lr}
 800c536:	0004      	movs	r4, r0
 800c538:	f7ff ffec 	bl	800c514 <__sinit_lock_acquire>
 800c53c:	69a3      	ldr	r3, [r4, #24]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <__sinit+0x14>
 800c542:	f7ff ffef 	bl	800c524 <__sinit_lock_release>
 800c546:	bd13      	pop	{r0, r1, r4, pc}
 800c548:	64a3      	str	r3, [r4, #72]	; 0x48
 800c54a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c54c:	6523      	str	r3, [r4, #80]	; 0x50
 800c54e:	4b13      	ldr	r3, [pc, #76]	; (800c59c <__sinit+0x68>)
 800c550:	4a13      	ldr	r2, [pc, #76]	; (800c5a0 <__sinit+0x6c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	62a2      	str	r2, [r4, #40]	; 0x28
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d101      	bne.n	800c560 <__sinit+0x2c>
 800c55c:	2301      	movs	r3, #1
 800c55e:	61a3      	str	r3, [r4, #24]
 800c560:	0020      	movs	r0, r4
 800c562:	f000 f81f 	bl	800c5a4 <__sfp>
 800c566:	6060      	str	r0, [r4, #4]
 800c568:	0020      	movs	r0, r4
 800c56a:	f000 f81b 	bl	800c5a4 <__sfp>
 800c56e:	60a0      	str	r0, [r4, #8]
 800c570:	0020      	movs	r0, r4
 800c572:	f000 f817 	bl	800c5a4 <__sfp>
 800c576:	2200      	movs	r2, #0
 800c578:	2104      	movs	r1, #4
 800c57a:	60e0      	str	r0, [r4, #12]
 800c57c:	6860      	ldr	r0, [r4, #4]
 800c57e:	f7ff ff77 	bl	800c470 <std>
 800c582:	2201      	movs	r2, #1
 800c584:	2109      	movs	r1, #9
 800c586:	68a0      	ldr	r0, [r4, #8]
 800c588:	f7ff ff72 	bl	800c470 <std>
 800c58c:	2202      	movs	r2, #2
 800c58e:	2112      	movs	r1, #18
 800c590:	68e0      	ldr	r0, [r4, #12]
 800c592:	f7ff ff6d 	bl	800c470 <std>
 800c596:	2301      	movs	r3, #1
 800c598:	61a3      	str	r3, [r4, #24]
 800c59a:	e7d2      	b.n	800c542 <__sinit+0xe>
 800c59c:	0800d1dc 	.word	0x0800d1dc
 800c5a0:	0800c4b9 	.word	0x0800c4b9

0800c5a4 <__sfp>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	0007      	movs	r7, r0
 800c5a8:	f7ff ffa4 	bl	800c4f4 <__sfp_lock_acquire>
 800c5ac:	4b1f      	ldr	r3, [pc, #124]	; (800c62c <__sfp+0x88>)
 800c5ae:	681e      	ldr	r6, [r3, #0]
 800c5b0:	69b3      	ldr	r3, [r6, #24]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <__sfp+0x18>
 800c5b6:	0030      	movs	r0, r6
 800c5b8:	f7ff ffbc 	bl	800c534 <__sinit>
 800c5bc:	3648      	adds	r6, #72	; 0x48
 800c5be:	68b4      	ldr	r4, [r6, #8]
 800c5c0:	6873      	ldr	r3, [r6, #4]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	d504      	bpl.n	800c5d0 <__sfp+0x2c>
 800c5c6:	6833      	ldr	r3, [r6, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d022      	beq.n	800c612 <__sfp+0x6e>
 800c5cc:	6836      	ldr	r6, [r6, #0]
 800c5ce:	e7f6      	b.n	800c5be <__sfp+0x1a>
 800c5d0:	220c      	movs	r2, #12
 800c5d2:	5ea5      	ldrsh	r5, [r4, r2]
 800c5d4:	2d00      	cmp	r5, #0
 800c5d6:	d11a      	bne.n	800c60e <__sfp+0x6a>
 800c5d8:	0020      	movs	r0, r4
 800c5da:	4b15      	ldr	r3, [pc, #84]	; (800c630 <__sfp+0x8c>)
 800c5dc:	3058      	adds	r0, #88	; 0x58
 800c5de:	60e3      	str	r3, [r4, #12]
 800c5e0:	6665      	str	r5, [r4, #100]	; 0x64
 800c5e2:	f000 f847 	bl	800c674 <__retarget_lock_init_recursive>
 800c5e6:	f7ff ff8d 	bl	800c504 <__sfp_lock_release>
 800c5ea:	0020      	movs	r0, r4
 800c5ec:	2208      	movs	r2, #8
 800c5ee:	0029      	movs	r1, r5
 800c5f0:	6025      	str	r5, [r4, #0]
 800c5f2:	60a5      	str	r5, [r4, #8]
 800c5f4:	6065      	str	r5, [r4, #4]
 800c5f6:	6125      	str	r5, [r4, #16]
 800c5f8:	6165      	str	r5, [r4, #20]
 800c5fa:	61a5      	str	r5, [r4, #24]
 800c5fc:	305c      	adds	r0, #92	; 0x5c
 800c5fe:	f7ff fcff 	bl	800c000 <memset>
 800c602:	6365      	str	r5, [r4, #52]	; 0x34
 800c604:	63a5      	str	r5, [r4, #56]	; 0x38
 800c606:	64a5      	str	r5, [r4, #72]	; 0x48
 800c608:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c60a:	0020      	movs	r0, r4
 800c60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c60e:	3468      	adds	r4, #104	; 0x68
 800c610:	e7d7      	b.n	800c5c2 <__sfp+0x1e>
 800c612:	2104      	movs	r1, #4
 800c614:	0038      	movs	r0, r7
 800c616:	f7ff ff57 	bl	800c4c8 <__sfmoreglue>
 800c61a:	1e04      	subs	r4, r0, #0
 800c61c:	6030      	str	r0, [r6, #0]
 800c61e:	d1d5      	bne.n	800c5cc <__sfp+0x28>
 800c620:	f7ff ff70 	bl	800c504 <__sfp_lock_release>
 800c624:	230c      	movs	r3, #12
 800c626:	603b      	str	r3, [r7, #0]
 800c628:	e7ef      	b.n	800c60a <__sfp+0x66>
 800c62a:	46c0      	nop			; (mov r8, r8)
 800c62c:	0800d1dc 	.word	0x0800d1dc
 800c630:	ffff0001 	.word	0xffff0001

0800c634 <_fwalk_reent>:
 800c634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c636:	0004      	movs	r4, r0
 800c638:	0006      	movs	r6, r0
 800c63a:	2700      	movs	r7, #0
 800c63c:	9101      	str	r1, [sp, #4]
 800c63e:	3448      	adds	r4, #72	; 0x48
 800c640:	6863      	ldr	r3, [r4, #4]
 800c642:	68a5      	ldr	r5, [r4, #8]
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	9b00      	ldr	r3, [sp, #0]
 800c648:	3b01      	subs	r3, #1
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	d504      	bpl.n	800c658 <_fwalk_reent+0x24>
 800c64e:	6824      	ldr	r4, [r4, #0]
 800c650:	2c00      	cmp	r4, #0
 800c652:	d1f5      	bne.n	800c640 <_fwalk_reent+0xc>
 800c654:	0038      	movs	r0, r7
 800c656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c658:	89ab      	ldrh	r3, [r5, #12]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d908      	bls.n	800c670 <_fwalk_reent+0x3c>
 800c65e:	220e      	movs	r2, #14
 800c660:	5eab      	ldrsh	r3, [r5, r2]
 800c662:	3301      	adds	r3, #1
 800c664:	d004      	beq.n	800c670 <_fwalk_reent+0x3c>
 800c666:	0029      	movs	r1, r5
 800c668:	0030      	movs	r0, r6
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	4798      	blx	r3
 800c66e:	4307      	orrs	r7, r0
 800c670:	3568      	adds	r5, #104	; 0x68
 800c672:	e7e8      	b.n	800c646 <_fwalk_reent+0x12>

0800c674 <__retarget_lock_init_recursive>:
 800c674:	4770      	bx	lr

0800c676 <__retarget_lock_acquire_recursive>:
 800c676:	4770      	bx	lr

0800c678 <__retarget_lock_release_recursive>:
 800c678:	4770      	bx	lr
	...

0800c67c <__swhatbuf_r>:
 800c67c:	b570      	push	{r4, r5, r6, lr}
 800c67e:	000e      	movs	r6, r1
 800c680:	001d      	movs	r5, r3
 800c682:	230e      	movs	r3, #14
 800c684:	5ec9      	ldrsh	r1, [r1, r3]
 800c686:	0014      	movs	r4, r2
 800c688:	b096      	sub	sp, #88	; 0x58
 800c68a:	2900      	cmp	r1, #0
 800c68c:	da08      	bge.n	800c6a0 <__swhatbuf_r+0x24>
 800c68e:	220c      	movs	r2, #12
 800c690:	5eb3      	ldrsh	r3, [r6, r2]
 800c692:	2200      	movs	r2, #0
 800c694:	602a      	str	r2, [r5, #0]
 800c696:	061b      	lsls	r3, r3, #24
 800c698:	d411      	bmi.n	800c6be <__swhatbuf_r+0x42>
 800c69a:	2380      	movs	r3, #128	; 0x80
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	e00f      	b.n	800c6c0 <__swhatbuf_r+0x44>
 800c6a0:	466a      	mov	r2, sp
 800c6a2:	f000 fca1 	bl	800cfe8 <_fstat_r>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	dbf1      	blt.n	800c68e <__swhatbuf_r+0x12>
 800c6aa:	23f0      	movs	r3, #240	; 0xf0
 800c6ac:	9901      	ldr	r1, [sp, #4]
 800c6ae:	021b      	lsls	r3, r3, #8
 800c6b0:	4019      	ands	r1, r3
 800c6b2:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <__swhatbuf_r+0x4c>)
 800c6b4:	18c9      	adds	r1, r1, r3
 800c6b6:	424b      	negs	r3, r1
 800c6b8:	4159      	adcs	r1, r3
 800c6ba:	6029      	str	r1, [r5, #0]
 800c6bc:	e7ed      	b.n	800c69a <__swhatbuf_r+0x1e>
 800c6be:	2340      	movs	r3, #64	; 0x40
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	b016      	add	sp, #88	; 0x58
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	ffffe000 	.word	0xffffe000

0800c6cc <__smakebuf_r>:
 800c6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ce:	2602      	movs	r6, #2
 800c6d0:	898b      	ldrh	r3, [r1, #12]
 800c6d2:	0005      	movs	r5, r0
 800c6d4:	000c      	movs	r4, r1
 800c6d6:	4233      	tst	r3, r6
 800c6d8:	d006      	beq.n	800c6e8 <__smakebuf_r+0x1c>
 800c6da:	0023      	movs	r3, r4
 800c6dc:	3347      	adds	r3, #71	; 0x47
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	6123      	str	r3, [r4, #16]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	6163      	str	r3, [r4, #20]
 800c6e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c6e8:	466a      	mov	r2, sp
 800c6ea:	ab01      	add	r3, sp, #4
 800c6ec:	f7ff ffc6 	bl	800c67c <__swhatbuf_r>
 800c6f0:	9900      	ldr	r1, [sp, #0]
 800c6f2:	0007      	movs	r7, r0
 800c6f4:	0028      	movs	r0, r5
 800c6f6:	f000 f899 	bl	800c82c <_malloc_r>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d108      	bne.n	800c710 <__smakebuf_r+0x44>
 800c6fe:	220c      	movs	r2, #12
 800c700:	5ea3      	ldrsh	r3, [r4, r2]
 800c702:	059a      	lsls	r2, r3, #22
 800c704:	d4ef      	bmi.n	800c6e6 <__smakebuf_r+0x1a>
 800c706:	2203      	movs	r2, #3
 800c708:	4393      	bics	r3, r2
 800c70a:	431e      	orrs	r6, r3
 800c70c:	81a6      	strh	r6, [r4, #12]
 800c70e:	e7e4      	b.n	800c6da <__smakebuf_r+0xe>
 800c710:	4b0f      	ldr	r3, [pc, #60]	; (800c750 <__smakebuf_r+0x84>)
 800c712:	62ab      	str	r3, [r5, #40]	; 0x28
 800c714:	2380      	movs	r3, #128	; 0x80
 800c716:	89a2      	ldrh	r2, [r4, #12]
 800c718:	6020      	str	r0, [r4, #0]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	9b00      	ldr	r3, [sp, #0]
 800c720:	6120      	str	r0, [r4, #16]
 800c722:	6163      	str	r3, [r4, #20]
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00d      	beq.n	800c746 <__smakebuf_r+0x7a>
 800c72a:	0028      	movs	r0, r5
 800c72c:	230e      	movs	r3, #14
 800c72e:	5ee1      	ldrsh	r1, [r4, r3]
 800c730:	f000 fc6c 	bl	800d00c <_isatty_r>
 800c734:	2800      	cmp	r0, #0
 800c736:	d006      	beq.n	800c746 <__smakebuf_r+0x7a>
 800c738:	2203      	movs	r2, #3
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	4393      	bics	r3, r2
 800c73e:	001a      	movs	r2, r3
 800c740:	2301      	movs	r3, #1
 800c742:	4313      	orrs	r3, r2
 800c744:	81a3      	strh	r3, [r4, #12]
 800c746:	89a0      	ldrh	r0, [r4, #12]
 800c748:	4307      	orrs	r7, r0
 800c74a:	81a7      	strh	r7, [r4, #12]
 800c74c:	e7cb      	b.n	800c6e6 <__smakebuf_r+0x1a>
 800c74e:	46c0      	nop			; (mov r8, r8)
 800c750:	0800c4b9 	.word	0x0800c4b9

0800c754 <_free_r>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	0005      	movs	r5, r0
 800c758:	2900      	cmp	r1, #0
 800c75a:	d010      	beq.n	800c77e <_free_r+0x2a>
 800c75c:	1f0c      	subs	r4, r1, #4
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	da00      	bge.n	800c766 <_free_r+0x12>
 800c764:	18e4      	adds	r4, r4, r3
 800c766:	0028      	movs	r0, r5
 800c768:	f000 fc82 	bl	800d070 <__malloc_lock>
 800c76c:	4a1d      	ldr	r2, [pc, #116]	; (800c7e4 <_free_r+0x90>)
 800c76e:	6813      	ldr	r3, [r2, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d105      	bne.n	800c780 <_free_r+0x2c>
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	6014      	str	r4, [r2, #0]
 800c778:	0028      	movs	r0, r5
 800c77a:	f000 fc81 	bl	800d080 <__malloc_unlock>
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	42a3      	cmp	r3, r4
 800c782:	d908      	bls.n	800c796 <_free_r+0x42>
 800c784:	6821      	ldr	r1, [r4, #0]
 800c786:	1860      	adds	r0, r4, r1
 800c788:	4283      	cmp	r3, r0
 800c78a:	d1f3      	bne.n	800c774 <_free_r+0x20>
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	1841      	adds	r1, r0, r1
 800c792:	6021      	str	r1, [r4, #0]
 800c794:	e7ee      	b.n	800c774 <_free_r+0x20>
 800c796:	001a      	movs	r2, r3
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <_free_r+0x4e>
 800c79e:	42a3      	cmp	r3, r4
 800c7a0:	d9f9      	bls.n	800c796 <_free_r+0x42>
 800c7a2:	6811      	ldr	r1, [r2, #0]
 800c7a4:	1850      	adds	r0, r2, r1
 800c7a6:	42a0      	cmp	r0, r4
 800c7a8:	d10b      	bne.n	800c7c2 <_free_r+0x6e>
 800c7aa:	6820      	ldr	r0, [r4, #0]
 800c7ac:	1809      	adds	r1, r1, r0
 800c7ae:	1850      	adds	r0, r2, r1
 800c7b0:	6011      	str	r1, [r2, #0]
 800c7b2:	4283      	cmp	r3, r0
 800c7b4:	d1e0      	bne.n	800c778 <_free_r+0x24>
 800c7b6:	6818      	ldr	r0, [r3, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	1841      	adds	r1, r0, r1
 800c7bc:	6011      	str	r1, [r2, #0]
 800c7be:	6053      	str	r3, [r2, #4]
 800c7c0:	e7da      	b.n	800c778 <_free_r+0x24>
 800c7c2:	42a0      	cmp	r0, r4
 800c7c4:	d902      	bls.n	800c7cc <_free_r+0x78>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	e7d5      	b.n	800c778 <_free_r+0x24>
 800c7cc:	6821      	ldr	r1, [r4, #0]
 800c7ce:	1860      	adds	r0, r4, r1
 800c7d0:	4283      	cmp	r3, r0
 800c7d2:	d103      	bne.n	800c7dc <_free_r+0x88>
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	1841      	adds	r1, r0, r1
 800c7da:	6021      	str	r1, [r4, #0]
 800c7dc:	6063      	str	r3, [r4, #4]
 800c7de:	6054      	str	r4, [r2, #4]
 800c7e0:	e7ca      	b.n	800c778 <_free_r+0x24>
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	20000260 	.word	0x20000260

0800c7e8 <sbrk_aligned>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	4e0f      	ldr	r6, [pc, #60]	; (800c828 <sbrk_aligned+0x40>)
 800c7ec:	000d      	movs	r5, r1
 800c7ee:	6831      	ldr	r1, [r6, #0]
 800c7f0:	0004      	movs	r4, r0
 800c7f2:	2900      	cmp	r1, #0
 800c7f4:	d102      	bne.n	800c7fc <sbrk_aligned+0x14>
 800c7f6:	f000 fb73 	bl	800cee0 <_sbrk_r>
 800c7fa:	6030      	str	r0, [r6, #0]
 800c7fc:	0029      	movs	r1, r5
 800c7fe:	0020      	movs	r0, r4
 800c800:	f000 fb6e 	bl	800cee0 <_sbrk_r>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d00a      	beq.n	800c81e <sbrk_aligned+0x36>
 800c808:	2303      	movs	r3, #3
 800c80a:	1cc5      	adds	r5, r0, #3
 800c80c:	439d      	bics	r5, r3
 800c80e:	42a8      	cmp	r0, r5
 800c810:	d007      	beq.n	800c822 <sbrk_aligned+0x3a>
 800c812:	1a29      	subs	r1, r5, r0
 800c814:	0020      	movs	r0, r4
 800c816:	f000 fb63 	bl	800cee0 <_sbrk_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d101      	bne.n	800c822 <sbrk_aligned+0x3a>
 800c81e:	2501      	movs	r5, #1
 800c820:	426d      	negs	r5, r5
 800c822:	0028      	movs	r0, r5
 800c824:	bd70      	pop	{r4, r5, r6, pc}
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	20000264 	.word	0x20000264

0800c82c <_malloc_r>:
 800c82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c82e:	2203      	movs	r2, #3
 800c830:	1ccb      	adds	r3, r1, #3
 800c832:	4393      	bics	r3, r2
 800c834:	3308      	adds	r3, #8
 800c836:	0006      	movs	r6, r0
 800c838:	001f      	movs	r7, r3
 800c83a:	2b0c      	cmp	r3, #12
 800c83c:	d232      	bcs.n	800c8a4 <_malloc_r+0x78>
 800c83e:	270c      	movs	r7, #12
 800c840:	42b9      	cmp	r1, r7
 800c842:	d831      	bhi.n	800c8a8 <_malloc_r+0x7c>
 800c844:	0030      	movs	r0, r6
 800c846:	f000 fc13 	bl	800d070 <__malloc_lock>
 800c84a:	4d32      	ldr	r5, [pc, #200]	; (800c914 <_malloc_r+0xe8>)
 800c84c:	682b      	ldr	r3, [r5, #0]
 800c84e:	001c      	movs	r4, r3
 800c850:	2c00      	cmp	r4, #0
 800c852:	d12e      	bne.n	800c8b2 <_malloc_r+0x86>
 800c854:	0039      	movs	r1, r7
 800c856:	0030      	movs	r0, r6
 800c858:	f7ff ffc6 	bl	800c7e8 <sbrk_aligned>
 800c85c:	0004      	movs	r4, r0
 800c85e:	1c43      	adds	r3, r0, #1
 800c860:	d11e      	bne.n	800c8a0 <_malloc_r+0x74>
 800c862:	682c      	ldr	r4, [r5, #0]
 800c864:	0025      	movs	r5, r4
 800c866:	2d00      	cmp	r5, #0
 800c868:	d14a      	bne.n	800c900 <_malloc_r+0xd4>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	0029      	movs	r1, r5
 800c86e:	18e3      	adds	r3, r4, r3
 800c870:	0030      	movs	r0, r6
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	f000 fb34 	bl	800cee0 <_sbrk_r>
 800c878:	9b01      	ldr	r3, [sp, #4]
 800c87a:	4283      	cmp	r3, r0
 800c87c:	d143      	bne.n	800c906 <_malloc_r+0xda>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	3703      	adds	r7, #3
 800c882:	1aff      	subs	r7, r7, r3
 800c884:	2303      	movs	r3, #3
 800c886:	439f      	bics	r7, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	2f0c      	cmp	r7, #12
 800c88c:	d200      	bcs.n	800c890 <_malloc_r+0x64>
 800c88e:	270c      	movs	r7, #12
 800c890:	0039      	movs	r1, r7
 800c892:	0030      	movs	r0, r6
 800c894:	f7ff ffa8 	bl	800c7e8 <sbrk_aligned>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d034      	beq.n	800c906 <_malloc_r+0xda>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	19df      	adds	r7, r3, r7
 800c8a0:	6027      	str	r7, [r4, #0]
 800c8a2:	e013      	b.n	800c8cc <_malloc_r+0xa0>
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	dacb      	bge.n	800c840 <_malloc_r+0x14>
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	2500      	movs	r5, #0
 800c8ac:	6033      	str	r3, [r6, #0]
 800c8ae:	0028      	movs	r0, r5
 800c8b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c8b2:	6822      	ldr	r2, [r4, #0]
 800c8b4:	1bd1      	subs	r1, r2, r7
 800c8b6:	d420      	bmi.n	800c8fa <_malloc_r+0xce>
 800c8b8:	290b      	cmp	r1, #11
 800c8ba:	d917      	bls.n	800c8ec <_malloc_r+0xc0>
 800c8bc:	19e2      	adds	r2, r4, r7
 800c8be:	6027      	str	r7, [r4, #0]
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	d111      	bne.n	800c8e8 <_malloc_r+0xbc>
 800c8c4:	602a      	str	r2, [r5, #0]
 800c8c6:	6863      	ldr	r3, [r4, #4]
 800c8c8:	6011      	str	r1, [r2, #0]
 800c8ca:	6053      	str	r3, [r2, #4]
 800c8cc:	0030      	movs	r0, r6
 800c8ce:	0025      	movs	r5, r4
 800c8d0:	f000 fbd6 	bl	800d080 <__malloc_unlock>
 800c8d4:	2207      	movs	r2, #7
 800c8d6:	350b      	adds	r5, #11
 800c8d8:	1d23      	adds	r3, r4, #4
 800c8da:	4395      	bics	r5, r2
 800c8dc:	1aea      	subs	r2, r5, r3
 800c8de:	429d      	cmp	r5, r3
 800c8e0:	d0e5      	beq.n	800c8ae <_malloc_r+0x82>
 800c8e2:	1b5b      	subs	r3, r3, r5
 800c8e4:	50a3      	str	r3, [r4, r2]
 800c8e6:	e7e2      	b.n	800c8ae <_malloc_r+0x82>
 800c8e8:	605a      	str	r2, [r3, #4]
 800c8ea:	e7ec      	b.n	800c8c6 <_malloc_r+0x9a>
 800c8ec:	6862      	ldr	r2, [r4, #4]
 800c8ee:	42a3      	cmp	r3, r4
 800c8f0:	d101      	bne.n	800c8f6 <_malloc_r+0xca>
 800c8f2:	602a      	str	r2, [r5, #0]
 800c8f4:	e7ea      	b.n	800c8cc <_malloc_r+0xa0>
 800c8f6:	605a      	str	r2, [r3, #4]
 800c8f8:	e7e8      	b.n	800c8cc <_malloc_r+0xa0>
 800c8fa:	0023      	movs	r3, r4
 800c8fc:	6864      	ldr	r4, [r4, #4]
 800c8fe:	e7a7      	b.n	800c850 <_malloc_r+0x24>
 800c900:	002c      	movs	r4, r5
 800c902:	686d      	ldr	r5, [r5, #4]
 800c904:	e7af      	b.n	800c866 <_malloc_r+0x3a>
 800c906:	230c      	movs	r3, #12
 800c908:	0030      	movs	r0, r6
 800c90a:	6033      	str	r3, [r6, #0]
 800c90c:	f000 fbb8 	bl	800d080 <__malloc_unlock>
 800c910:	e7cd      	b.n	800c8ae <_malloc_r+0x82>
 800c912:	46c0      	nop			; (mov r8, r8)
 800c914:	20000260 	.word	0x20000260

0800c918 <__sfputc_r>:
 800c918:	6893      	ldr	r3, [r2, #8]
 800c91a:	b510      	push	{r4, lr}
 800c91c:	3b01      	subs	r3, #1
 800c91e:	6093      	str	r3, [r2, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	da04      	bge.n	800c92e <__sfputc_r+0x16>
 800c924:	6994      	ldr	r4, [r2, #24]
 800c926:	42a3      	cmp	r3, r4
 800c928:	db07      	blt.n	800c93a <__sfputc_r+0x22>
 800c92a:	290a      	cmp	r1, #10
 800c92c:	d005      	beq.n	800c93a <__sfputc_r+0x22>
 800c92e:	6813      	ldr	r3, [r2, #0]
 800c930:	1c58      	adds	r0, r3, #1
 800c932:	6010      	str	r0, [r2, #0]
 800c934:	7019      	strb	r1, [r3, #0]
 800c936:	0008      	movs	r0, r1
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	f7ff fbff 	bl	800c13c <__swbuf_r>
 800c93e:	0001      	movs	r1, r0
 800c940:	e7f9      	b.n	800c936 <__sfputc_r+0x1e>

0800c942 <__sfputs_r>:
 800c942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c944:	0006      	movs	r6, r0
 800c946:	000f      	movs	r7, r1
 800c948:	0014      	movs	r4, r2
 800c94a:	18d5      	adds	r5, r2, r3
 800c94c:	42ac      	cmp	r4, r5
 800c94e:	d101      	bne.n	800c954 <__sfputs_r+0x12>
 800c950:	2000      	movs	r0, #0
 800c952:	e007      	b.n	800c964 <__sfputs_r+0x22>
 800c954:	7821      	ldrb	r1, [r4, #0]
 800c956:	003a      	movs	r2, r7
 800c958:	0030      	movs	r0, r6
 800c95a:	f7ff ffdd 	bl	800c918 <__sfputc_r>
 800c95e:	3401      	adds	r4, #1
 800c960:	1c43      	adds	r3, r0, #1
 800c962:	d1f3      	bne.n	800c94c <__sfputs_r+0xa>
 800c964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c968 <_vfiprintf_r>:
 800c968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96a:	b0a1      	sub	sp, #132	; 0x84
 800c96c:	0006      	movs	r6, r0
 800c96e:	000c      	movs	r4, r1
 800c970:	001f      	movs	r7, r3
 800c972:	9203      	str	r2, [sp, #12]
 800c974:	2800      	cmp	r0, #0
 800c976:	d004      	beq.n	800c982 <_vfiprintf_r+0x1a>
 800c978:	6983      	ldr	r3, [r0, #24]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <_vfiprintf_r+0x1a>
 800c97e:	f7ff fdd9 	bl	800c534 <__sinit>
 800c982:	4b8e      	ldr	r3, [pc, #568]	; (800cbbc <_vfiprintf_r+0x254>)
 800c984:	429c      	cmp	r4, r3
 800c986:	d11c      	bne.n	800c9c2 <_vfiprintf_r+0x5a>
 800c988:	6874      	ldr	r4, [r6, #4]
 800c98a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c98c:	07db      	lsls	r3, r3, #31
 800c98e:	d405      	bmi.n	800c99c <_vfiprintf_r+0x34>
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	059b      	lsls	r3, r3, #22
 800c994:	d402      	bmi.n	800c99c <_vfiprintf_r+0x34>
 800c996:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c998:	f7ff fe6d 	bl	800c676 <__retarget_lock_acquire_recursive>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	071b      	lsls	r3, r3, #28
 800c9a0:	d502      	bpl.n	800c9a8 <_vfiprintf_r+0x40>
 800c9a2:	6923      	ldr	r3, [r4, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11d      	bne.n	800c9e4 <_vfiprintf_r+0x7c>
 800c9a8:	0021      	movs	r1, r4
 800c9aa:	0030      	movs	r0, r6
 800c9ac:	f7ff fc1c 	bl	800c1e8 <__swsetup_r>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d017      	beq.n	800c9e4 <_vfiprintf_r+0x7c>
 800c9b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b6:	07db      	lsls	r3, r3, #31
 800c9b8:	d50d      	bpl.n	800c9d6 <_vfiprintf_r+0x6e>
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	4240      	negs	r0, r0
 800c9be:	b021      	add	sp, #132	; 0x84
 800c9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c2:	4b7f      	ldr	r3, [pc, #508]	; (800cbc0 <_vfiprintf_r+0x258>)
 800c9c4:	429c      	cmp	r4, r3
 800c9c6:	d101      	bne.n	800c9cc <_vfiprintf_r+0x64>
 800c9c8:	68b4      	ldr	r4, [r6, #8]
 800c9ca:	e7de      	b.n	800c98a <_vfiprintf_r+0x22>
 800c9cc:	4b7d      	ldr	r3, [pc, #500]	; (800cbc4 <_vfiprintf_r+0x25c>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d1db      	bne.n	800c98a <_vfiprintf_r+0x22>
 800c9d2:	68f4      	ldr	r4, [r6, #12]
 800c9d4:	e7d9      	b.n	800c98a <_vfiprintf_r+0x22>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	059b      	lsls	r3, r3, #22
 800c9da:	d4ee      	bmi.n	800c9ba <_vfiprintf_r+0x52>
 800c9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9de:	f7ff fe4b 	bl	800c678 <__retarget_lock_release_recursive>
 800c9e2:	e7ea      	b.n	800c9ba <_vfiprintf_r+0x52>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	ad08      	add	r5, sp, #32
 800c9e8:	616b      	str	r3, [r5, #20]
 800c9ea:	3320      	adds	r3, #32
 800c9ec:	766b      	strb	r3, [r5, #25]
 800c9ee:	3310      	adds	r3, #16
 800c9f0:	76ab      	strb	r3, [r5, #26]
 800c9f2:	9707      	str	r7, [sp, #28]
 800c9f4:	9f03      	ldr	r7, [sp, #12]
 800c9f6:	783b      	ldrb	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <_vfiprintf_r+0x98>
 800c9fc:	2b25      	cmp	r3, #37	; 0x25
 800c9fe:	d14e      	bne.n	800ca9e <_vfiprintf_r+0x136>
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	1afb      	subs	r3, r7, r3
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	429f      	cmp	r7, r3
 800ca0a:	d00d      	beq.n	800ca28 <_vfiprintf_r+0xc0>
 800ca0c:	9b05      	ldr	r3, [sp, #20]
 800ca0e:	0021      	movs	r1, r4
 800ca10:	0030      	movs	r0, r6
 800ca12:	9a03      	ldr	r2, [sp, #12]
 800ca14:	f7ff ff95 	bl	800c942 <__sfputs_r>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d100      	bne.n	800ca1e <_vfiprintf_r+0xb6>
 800ca1c:	e0b5      	b.n	800cb8a <_vfiprintf_r+0x222>
 800ca1e:	696a      	ldr	r2, [r5, #20]
 800ca20:	9b05      	ldr	r3, [sp, #20]
 800ca22:	4694      	mov	ip, r2
 800ca24:	4463      	add	r3, ip
 800ca26:	616b      	str	r3, [r5, #20]
 800ca28:	783b      	ldrb	r3, [r7, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d100      	bne.n	800ca30 <_vfiprintf_r+0xc8>
 800ca2e:	e0ac      	b.n	800cb8a <_vfiprintf_r+0x222>
 800ca30:	2201      	movs	r2, #1
 800ca32:	1c7b      	adds	r3, r7, #1
 800ca34:	9303      	str	r3, [sp, #12]
 800ca36:	2300      	movs	r3, #0
 800ca38:	4252      	negs	r2, r2
 800ca3a:	606a      	str	r2, [r5, #4]
 800ca3c:	a904      	add	r1, sp, #16
 800ca3e:	3254      	adds	r2, #84	; 0x54
 800ca40:	1852      	adds	r2, r2, r1
 800ca42:	602b      	str	r3, [r5, #0]
 800ca44:	60eb      	str	r3, [r5, #12]
 800ca46:	60ab      	str	r3, [r5, #8]
 800ca48:	7013      	strb	r3, [r2, #0]
 800ca4a:	65ab      	str	r3, [r5, #88]	; 0x58
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	2205      	movs	r2, #5
 800ca50:	7819      	ldrb	r1, [r3, #0]
 800ca52:	485d      	ldr	r0, [pc, #372]	; (800cbc8 <_vfiprintf_r+0x260>)
 800ca54:	f000 fb00 	bl	800d058 <memchr>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	1c5f      	adds	r7, r3, #1
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d120      	bne.n	800caa2 <_vfiprintf_r+0x13a>
 800ca60:	682a      	ldr	r2, [r5, #0]
 800ca62:	06d3      	lsls	r3, r2, #27
 800ca64:	d504      	bpl.n	800ca70 <_vfiprintf_r+0x108>
 800ca66:	2353      	movs	r3, #83	; 0x53
 800ca68:	a904      	add	r1, sp, #16
 800ca6a:	185b      	adds	r3, r3, r1
 800ca6c:	2120      	movs	r1, #32
 800ca6e:	7019      	strb	r1, [r3, #0]
 800ca70:	0713      	lsls	r3, r2, #28
 800ca72:	d504      	bpl.n	800ca7e <_vfiprintf_r+0x116>
 800ca74:	2353      	movs	r3, #83	; 0x53
 800ca76:	a904      	add	r1, sp, #16
 800ca78:	185b      	adds	r3, r3, r1
 800ca7a:	212b      	movs	r1, #43	; 0x2b
 800ca7c:	7019      	strb	r1, [r3, #0]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2b2a      	cmp	r3, #42	; 0x2a
 800ca84:	d016      	beq.n	800cab4 <_vfiprintf_r+0x14c>
 800ca86:	2100      	movs	r1, #0
 800ca88:	68eb      	ldr	r3, [r5, #12]
 800ca8a:	9f03      	ldr	r7, [sp, #12]
 800ca8c:	783a      	ldrb	r2, [r7, #0]
 800ca8e:	1c78      	adds	r0, r7, #1
 800ca90:	3a30      	subs	r2, #48	; 0x30
 800ca92:	4684      	mov	ip, r0
 800ca94:	2a09      	cmp	r2, #9
 800ca96:	d94f      	bls.n	800cb38 <_vfiprintf_r+0x1d0>
 800ca98:	2900      	cmp	r1, #0
 800ca9a:	d111      	bne.n	800cac0 <_vfiprintf_r+0x158>
 800ca9c:	e017      	b.n	800cace <_vfiprintf_r+0x166>
 800ca9e:	3701      	adds	r7, #1
 800caa0:	e7a9      	b.n	800c9f6 <_vfiprintf_r+0x8e>
 800caa2:	4b49      	ldr	r3, [pc, #292]	; (800cbc8 <_vfiprintf_r+0x260>)
 800caa4:	682a      	ldr	r2, [r5, #0]
 800caa6:	1ac0      	subs	r0, r0, r3
 800caa8:	2301      	movs	r3, #1
 800caaa:	4083      	lsls	r3, r0
 800caac:	4313      	orrs	r3, r2
 800caae:	602b      	str	r3, [r5, #0]
 800cab0:	9703      	str	r7, [sp, #12]
 800cab2:	e7cb      	b.n	800ca4c <_vfiprintf_r+0xe4>
 800cab4:	9b07      	ldr	r3, [sp, #28]
 800cab6:	1d19      	adds	r1, r3, #4
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	9107      	str	r1, [sp, #28]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	db01      	blt.n	800cac4 <_vfiprintf_r+0x15c>
 800cac0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac2:	e004      	b.n	800cace <_vfiprintf_r+0x166>
 800cac4:	425b      	negs	r3, r3
 800cac6:	60eb      	str	r3, [r5, #12]
 800cac8:	2302      	movs	r3, #2
 800caca:	4313      	orrs	r3, r2
 800cacc:	602b      	str	r3, [r5, #0]
 800cace:	783b      	ldrb	r3, [r7, #0]
 800cad0:	2b2e      	cmp	r3, #46	; 0x2e
 800cad2:	d10a      	bne.n	800caea <_vfiprintf_r+0x182>
 800cad4:	787b      	ldrb	r3, [r7, #1]
 800cad6:	2b2a      	cmp	r3, #42	; 0x2a
 800cad8:	d137      	bne.n	800cb4a <_vfiprintf_r+0x1e2>
 800cada:	9b07      	ldr	r3, [sp, #28]
 800cadc:	3702      	adds	r7, #2
 800cade:	1d1a      	adds	r2, r3, #4
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	9207      	str	r2, [sp, #28]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	db2d      	blt.n	800cb44 <_vfiprintf_r+0x1dc>
 800cae8:	9309      	str	r3, [sp, #36]	; 0x24
 800caea:	2203      	movs	r2, #3
 800caec:	7839      	ldrb	r1, [r7, #0]
 800caee:	4837      	ldr	r0, [pc, #220]	; (800cbcc <_vfiprintf_r+0x264>)
 800caf0:	f000 fab2 	bl	800d058 <memchr>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d007      	beq.n	800cb08 <_vfiprintf_r+0x1a0>
 800caf8:	4b34      	ldr	r3, [pc, #208]	; (800cbcc <_vfiprintf_r+0x264>)
 800cafa:	682a      	ldr	r2, [r5, #0]
 800cafc:	1ac0      	subs	r0, r0, r3
 800cafe:	2340      	movs	r3, #64	; 0x40
 800cb00:	4083      	lsls	r3, r0
 800cb02:	4313      	orrs	r3, r2
 800cb04:	3701      	adds	r7, #1
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	7839      	ldrb	r1, [r7, #0]
 800cb0a:	1c7b      	adds	r3, r7, #1
 800cb0c:	2206      	movs	r2, #6
 800cb0e:	4830      	ldr	r0, [pc, #192]	; (800cbd0 <_vfiprintf_r+0x268>)
 800cb10:	9303      	str	r3, [sp, #12]
 800cb12:	7629      	strb	r1, [r5, #24]
 800cb14:	f000 faa0 	bl	800d058 <memchr>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d045      	beq.n	800cba8 <_vfiprintf_r+0x240>
 800cb1c:	4b2d      	ldr	r3, [pc, #180]	; (800cbd4 <_vfiprintf_r+0x26c>)
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d127      	bne.n	800cb72 <_vfiprintf_r+0x20a>
 800cb22:	2207      	movs	r2, #7
 800cb24:	9b07      	ldr	r3, [sp, #28]
 800cb26:	3307      	adds	r3, #7
 800cb28:	4393      	bics	r3, r2
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	9307      	str	r3, [sp, #28]
 800cb2e:	696b      	ldr	r3, [r5, #20]
 800cb30:	9a04      	ldr	r2, [sp, #16]
 800cb32:	189b      	adds	r3, r3, r2
 800cb34:	616b      	str	r3, [r5, #20]
 800cb36:	e75d      	b.n	800c9f4 <_vfiprintf_r+0x8c>
 800cb38:	210a      	movs	r1, #10
 800cb3a:	434b      	muls	r3, r1
 800cb3c:	4667      	mov	r7, ip
 800cb3e:	189b      	adds	r3, r3, r2
 800cb40:	3909      	subs	r1, #9
 800cb42:	e7a3      	b.n	800ca8c <_vfiprintf_r+0x124>
 800cb44:	2301      	movs	r3, #1
 800cb46:	425b      	negs	r3, r3
 800cb48:	e7ce      	b.n	800cae8 <_vfiprintf_r+0x180>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	001a      	movs	r2, r3
 800cb4e:	3701      	adds	r7, #1
 800cb50:	606b      	str	r3, [r5, #4]
 800cb52:	7839      	ldrb	r1, [r7, #0]
 800cb54:	1c78      	adds	r0, r7, #1
 800cb56:	3930      	subs	r1, #48	; 0x30
 800cb58:	4684      	mov	ip, r0
 800cb5a:	2909      	cmp	r1, #9
 800cb5c:	d903      	bls.n	800cb66 <_vfiprintf_r+0x1fe>
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0c3      	beq.n	800caea <_vfiprintf_r+0x182>
 800cb62:	9209      	str	r2, [sp, #36]	; 0x24
 800cb64:	e7c1      	b.n	800caea <_vfiprintf_r+0x182>
 800cb66:	230a      	movs	r3, #10
 800cb68:	435a      	muls	r2, r3
 800cb6a:	4667      	mov	r7, ip
 800cb6c:	1852      	adds	r2, r2, r1
 800cb6e:	3b09      	subs	r3, #9
 800cb70:	e7ef      	b.n	800cb52 <_vfiprintf_r+0x1ea>
 800cb72:	ab07      	add	r3, sp, #28
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	0022      	movs	r2, r4
 800cb78:	0029      	movs	r1, r5
 800cb7a:	0030      	movs	r0, r6
 800cb7c:	4b16      	ldr	r3, [pc, #88]	; (800cbd8 <_vfiprintf_r+0x270>)
 800cb7e:	e000      	b.n	800cb82 <_vfiprintf_r+0x21a>
 800cb80:	bf00      	nop
 800cb82:	9004      	str	r0, [sp, #16]
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	3301      	adds	r3, #1
 800cb88:	d1d1      	bne.n	800cb2e <_vfiprintf_r+0x1c6>
 800cb8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb8c:	07db      	lsls	r3, r3, #31
 800cb8e:	d405      	bmi.n	800cb9c <_vfiprintf_r+0x234>
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	059b      	lsls	r3, r3, #22
 800cb94:	d402      	bmi.n	800cb9c <_vfiprintf_r+0x234>
 800cb96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb98:	f7ff fd6e 	bl	800c678 <__retarget_lock_release_recursive>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	065b      	lsls	r3, r3, #25
 800cba0:	d500      	bpl.n	800cba4 <_vfiprintf_r+0x23c>
 800cba2:	e70a      	b.n	800c9ba <_vfiprintf_r+0x52>
 800cba4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cba6:	e70a      	b.n	800c9be <_vfiprintf_r+0x56>
 800cba8:	ab07      	add	r3, sp, #28
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	0022      	movs	r2, r4
 800cbae:	0029      	movs	r1, r5
 800cbb0:	0030      	movs	r0, r6
 800cbb2:	4b09      	ldr	r3, [pc, #36]	; (800cbd8 <_vfiprintf_r+0x270>)
 800cbb4:	f000 f882 	bl	800ccbc <_printf_i>
 800cbb8:	e7e3      	b.n	800cb82 <_vfiprintf_r+0x21a>
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	0800d200 	.word	0x0800d200
 800cbc0:	0800d220 	.word	0x0800d220
 800cbc4:	0800d1e0 	.word	0x0800d1e0
 800cbc8:	0800d240 	.word	0x0800d240
 800cbcc:	0800d246 	.word	0x0800d246
 800cbd0:	0800d24a 	.word	0x0800d24a
 800cbd4:	00000000 	.word	0x00000000
 800cbd8:	0800c943 	.word	0x0800c943

0800cbdc <_printf_common>:
 800cbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbde:	0015      	movs	r5, r2
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	688a      	ldr	r2, [r1, #8]
 800cbe4:	690b      	ldr	r3, [r1, #16]
 800cbe6:	000c      	movs	r4, r1
 800cbe8:	9000      	str	r0, [sp, #0]
 800cbea:	4293      	cmp	r3, r2
 800cbec:	da00      	bge.n	800cbf0 <_printf_common+0x14>
 800cbee:	0013      	movs	r3, r2
 800cbf0:	0022      	movs	r2, r4
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	3243      	adds	r2, #67	; 0x43
 800cbf6:	7812      	ldrb	r2, [r2, #0]
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	d001      	beq.n	800cc00 <_printf_common+0x24>
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	602b      	str	r3, [r5, #0]
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	069b      	lsls	r3, r3, #26
 800cc04:	d502      	bpl.n	800cc0c <_printf_common+0x30>
 800cc06:	682b      	ldr	r3, [r5, #0]
 800cc08:	3302      	adds	r3, #2
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	6822      	ldr	r2, [r4, #0]
 800cc0e:	2306      	movs	r3, #6
 800cc10:	0017      	movs	r7, r2
 800cc12:	401f      	ands	r7, r3
 800cc14:	421a      	tst	r2, r3
 800cc16:	d027      	beq.n	800cc68 <_printf_common+0x8c>
 800cc18:	0023      	movs	r3, r4
 800cc1a:	3343      	adds	r3, #67	; 0x43
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	1e5a      	subs	r2, r3, #1
 800cc20:	4193      	sbcs	r3, r2
 800cc22:	6822      	ldr	r2, [r4, #0]
 800cc24:	0692      	lsls	r2, r2, #26
 800cc26:	d430      	bmi.n	800cc8a <_printf_common+0xae>
 800cc28:	0022      	movs	r2, r4
 800cc2a:	9901      	ldr	r1, [sp, #4]
 800cc2c:	9800      	ldr	r0, [sp, #0]
 800cc2e:	9e08      	ldr	r6, [sp, #32]
 800cc30:	3243      	adds	r2, #67	; 0x43
 800cc32:	47b0      	blx	r6
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d025      	beq.n	800cc84 <_printf_common+0xa8>
 800cc38:	2306      	movs	r3, #6
 800cc3a:	6820      	ldr	r0, [r4, #0]
 800cc3c:	682a      	ldr	r2, [r5, #0]
 800cc3e:	68e1      	ldr	r1, [r4, #12]
 800cc40:	2500      	movs	r5, #0
 800cc42:	4003      	ands	r3, r0
 800cc44:	2b04      	cmp	r3, #4
 800cc46:	d103      	bne.n	800cc50 <_printf_common+0x74>
 800cc48:	1a8d      	subs	r5, r1, r2
 800cc4a:	43eb      	mvns	r3, r5
 800cc4c:	17db      	asrs	r3, r3, #31
 800cc4e:	401d      	ands	r5, r3
 800cc50:	68a3      	ldr	r3, [r4, #8]
 800cc52:	6922      	ldr	r2, [r4, #16]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	dd01      	ble.n	800cc5c <_printf_common+0x80>
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	18ed      	adds	r5, r5, r3
 800cc5c:	2700      	movs	r7, #0
 800cc5e:	42bd      	cmp	r5, r7
 800cc60:	d120      	bne.n	800cca4 <_printf_common+0xc8>
 800cc62:	2000      	movs	r0, #0
 800cc64:	e010      	b.n	800cc88 <_printf_common+0xac>
 800cc66:	3701      	adds	r7, #1
 800cc68:	68e3      	ldr	r3, [r4, #12]
 800cc6a:	682a      	ldr	r2, [r5, #0]
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	42bb      	cmp	r3, r7
 800cc70:	ddd2      	ble.n	800cc18 <_printf_common+0x3c>
 800cc72:	0022      	movs	r2, r4
 800cc74:	2301      	movs	r3, #1
 800cc76:	9901      	ldr	r1, [sp, #4]
 800cc78:	9800      	ldr	r0, [sp, #0]
 800cc7a:	9e08      	ldr	r6, [sp, #32]
 800cc7c:	3219      	adds	r2, #25
 800cc7e:	47b0      	blx	r6
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d1f0      	bne.n	800cc66 <_printf_common+0x8a>
 800cc84:	2001      	movs	r0, #1
 800cc86:	4240      	negs	r0, r0
 800cc88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc8a:	2030      	movs	r0, #48	; 0x30
 800cc8c:	18e1      	adds	r1, r4, r3
 800cc8e:	3143      	adds	r1, #67	; 0x43
 800cc90:	7008      	strb	r0, [r1, #0]
 800cc92:	0021      	movs	r1, r4
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	3145      	adds	r1, #69	; 0x45
 800cc98:	7809      	ldrb	r1, [r1, #0]
 800cc9a:	18a2      	adds	r2, r4, r2
 800cc9c:	3243      	adds	r2, #67	; 0x43
 800cc9e:	3302      	adds	r3, #2
 800cca0:	7011      	strb	r1, [r2, #0]
 800cca2:	e7c1      	b.n	800cc28 <_printf_common+0x4c>
 800cca4:	0022      	movs	r2, r4
 800cca6:	2301      	movs	r3, #1
 800cca8:	9901      	ldr	r1, [sp, #4]
 800ccaa:	9800      	ldr	r0, [sp, #0]
 800ccac:	9e08      	ldr	r6, [sp, #32]
 800ccae:	321a      	adds	r2, #26
 800ccb0:	47b0      	blx	r6
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	d0e6      	beq.n	800cc84 <_printf_common+0xa8>
 800ccb6:	3701      	adds	r7, #1
 800ccb8:	e7d1      	b.n	800cc5e <_printf_common+0x82>
	...

0800ccbc <_printf_i>:
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	b08b      	sub	sp, #44	; 0x2c
 800ccc0:	9206      	str	r2, [sp, #24]
 800ccc2:	000a      	movs	r2, r1
 800ccc4:	3243      	adds	r2, #67	; 0x43
 800ccc6:	9307      	str	r3, [sp, #28]
 800ccc8:	9005      	str	r0, [sp, #20]
 800ccca:	9204      	str	r2, [sp, #16]
 800cccc:	7e0a      	ldrb	r2, [r1, #24]
 800ccce:	000c      	movs	r4, r1
 800ccd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccd2:	2a78      	cmp	r2, #120	; 0x78
 800ccd4:	d807      	bhi.n	800cce6 <_printf_i+0x2a>
 800ccd6:	2a62      	cmp	r2, #98	; 0x62
 800ccd8:	d809      	bhi.n	800ccee <_printf_i+0x32>
 800ccda:	2a00      	cmp	r2, #0
 800ccdc:	d100      	bne.n	800cce0 <_printf_i+0x24>
 800ccde:	e0c1      	b.n	800ce64 <_printf_i+0x1a8>
 800cce0:	2a58      	cmp	r2, #88	; 0x58
 800cce2:	d100      	bne.n	800cce6 <_printf_i+0x2a>
 800cce4:	e08c      	b.n	800ce00 <_printf_i+0x144>
 800cce6:	0026      	movs	r6, r4
 800cce8:	3642      	adds	r6, #66	; 0x42
 800ccea:	7032      	strb	r2, [r6, #0]
 800ccec:	e022      	b.n	800cd34 <_printf_i+0x78>
 800ccee:	0010      	movs	r0, r2
 800ccf0:	3863      	subs	r0, #99	; 0x63
 800ccf2:	2815      	cmp	r0, #21
 800ccf4:	d8f7      	bhi.n	800cce6 <_printf_i+0x2a>
 800ccf6:	f7fd fa07 	bl	800a108 <__gnu_thumb1_case_shi>
 800ccfa:	0016      	.short	0x0016
 800ccfc:	fff6001f 	.word	0xfff6001f
 800cd00:	fff6fff6 	.word	0xfff6fff6
 800cd04:	001ffff6 	.word	0x001ffff6
 800cd08:	fff6fff6 	.word	0xfff6fff6
 800cd0c:	fff6fff6 	.word	0xfff6fff6
 800cd10:	003600a8 	.word	0x003600a8
 800cd14:	fff6009a 	.word	0xfff6009a
 800cd18:	00b9fff6 	.word	0x00b9fff6
 800cd1c:	0036fff6 	.word	0x0036fff6
 800cd20:	fff6fff6 	.word	0xfff6fff6
 800cd24:	009e      	.short	0x009e
 800cd26:	0026      	movs	r6, r4
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	3642      	adds	r6, #66	; 0x42
 800cd2c:	1d11      	adds	r1, r2, #4
 800cd2e:	6019      	str	r1, [r3, #0]
 800cd30:	6813      	ldr	r3, [r2, #0]
 800cd32:	7033      	strb	r3, [r6, #0]
 800cd34:	2301      	movs	r3, #1
 800cd36:	e0a7      	b.n	800ce88 <_printf_i+0x1cc>
 800cd38:	6808      	ldr	r0, [r1, #0]
 800cd3a:	6819      	ldr	r1, [r3, #0]
 800cd3c:	1d0a      	adds	r2, r1, #4
 800cd3e:	0605      	lsls	r5, r0, #24
 800cd40:	d50b      	bpl.n	800cd5a <_printf_i+0x9e>
 800cd42:	680d      	ldr	r5, [r1, #0]
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	da03      	bge.n	800cd52 <_printf_i+0x96>
 800cd4a:	232d      	movs	r3, #45	; 0x2d
 800cd4c:	9a04      	ldr	r2, [sp, #16]
 800cd4e:	426d      	negs	r5, r5
 800cd50:	7013      	strb	r3, [r2, #0]
 800cd52:	4b61      	ldr	r3, [pc, #388]	; (800ced8 <_printf_i+0x21c>)
 800cd54:	270a      	movs	r7, #10
 800cd56:	9303      	str	r3, [sp, #12]
 800cd58:	e01b      	b.n	800cd92 <_printf_i+0xd6>
 800cd5a:	680d      	ldr	r5, [r1, #0]
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	0641      	lsls	r1, r0, #25
 800cd60:	d5f1      	bpl.n	800cd46 <_printf_i+0x8a>
 800cd62:	b22d      	sxth	r5, r5
 800cd64:	e7ef      	b.n	800cd46 <_printf_i+0x8a>
 800cd66:	680d      	ldr	r5, [r1, #0]
 800cd68:	6819      	ldr	r1, [r3, #0]
 800cd6a:	1d08      	adds	r0, r1, #4
 800cd6c:	6018      	str	r0, [r3, #0]
 800cd6e:	062e      	lsls	r6, r5, #24
 800cd70:	d501      	bpl.n	800cd76 <_printf_i+0xba>
 800cd72:	680d      	ldr	r5, [r1, #0]
 800cd74:	e003      	b.n	800cd7e <_printf_i+0xc2>
 800cd76:	066d      	lsls	r5, r5, #25
 800cd78:	d5fb      	bpl.n	800cd72 <_printf_i+0xb6>
 800cd7a:	680d      	ldr	r5, [r1, #0]
 800cd7c:	b2ad      	uxth	r5, r5
 800cd7e:	4b56      	ldr	r3, [pc, #344]	; (800ced8 <_printf_i+0x21c>)
 800cd80:	2708      	movs	r7, #8
 800cd82:	9303      	str	r3, [sp, #12]
 800cd84:	2a6f      	cmp	r2, #111	; 0x6f
 800cd86:	d000      	beq.n	800cd8a <_printf_i+0xce>
 800cd88:	3702      	adds	r7, #2
 800cd8a:	0023      	movs	r3, r4
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	3343      	adds	r3, #67	; 0x43
 800cd90:	701a      	strb	r2, [r3, #0]
 800cd92:	6863      	ldr	r3, [r4, #4]
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	db03      	blt.n	800cda2 <_printf_i+0xe6>
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	6821      	ldr	r1, [r4, #0]
 800cd9e:	4391      	bics	r1, r2
 800cda0:	6021      	str	r1, [r4, #0]
 800cda2:	2d00      	cmp	r5, #0
 800cda4:	d102      	bne.n	800cdac <_printf_i+0xf0>
 800cda6:	9e04      	ldr	r6, [sp, #16]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00c      	beq.n	800cdc6 <_printf_i+0x10a>
 800cdac:	9e04      	ldr	r6, [sp, #16]
 800cdae:	0028      	movs	r0, r5
 800cdb0:	0039      	movs	r1, r7
 800cdb2:	f7fd fa39 	bl	800a228 <__aeabi_uidivmod>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	3e01      	subs	r6, #1
 800cdba:	5c5b      	ldrb	r3, [r3, r1]
 800cdbc:	7033      	strb	r3, [r6, #0]
 800cdbe:	002b      	movs	r3, r5
 800cdc0:	0005      	movs	r5, r0
 800cdc2:	429f      	cmp	r7, r3
 800cdc4:	d9f3      	bls.n	800cdae <_printf_i+0xf2>
 800cdc6:	2f08      	cmp	r7, #8
 800cdc8:	d109      	bne.n	800cdde <_printf_i+0x122>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	07db      	lsls	r3, r3, #31
 800cdce:	d506      	bpl.n	800cdde <_printf_i+0x122>
 800cdd0:	6863      	ldr	r3, [r4, #4]
 800cdd2:	6922      	ldr	r2, [r4, #16]
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	dc02      	bgt.n	800cdde <_printf_i+0x122>
 800cdd8:	2330      	movs	r3, #48	; 0x30
 800cdda:	3e01      	subs	r6, #1
 800cddc:	7033      	strb	r3, [r6, #0]
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	1b9b      	subs	r3, r3, r6
 800cde2:	6123      	str	r3, [r4, #16]
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	0021      	movs	r1, r4
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	9805      	ldr	r0, [sp, #20]
 800cdec:	9b06      	ldr	r3, [sp, #24]
 800cdee:	aa09      	add	r2, sp, #36	; 0x24
 800cdf0:	f7ff fef4 	bl	800cbdc <_printf_common>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d14c      	bne.n	800ce92 <_printf_i+0x1d6>
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	4240      	negs	r0, r0
 800cdfc:	b00b      	add	sp, #44	; 0x2c
 800cdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce00:	3145      	adds	r1, #69	; 0x45
 800ce02:	700a      	strb	r2, [r1, #0]
 800ce04:	4a34      	ldr	r2, [pc, #208]	; (800ced8 <_printf_i+0x21c>)
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	6821      	ldr	r1, [r4, #0]
 800ce0c:	ca20      	ldmia	r2!, {r5}
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	0608      	lsls	r0, r1, #24
 800ce12:	d516      	bpl.n	800ce42 <_printf_i+0x186>
 800ce14:	07cb      	lsls	r3, r1, #31
 800ce16:	d502      	bpl.n	800ce1e <_printf_i+0x162>
 800ce18:	2320      	movs	r3, #32
 800ce1a:	4319      	orrs	r1, r3
 800ce1c:	6021      	str	r1, [r4, #0]
 800ce1e:	2710      	movs	r7, #16
 800ce20:	2d00      	cmp	r5, #0
 800ce22:	d1b2      	bne.n	800cd8a <_printf_i+0xce>
 800ce24:	2320      	movs	r3, #32
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	439a      	bics	r2, r3
 800ce2a:	6022      	str	r2, [r4, #0]
 800ce2c:	e7ad      	b.n	800cd8a <_printf_i+0xce>
 800ce2e:	2220      	movs	r2, #32
 800ce30:	6809      	ldr	r1, [r1, #0]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	6022      	str	r2, [r4, #0]
 800ce36:	0022      	movs	r2, r4
 800ce38:	2178      	movs	r1, #120	; 0x78
 800ce3a:	3245      	adds	r2, #69	; 0x45
 800ce3c:	7011      	strb	r1, [r2, #0]
 800ce3e:	4a27      	ldr	r2, [pc, #156]	; (800cedc <_printf_i+0x220>)
 800ce40:	e7e1      	b.n	800ce06 <_printf_i+0x14a>
 800ce42:	0648      	lsls	r0, r1, #25
 800ce44:	d5e6      	bpl.n	800ce14 <_printf_i+0x158>
 800ce46:	b2ad      	uxth	r5, r5
 800ce48:	e7e4      	b.n	800ce14 <_printf_i+0x158>
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	680d      	ldr	r5, [r1, #0]
 800ce4e:	1d10      	adds	r0, r2, #4
 800ce50:	6949      	ldr	r1, [r1, #20]
 800ce52:	6018      	str	r0, [r3, #0]
 800ce54:	6813      	ldr	r3, [r2, #0]
 800ce56:	062e      	lsls	r6, r5, #24
 800ce58:	d501      	bpl.n	800ce5e <_printf_i+0x1a2>
 800ce5a:	6019      	str	r1, [r3, #0]
 800ce5c:	e002      	b.n	800ce64 <_printf_i+0x1a8>
 800ce5e:	066d      	lsls	r5, r5, #25
 800ce60:	d5fb      	bpl.n	800ce5a <_printf_i+0x19e>
 800ce62:	8019      	strh	r1, [r3, #0]
 800ce64:	2300      	movs	r3, #0
 800ce66:	9e04      	ldr	r6, [sp, #16]
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	e7bb      	b.n	800cde4 <_printf_i+0x128>
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	1d11      	adds	r1, r2, #4
 800ce70:	6019      	str	r1, [r3, #0]
 800ce72:	6816      	ldr	r6, [r2, #0]
 800ce74:	2100      	movs	r1, #0
 800ce76:	0030      	movs	r0, r6
 800ce78:	6862      	ldr	r2, [r4, #4]
 800ce7a:	f000 f8ed 	bl	800d058 <memchr>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d001      	beq.n	800ce86 <_printf_i+0x1ca>
 800ce82:	1b80      	subs	r0, r0, r6
 800ce84:	6060      	str	r0, [r4, #4]
 800ce86:	6863      	ldr	r3, [r4, #4]
 800ce88:	6123      	str	r3, [r4, #16]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9a04      	ldr	r2, [sp, #16]
 800ce8e:	7013      	strb	r3, [r2, #0]
 800ce90:	e7a8      	b.n	800cde4 <_printf_i+0x128>
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	0032      	movs	r2, r6
 800ce96:	9906      	ldr	r1, [sp, #24]
 800ce98:	9805      	ldr	r0, [sp, #20]
 800ce9a:	9d07      	ldr	r5, [sp, #28]
 800ce9c:	47a8      	blx	r5
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d0aa      	beq.n	800cdf8 <_printf_i+0x13c>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	079b      	lsls	r3, r3, #30
 800cea6:	d415      	bmi.n	800ced4 <_printf_i+0x218>
 800cea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceaa:	68e0      	ldr	r0, [r4, #12]
 800ceac:	4298      	cmp	r0, r3
 800ceae:	daa5      	bge.n	800cdfc <_printf_i+0x140>
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	e7a3      	b.n	800cdfc <_printf_i+0x140>
 800ceb4:	0022      	movs	r2, r4
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	9906      	ldr	r1, [sp, #24]
 800ceba:	9805      	ldr	r0, [sp, #20]
 800cebc:	9e07      	ldr	r6, [sp, #28]
 800cebe:	3219      	adds	r2, #25
 800cec0:	47b0      	blx	r6
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	d098      	beq.n	800cdf8 <_printf_i+0x13c>
 800cec6:	3501      	adds	r5, #1
 800cec8:	68e3      	ldr	r3, [r4, #12]
 800ceca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	42ab      	cmp	r3, r5
 800ced0:	dcf0      	bgt.n	800ceb4 <_printf_i+0x1f8>
 800ced2:	e7e9      	b.n	800cea8 <_printf_i+0x1ec>
 800ced4:	2500      	movs	r5, #0
 800ced6:	e7f7      	b.n	800cec8 <_printf_i+0x20c>
 800ced8:	0800d251 	.word	0x0800d251
 800cedc:	0800d262 	.word	0x0800d262

0800cee0 <_sbrk_r>:
 800cee0:	2300      	movs	r3, #0
 800cee2:	b570      	push	{r4, r5, r6, lr}
 800cee4:	4d06      	ldr	r5, [pc, #24]	; (800cf00 <_sbrk_r+0x20>)
 800cee6:	0004      	movs	r4, r0
 800cee8:	0008      	movs	r0, r1
 800ceea:	602b      	str	r3, [r5, #0]
 800ceec:	f7fd fca6 	bl	800a83c <_sbrk>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d103      	bne.n	800cefc <_sbrk_r+0x1c>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d000      	beq.n	800cefc <_sbrk_r+0x1c>
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	bd70      	pop	{r4, r5, r6, pc}
 800cefe:	46c0      	nop			; (mov r8, r8)
 800cf00:	20000268 	.word	0x20000268

0800cf04 <__sread>:
 800cf04:	b570      	push	{r4, r5, r6, lr}
 800cf06:	000c      	movs	r4, r1
 800cf08:	250e      	movs	r5, #14
 800cf0a:	5f49      	ldrsh	r1, [r1, r5]
 800cf0c:	f000 f8c0 	bl	800d090 <_read_r>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	db03      	blt.n	800cf1c <__sread+0x18>
 800cf14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cf16:	181b      	adds	r3, r3, r0
 800cf18:	6563      	str	r3, [r4, #84]	; 0x54
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	4a02      	ldr	r2, [pc, #8]	; (800cf28 <__sread+0x24>)
 800cf20:	4013      	ands	r3, r2
 800cf22:	81a3      	strh	r3, [r4, #12]
 800cf24:	e7f9      	b.n	800cf1a <__sread+0x16>
 800cf26:	46c0      	nop			; (mov r8, r8)
 800cf28:	ffffefff 	.word	0xffffefff

0800cf2c <__swrite>:
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	001f      	movs	r7, r3
 800cf30:	898b      	ldrh	r3, [r1, #12]
 800cf32:	0005      	movs	r5, r0
 800cf34:	000c      	movs	r4, r1
 800cf36:	0016      	movs	r6, r2
 800cf38:	05db      	lsls	r3, r3, #23
 800cf3a:	d505      	bpl.n	800cf48 <__swrite+0x1c>
 800cf3c:	230e      	movs	r3, #14
 800cf3e:	5ec9      	ldrsh	r1, [r1, r3]
 800cf40:	2200      	movs	r2, #0
 800cf42:	2302      	movs	r3, #2
 800cf44:	f000 f874 	bl	800d030 <_lseek_r>
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	4a05      	ldr	r2, [pc, #20]	; (800cf60 <__swrite+0x34>)
 800cf4c:	0028      	movs	r0, r5
 800cf4e:	4013      	ands	r3, r2
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	0032      	movs	r2, r6
 800cf54:	230e      	movs	r3, #14
 800cf56:	5ee1      	ldrsh	r1, [r4, r3]
 800cf58:	003b      	movs	r3, r7
 800cf5a:	f000 f81f 	bl	800cf9c <_write_r>
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf60:	ffffefff 	.word	0xffffefff

0800cf64 <__sseek>:
 800cf64:	b570      	push	{r4, r5, r6, lr}
 800cf66:	000c      	movs	r4, r1
 800cf68:	250e      	movs	r5, #14
 800cf6a:	5f49      	ldrsh	r1, [r1, r5]
 800cf6c:	f000 f860 	bl	800d030 <_lseek_r>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	1c42      	adds	r2, r0, #1
 800cf74:	d103      	bne.n	800cf7e <__sseek+0x1a>
 800cf76:	4a05      	ldr	r2, [pc, #20]	; (800cf8c <__sseek+0x28>)
 800cf78:	4013      	ands	r3, r2
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	bd70      	pop	{r4, r5, r6, pc}
 800cf7e:	2280      	movs	r2, #128	; 0x80
 800cf80:	0152      	lsls	r2, r2, #5
 800cf82:	4313      	orrs	r3, r2
 800cf84:	81a3      	strh	r3, [r4, #12]
 800cf86:	6560      	str	r0, [r4, #84]	; 0x54
 800cf88:	e7f8      	b.n	800cf7c <__sseek+0x18>
 800cf8a:	46c0      	nop			; (mov r8, r8)
 800cf8c:	ffffefff 	.word	0xffffefff

0800cf90 <__sclose>:
 800cf90:	b510      	push	{r4, lr}
 800cf92:	230e      	movs	r3, #14
 800cf94:	5ec9      	ldrsh	r1, [r1, r3]
 800cf96:	f000 f815 	bl	800cfc4 <_close_r>
 800cf9a:	bd10      	pop	{r4, pc}

0800cf9c <_write_r>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	0004      	movs	r4, r0
 800cfa0:	0008      	movs	r0, r1
 800cfa2:	0011      	movs	r1, r2
 800cfa4:	001a      	movs	r2, r3
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	4d05      	ldr	r5, [pc, #20]	; (800cfc0 <_write_r+0x24>)
 800cfaa:	602b      	str	r3, [r5, #0]
 800cfac:	f7fd fbfd 	bl	800a7aa <_write>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d103      	bne.n	800cfbc <_write_r+0x20>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d000      	beq.n	800cfbc <_write_r+0x20>
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	20000268 	.word	0x20000268

0800cfc4 <_close_r>:
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	b570      	push	{r4, r5, r6, lr}
 800cfc8:	4d06      	ldr	r5, [pc, #24]	; (800cfe4 <_close_r+0x20>)
 800cfca:	0004      	movs	r4, r0
 800cfcc:	0008      	movs	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7fd fc07 	bl	800a7e2 <_close>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d103      	bne.n	800cfe0 <_close_r+0x1c>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d000      	beq.n	800cfe0 <_close_r+0x1c>
 800cfde:	6023      	str	r3, [r4, #0]
 800cfe0:	bd70      	pop	{r4, r5, r6, pc}
 800cfe2:	46c0      	nop			; (mov r8, r8)
 800cfe4:	20000268 	.word	0x20000268

0800cfe8 <_fstat_r>:
 800cfe8:	2300      	movs	r3, #0
 800cfea:	b570      	push	{r4, r5, r6, lr}
 800cfec:	4d06      	ldr	r5, [pc, #24]	; (800d008 <_fstat_r+0x20>)
 800cfee:	0004      	movs	r4, r0
 800cff0:	0008      	movs	r0, r1
 800cff2:	0011      	movs	r1, r2
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	f7fd fbfe 	bl	800a7f6 <_fstat>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	d103      	bne.n	800d006 <_fstat_r+0x1e>
 800cffe:	682b      	ldr	r3, [r5, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d000      	beq.n	800d006 <_fstat_r+0x1e>
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	20000268 	.word	0x20000268

0800d00c <_isatty_r>:
 800d00c:	2300      	movs	r3, #0
 800d00e:	b570      	push	{r4, r5, r6, lr}
 800d010:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_isatty_r+0x20>)
 800d012:	0004      	movs	r4, r0
 800d014:	0008      	movs	r0, r1
 800d016:	602b      	str	r3, [r5, #0]
 800d018:	f7fd fbfb 	bl	800a812 <_isatty>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d103      	bne.n	800d028 <_isatty_r+0x1c>
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d000      	beq.n	800d028 <_isatty_r+0x1c>
 800d026:	6023      	str	r3, [r4, #0]
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	46c0      	nop			; (mov r8, r8)
 800d02c:	20000268 	.word	0x20000268

0800d030 <_lseek_r>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	0004      	movs	r4, r0
 800d034:	0008      	movs	r0, r1
 800d036:	0011      	movs	r1, r2
 800d038:	001a      	movs	r2, r3
 800d03a:	2300      	movs	r3, #0
 800d03c:	4d05      	ldr	r5, [pc, #20]	; (800d054 <_lseek_r+0x24>)
 800d03e:	602b      	str	r3, [r5, #0]
 800d040:	f7fd fbf0 	bl	800a824 <_lseek>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d103      	bne.n	800d050 <_lseek_r+0x20>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d000      	beq.n	800d050 <_lseek_r+0x20>
 800d04e:	6023      	str	r3, [r4, #0]
 800d050:	bd70      	pop	{r4, r5, r6, pc}
 800d052:	46c0      	nop			; (mov r8, r8)
 800d054:	20000268 	.word	0x20000268

0800d058 <memchr>:
 800d058:	b2c9      	uxtb	r1, r1
 800d05a:	1882      	adds	r2, r0, r2
 800d05c:	4290      	cmp	r0, r2
 800d05e:	d101      	bne.n	800d064 <memchr+0xc>
 800d060:	2000      	movs	r0, #0
 800d062:	4770      	bx	lr
 800d064:	7803      	ldrb	r3, [r0, #0]
 800d066:	428b      	cmp	r3, r1
 800d068:	d0fb      	beq.n	800d062 <memchr+0xa>
 800d06a:	3001      	adds	r0, #1
 800d06c:	e7f6      	b.n	800d05c <memchr+0x4>
	...

0800d070 <__malloc_lock>:
 800d070:	b510      	push	{r4, lr}
 800d072:	4802      	ldr	r0, [pc, #8]	; (800d07c <__malloc_lock+0xc>)
 800d074:	f7ff faff 	bl	800c676 <__retarget_lock_acquire_recursive>
 800d078:	bd10      	pop	{r4, pc}
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	2000025c 	.word	0x2000025c

0800d080 <__malloc_unlock>:
 800d080:	b510      	push	{r4, lr}
 800d082:	4802      	ldr	r0, [pc, #8]	; (800d08c <__malloc_unlock+0xc>)
 800d084:	f7ff faf8 	bl	800c678 <__retarget_lock_release_recursive>
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	46c0      	nop			; (mov r8, r8)
 800d08c:	2000025c 	.word	0x2000025c

0800d090 <_read_r>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	0004      	movs	r4, r0
 800d094:	0008      	movs	r0, r1
 800d096:	0011      	movs	r1, r2
 800d098:	001a      	movs	r2, r3
 800d09a:	2300      	movs	r3, #0
 800d09c:	4d05      	ldr	r5, [pc, #20]	; (800d0b4 <_read_r+0x24>)
 800d09e:	602b      	str	r3, [r5, #0]
 800d0a0:	f7fd fb66 	bl	800a770 <_read>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d103      	bne.n	800d0b0 <_read_r+0x20>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d000      	beq.n	800d0b0 <_read_r+0x20>
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	bd70      	pop	{r4, r5, r6, pc}
 800d0b2:	46c0      	nop			; (mov r8, r8)
 800d0b4:	20000268 	.word	0x20000268

0800d0b8 <_init>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	46c0      	nop			; (mov r8, r8)
 800d0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0be:	bc08      	pop	{r3}
 800d0c0:	469e      	mov	lr, r3
 800d0c2:	4770      	bx	lr

0800d0c4 <_fini>:
 800d0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ca:	bc08      	pop	{r3}
 800d0cc:	469e      	mov	lr, r3
 800d0ce:	4770      	bx	lr
