
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed8  08003ed8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ed8  08003ed8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ed8  08003ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000070  08003f50  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08003f50  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009874  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e73  00000000  00000000  0002990c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117b4  00000000  00000000  0002c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b45f  00000000  00000000  0003decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062b35  00000000  00000000  0004932b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000abe60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000233c  00000000  00000000  000abeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c7c 	.word	0x08003c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c7c 	.word	0x08003c7c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <jump_user_app>:
@Tarih: 16.10.2022
*/

#include "bootloader.h"

void jump_user_app(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

   //Uygulamaya gecmek icin fonksiyon isaretcisi
	MY_PRINTF("Jumping to application: Address: %#x\r\n",FLASH_PAGE20_BASE_ADDRESS + 4);
 800023a:	4a10      	ldr	r2, [pc, #64]	; (800027c <jump_user_app+0x48>)
 800023c:	4b10      	ldr	r3, [pc, #64]	; (8000280 <jump_user_app+0x4c>)
 800023e:	0011      	movs	r1, r2
 8000240:	0018      	movs	r0, r3
 8000242:	f002 fcc7 	bl	8002bd4 <iprintf>
	HAL_Delay(500);
 8000246:	23fa      	movs	r3, #250	; 0xfa
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f000 ff5a 	bl	8001104 <HAL_Delay>
    void (*jumpApplication)(void);

    //Gecilecek uygulamanin stack i ayarlaniyor
    uint32_t msp_value = *(volatile uint32_t *)FLASH_PAGE20_BASE_ADDRESS;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <jump_user_app+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	60fb      	str	r3, [r7, #12]

    //SCB->VTOR = FLASH_PAGE20_BASE_ADDRESS;

    //Base adresten 4 fazlasi uygulamanin reset handler i elde ediliyor.
    //Orada startup kodu ve ardindan main e gecis var.
    uint32_t resetHandlerAddress = *(volatile uint32_t *) (FLASH_PAGE20_BASE_ADDRESS + 4);
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <jump_user_app+0x48>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	60bb      	str	r3, [r7, #8]

    //++resetHandlerAddress;

    jumpApplication = (void*) resetHandlerAddress;
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	f383 8808 	msr	MSP, r3
}
 800026e:	46c0      	nop			; (mov r8, r8)

    //Gecilecek uygulamanin stack i ayarlaniyor
    __set_MSP(msp_value);

    //Uygulamaya geciliyor
    jumpApplication();
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4798      	blx	r3

}
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	b004      	add	sp, #16
 800027a:	bd80      	pop	{r7, pc}
 800027c:	0800a004 	.word	0x0800a004
 8000280:	08003c94 	.word	0x08003c94
 8000284:	0800a000 	.word	0x0800a000

08000288 <flash_erase_handler>:

void flash_erase_handler(uint32_t pageAddress){
 8000288:	b5b0      	push	{r4, r5, r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef flashHandle;
	uint32_t pageError;
	HAL_StatusTypeDef status;

	if(pageAddress == (uint8_t) 0xffffffff)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2bff      	cmp	r3, #255	; 0xff
 8000294:	d104      	bne.n	80002a0 <flash_erase_handler+0x18>
	{
		flashHandle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000296:	2310      	movs	r3, #16
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	2201      	movs	r2, #1
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	e01a      	b.n	80002d6 <flash_erase_handler+0x4e>
	}
	else
	{

		//Silinmeye baslanacak page numarasi bulunuyor. Her page 2KB
		uint8_t pageNumber = (uint8_t)((pageAddress - 0x8000000UL)/2048);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	22f8      	movs	r2, #248	; 0xf8
 80002a4:	0612      	lsls	r2, r2, #24
 80002a6:	4694      	mov	ip, r2
 80002a8:	4463      	add	r3, ip
 80002aa:	0ada      	lsrs	r2, r3, #11
 80002ac:	211f      	movs	r1, #31
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	701a      	strb	r2, [r3, #0]

		uint8_t pageCount = 64 - pageNumber; //Silinecek page sayisinin bulunmasi (STM32F070RB de 64 adet page var.)
 80002b2:	201e      	movs	r0, #30
 80002b4:	183b      	adds	r3, r7, r0
 80002b6:	187a      	adds	r2, r7, r1
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	1a8a      	subs	r2, r1, r2
 80002be:	701a      	strb	r2, [r3, #0]
		flashHandle.TypeErase = FLASH_TYPEERASE_PAGES;
 80002c0:	2110      	movs	r1, #16
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
		flashHandle.PageAddress = pageAddress; 	// Silmeye baslanacak page
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	605a      	str	r2, [r3, #4]
		flashHandle.NbPages = pageCount;	// Silinecek page sayisi
 80002ce:	183b      	adds	r3, r7, r0
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	609a      	str	r2, [r3, #8]
	}

	//Flash register erisim
	HAL_FLASH_Unlock();
 80002d6:	f001 f8ad 	bl	8001434 <HAL_FLASH_Unlock>
	status = HAL_FLASHEx_Erase(&flashHandle, &pageError);
 80002da:	251d      	movs	r5, #29
 80002dc:	197c      	adds	r4, r7, r5
 80002de:	230c      	movs	r3, #12
 80002e0:	18fa      	adds	r2, r7, r3
 80002e2:	2310      	movs	r3, #16
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f963 	bl	80015b4 <HAL_FLASHEx_Erase>
 80002ee:	0003      	movs	r3, r0
 80002f0:	7023      	strb	r3, [r4, #0]
	HAL_FLASH_Lock();
 80002f2:	f001 f8c5 	bl	8001480 <HAL_FLASH_Lock>

	MY_PRINTF("Flash Erase Status: %d\r\n",status);
 80002f6:	197b      	adds	r3, r7, r5
 80002f8:	781a      	ldrb	r2, [r3, #0]
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <flash_erase_handler+0x84>)
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f002 fc68 	bl	8002bd4 <iprintf>
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b008      	add	sp, #32
 800030a:	bdb0      	pop	{r4, r5, r7, pc}
 800030c:	08003cbc 	.word	0x08003cbc

08000310 <flash_write_handler>:

void flash_write_handler(uint32_t data, uint32_t memAddress){
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	b087      	sub	sp, #28
 8000314:	af02      	add	r7, sp, #8
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef status;
	HAL_StatusTypeDef status2;

	status2 = HAL_FLASH_Unlock();
 800031a:	230f      	movs	r3, #15
 800031c:	18fe      	adds	r6, r7, r3
 800031e:	f001 f889 	bl	8001434 <HAL_FLASH_Unlock>
 8000322:	0003      	movs	r3, r0
 8000324:	7033      	strb	r3, [r6, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000326:	2390      	movs	r3, #144	; 0x90
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	2201      	movs	r2, #1
 800032c:	2120      	movs	r1, #32
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fb79 	bl	8001a26 <HAL_GPIO_WritePin>
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memAddress, data);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	001c      	movs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	001d      	movs	r5, r3
 800033c:	220e      	movs	r2, #14
 800033e:	18be      	adds	r6, r7, r2
 8000340:	6839      	ldr	r1, [r7, #0]
 8000342:	0022      	movs	r2, r4
 8000344:	002b      	movs	r3, r5
 8000346:	2002      	movs	r0, #2
 8000348:	f000 ffde 	bl	8001308 <HAL_FLASH_Program>
 800034c:	0003      	movs	r3, r0
 800034e:	7033      	strb	r3, [r6, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000350:	2390      	movs	r3, #144	; 0x90
 8000352:	05db      	lsls	r3, r3, #23
 8000354:	2200      	movs	r2, #0
 8000356:	2120      	movs	r1, #32
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fb64 	bl	8001a26 <HAL_GPIO_WritePin>
	MY_PRINTF("Flash Write: Address:%#x Data:%#x Status Unlock: %d Status: %d\r\n",memAddress,data,status2,status);
 800035e:	230f      	movs	r3, #15
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781c      	ldrb	r4, [r3, #0]
 8000364:	220e      	movs	r2, #14
 8000366:	18bb      	adds	r3, r7, r2
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	6839      	ldr	r1, [r7, #0]
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <flash_write_handler+0x74>)
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	0023      	movs	r3, r4
 8000374:	f002 fc2e 	bl	8002bd4 <iprintf>
	HAL_FLASH_Lock();
 8000378:	f001 f882 	bl	8001480 <HAL_FLASH_Lock>
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b005      	add	sp, #20
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000384:	08003cd8 	.word	0x08003cd8

08000388 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 100);
 8000390:	1d39      	adds	r1, r7, #4
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <__io_putchar+0x20>)
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	2201      	movs	r2, #1
 8000398:	f002 f828 	bl	80023ec <HAL_UART_Transmit>
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	0018      	movs	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b002      	add	sp, #8
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	20000110 	.word	0x20000110

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	packet_struct_t Rxpacket;
	receive_data_t sendData;
	sendData.data_u32 = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b6:	f000 fe41 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ba:	f000 f84b 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003be:	f000 f8f7 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003c2:	f000 f88f 	bl	80004e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80003c6:	f000 f8c3 	bl	8000550 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //Acilista butona basilmassa bootlader direk uygulamaya gecer
  if (HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_SET)
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	019b      	lsls	r3, r3, #6
 80003ce:	4a1f      	ldr	r2, [pc, #124]	; (800044c <main+0xa0>)
 80003d0:	0019      	movs	r1, r3
 80003d2:	0010      	movs	r0, r2
 80003d4:	f001 fb0a 	bl	80019ec <HAL_GPIO_ReadPin>
 80003d8:	0003      	movs	r3, r0
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d101      	bne.n	80003e2 <main+0x36>
  {
	  jump_user_app();
 80003de:	f7ff ff29 	bl	8000234 <jump_user_app>
  }

  MY_PRINTF("Welcome Bootloader...\r\n");
 80003e2:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <main+0xa4>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f002 fc81 	bl	8002cec <puts>
  while (1)
  {

	//Parser ve usart haberlesme calistiriliyor
	//Paket dogru ise komutlara gore islem icra ediliyor.
	if(communication_layer_handler(&Rxpacket, &sendData) == PROCESS_OK)
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	2408      	movs	r4, #8
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 f94b 	bl	800068e <communication_layer_handler>
 80003f8:	0003      	movs	r3, r0
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	d1f5      	bne.n	80003ea <main+0x3e>
	{
		switch (Rxpacket.commandNumber.all)
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	885b      	ldrh	r3, [r3, #2]
 8000402:	2b04      	cmp	r3, #4
 8000404:	d005      	beq.n	8000412 <main+0x66>
 8000406:	dc18      	bgt.n	800043a <main+0x8e>
 8000408:	2b02      	cmp	r3, #2
 800040a:	d009      	beq.n	8000420 <main+0x74>
 800040c:	2b03      	cmp	r3, #3
 800040e:	d011      	beq.n	8000434 <main+0x88>
 8000410:	e013      	b.n	800043a <main+0x8e>
		{
			case BL_FLASH_ERASE:
				flash_erase_handler(Rxpacket.commandAddress.all); //Silme islemi icin flash page adresi gonderiliyor
 8000412:	2308      	movs	r3, #8
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	0018      	movs	r0, r3
 800041a:	f7ff ff35 	bl	8000288 <flash_erase_handler>
				break;
 800041e:	e00c      	b.n	800043a <main+0x8e>

			case BL_FLASH_WRITE:
				flash_write_handler(Rxpacket.data.data_u32, Rxpacket.commandAddress.all); //Yazma icin data ve adres gonderiliyor
 8000420:	2108      	movs	r1, #8
 8000422:	187b      	adds	r3, r7, r1
 8000424:	691a      	ldr	r2, [r3, #16]
 8000426:	187b      	adds	r3, r7, r1
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	0019      	movs	r1, r3
 800042c:	0010      	movs	r0, r2
 800042e:	f7ff ff6f 	bl	8000310 <flash_write_handler>
				break;
 8000432:	e002      	b.n	800043a <main+0x8e>

			case BL_JMP_APP:
				jump_user_app();
 8000434:	f7ff fefe 	bl	8000234 <jump_user_app>
				break;
 8000438:	46c0      	nop			; (mov r8, r8)
		}
		answer_handler(&Rxpacket, &sendData);
 800043a:	1d3a      	adds	r2, r7, #4
 800043c:	2308      	movs	r3, #8
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f000 face 	bl	80009e4 <answer_handler>
	if(communication_layer_handler(&Rxpacket, &sendData) == PROCESS_OK)
 8000448:	e7cf      	b.n	80003ea <main+0x3e>
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	48000800 	.word	0x48000800
 8000450:	08003d1c 	.word	0x08003d1c

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b091      	sub	sp, #68	; 0x44
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	2410      	movs	r4, #16
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2330      	movs	r3, #48	; 0x30
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fbad 	bl	8002bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	003b      	movs	r3, r7
 800046c:	0018      	movs	r0, r3
 800046e:	2310      	movs	r3, #16
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f002 fba6 	bl	8002bc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2201      	movs	r2, #1
 800047e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2205      	movs	r2, #5
 8000484:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2202      	movs	r2, #2
 800048a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	0252      	lsls	r2, r2, #9
 8000492:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	0352      	lsls	r2, r2, #13
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fadb 	bl	8001a60 <HAL_RCC_OscConfig>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ae:	f000 f8e9 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	003b      	movs	r3, r7
 80004b4:	2207      	movs	r2, #7
 80004b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2202      	movs	r2, #2
 80004bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	003b      	movs	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ca:	003b      	movs	r3, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fde4 	bl	800209c <HAL_RCC_ClockConfig>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004d8:	f000 f8d4 	bl	8000684 <Error_Handler>
  }
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b011      	add	sp, #68	; 0x44
 80004e2:	bd90      	pop	{r4, r7, pc}

080004e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_USART2_UART_Init+0x64>)
 80004ea:	4a18      	ldr	r2, [pc, #96]	; (800054c <MX_USART2_UART_Init+0x68>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <MX_USART2_UART_Init+0x64>)
 80004f0:	22e1      	movs	r2, #225	; 0xe1
 80004f2:	0252      	lsls	r2, r2, #9
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_USART2_UART_Init+0x64>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_USART2_UART_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_USART2_UART_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_USART2_UART_Init+0x64>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_USART2_UART_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_USART2_UART_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_USART2_UART_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_USART2_UART_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_USART2_UART_Init+0x64>)
 8000528:	0018      	movs	r0, r3
 800052a:	f001 ff0b 	bl	8002344 <HAL_UART_Init>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f000 f8a7 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <MX_USART2_UART_Init+0x68>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <MX_USART2_UART_Init+0x68>)
 800053c:	2120      	movs	r1, #32
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART2_Init 2 */

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000008c 	.word	0x2000008c
 800054c:	40004400 	.word	0x40004400

08000550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <MX_USART3_UART_Init+0x5c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800055c:	22e1      	movs	r2, #225	; 0xe1
 800055e:	0252      	lsls	r2, r2, #9
 8000560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fed5 	bl	8002344 <HAL_UART_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f871 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000110 	.word	0x20000110
 80005ac:	40004800 	.word	0x40004800

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	240c      	movs	r4, #12
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 faff 	bl	8002bc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <MX_GPIO_Init+0xcc>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b2c      	ldr	r3, [pc, #176]	; (800067c <MX_GPIO_Init+0xcc>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0309      	lsls	r1, r1, #12
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <MX_GPIO_Init+0xcc>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	031b      	lsls	r3, r3, #12
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_GPIO_Init+0xcc>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_GPIO_Init+0xcc>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	03c9      	lsls	r1, r1, #15
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_GPIO_Init+0xcc>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	03db      	lsls	r3, r3, #15
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_GPIO_Init+0xcc>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_GPIO_Init+0xcc>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_GPIO_Init+0xcc>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f9ff 	bl	8001a26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0192      	lsls	r2, r2, #6
 800062e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2284      	movs	r2, #132	; 0x84
 8000634:	0392      	lsls	r2, r2, #14
 8000636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063e:	193b      	adds	r3, r7, r4
 8000640:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000642:	0019      	movs	r1, r3
 8000644:	0010      	movs	r0, r2
 8000646:	f001 f861 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800064a:	0021      	movs	r1, r4
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2220      	movs	r2, #32
 8000650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2201      	movs	r2, #1
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000664:	187a      	adds	r2, r7, r1
 8000666:	2390      	movs	r3, #144	; 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f84d 	bl	800170c <HAL_GPIO_Init>

}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b009      	add	sp, #36	; 0x24
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000
 8000680:	48000800 	.word	0x48000800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>

0800068e <communication_layer_handler>:
	NEW_READ,
	READING
};

//Parser ve uart haberlesme ana fonksiyon
parser_status_t communication_layer_handler(packet_struct_t* receivedPacket, receive_data_t* sendData){
 800068e:	b5b0      	push	{r4, r5, r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	parser_status_t parseStatus = receive_handler();
 8000698:	250f      	movs	r5, #15
 800069a:	197c      	adds	r4, r7, r5
 800069c:	f000 f822 	bl	80006e4 <receive_handler>
 80006a0:	0003      	movs	r3, r0
 80006a2:	7023      	strb	r3, [r4, #0]

	if(parseStatus == RECEIVE_OK)
 80006a4:	197b      	adds	r3, r7, r5
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d113      	bne.n	80006d4 <communication_layer_handler+0x46>
	{
		parseStatus = parse_handler(receivedPacket);
 80006ac:	197c      	adds	r4, r7, r5
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f8c5 	bl	8000840 <parse_handler>
 80006b6:	0003      	movs	r3, r0
 80006b8:	7023      	strb	r3, [r4, #0]
		if(parseStatus == PARSE_OK)
 80006ba:	197b      	adds	r3, r7, r5
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d108      	bne.n	80006d4 <communication_layer_handler+0x46>
		{
			parseStatus = process_handler(receivedPacket, sendData);
 80006c2:	197c      	adds	r4, r7, r5
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f92a 	bl	8000924 <process_handler>
 80006d0:	0003      	movs	r3, r0
 80006d2:	7023      	strb	r3, [r4, #0]
		}
	}

	return parseStatus;
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	781b      	ldrb	r3, [r3, #0]

}
 80006da:	0018      	movs	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	b004      	add	sp, #16
 80006e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080006e4 <receive_handler>:

//Okuma ve header finisher kontrol islemleri
static parser_status_t receive_handler(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

	char header = 0;
 80006ea:	1cfb      	adds	r3, r7, #3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
	static uint8_t bufferIndex = 0;
	static uint8_t status = NEW_READ;

	if(status == NEW_READ)
 80006f0:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <receive_handler+0x14c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d000      	beq.n	80006fa <receive_handler+0x16>
 80006f8:	e07b      	b.n	80007f2 <receive_handler+0x10e>
	{
		//yeni okumada gecici buffer sifirlaniyor
		bufferIndex = 0;
 80006fa:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <receive_handler+0x150>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < PACKET_LENGTH; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	e007      	b.n	8000716 <receive_handler+0x32>
		{
			buffer[i] = 0;
 8000706:	4a4c      	ldr	r2, [pc, #304]	; (8000838 <receive_handler+0x154>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < PACKET_LENGTH; i++)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b0e      	cmp	r3, #14
 800071a:	d9f4      	bls.n	8000706 <receive_handler+0x22>
		}

		//Okunacak veri varmi
		if(USART_BytesToRead() > 0)
 800071c:	f000 fc34 	bl	8000f88 <USART_BytesToRead>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d050      	beq.n	80007c6 <receive_handler+0xe2>
		{
			//Header bulana kadar oku ayrica alinacak veri hala varsa.
			do{
				header = USART_ReadByte();
 8000724:	f000 fc04 	bl	8000f30 <USART_ReadByte>
 8000728:	0002      	movs	r2, r0
 800072a:	1cfb      	adds	r3, r7, #3
 800072c:	701a      	strb	r2, [r3, #0]
				receivedByteCnt++;
 800072e:	4b43      	ldr	r3, [pc, #268]	; (800083c <receive_handler+0x158>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <receive_handler+0x158>)
 8000736:	601a      	str	r2, [r3, #0]
			}while((header != 163) && (USART_BytesToRead() > 0));
 8000738:	1cfb      	adds	r3, r7, #3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2ba3      	cmp	r3, #163	; 0xa3
 800073e:	d003      	beq.n	8000748 <receive_handler+0x64>
 8000740:	f000 fc22 	bl	8000f88 <USART_BytesToRead>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d1ed      	bne.n	8000724 <receive_handler+0x40>

			if (header == PACKET_HEADER)
 8000748:	1cfb      	adds	r3, r7, #3
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2ba3      	cmp	r3, #163	; 0xa3
 800074e:	d138      	bne.n	80007c2 <receive_handler+0xde>
			{
				//Kalan verileri oku varsa
				buffer[bufferIndex++] = header;
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <receive_handler+0x150>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	b2d1      	uxtb	r1, r2
 8000758:	4a36      	ldr	r2, [pc, #216]	; (8000834 <receive_handler+0x150>)
 800075a:	7011      	strb	r1, [r2, #0]
 800075c:	0019      	movs	r1, r3
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <receive_handler+0x154>)
 8000760:	1cfa      	adds	r2, r7, #3
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	545a      	strb	r2, [r3, r1]
				while(USART_BytesToRead() > 0 && bufferIndex < PACKET_LENGTH)
 8000766:	e010      	b.n	800078a <receive_handler+0xa6>
				{
					receivedByteCnt++;
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <receive_handler+0x158>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <receive_handler+0x158>)
 8000770:	601a      	str	r2, [r3, #0]
					buffer[bufferIndex++] = USART_ReadByte();
 8000772:	f000 fbdd 	bl	8000f30 <USART_ReadByte>
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <receive_handler+0x150>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	b2d1      	uxtb	r1, r2
 800077e:	4a2d      	ldr	r2, [pc, #180]	; (8000834 <receive_handler+0x150>)
 8000780:	7011      	strb	r1, [r2, #0]
 8000782:	001a      	movs	r2, r3
 8000784:	b2c1      	uxtb	r1, r0
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <receive_handler+0x154>)
 8000788:	5499      	strb	r1, [r3, r2]
				while(USART_BytesToRead() > 0 && bufferIndex < PACKET_LENGTH)
 800078a:	f000 fbfd 	bl	8000f88 <USART_BytesToRead>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d003      	beq.n	800079a <receive_handler+0xb6>
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <receive_handler+0x150>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b0e      	cmp	r3, #14
 8000798:	d9e6      	bls.n	8000768 <receive_handler+0x84>
				}

				//Hepsi okunduysa ve finisher dogruysa basarili olarak don.
				//Daha hepsi gelmediyse bi dahaki verilerin gelip okunmasi
				//ve yazilimin bloklanmamasi icin status = READING yap ve don.
				if(bufferIndex == PACKET_LENGTH)
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <receive_handler+0x150>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b0f      	cmp	r3, #15
 80007a0:	d10a      	bne.n	80007b8 <receive_handler+0xd4>
				{
					status = NEW_READ;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <receive_handler+0x14c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
					//Finisher dogrumu?
					if (buffer[PACKET_LENGTH-1] == PACKET_FINISHER)
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <receive_handler+0x154>)
 80007aa:	7b9b      	ldrb	r3, [r3, #14]
 80007ac:	2b25      	cmp	r3, #37	; 0x25
 80007ae:	d101      	bne.n	80007b4 <receive_handler+0xd0>
						return RECEIVE_OK;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e039      	b.n	8000828 <receive_handler+0x144>
					else
						return FINISHER_ERROR;
 80007b4:	2306      	movs	r3, #6
 80007b6:	e037      	b.n	8000828 <receive_handler+0x144>
				}
				else
				{
					status = READING;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <receive_handler+0x14c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
					return NOT_ENOUGH_DATA;
 80007be:	2300      	movs	r3, #0
 80007c0:	e032      	b.n	8000828 <receive_handler+0x144>
				}
			}
			else
				return HEADER_ERROR;
 80007c2:	2305      	movs	r3, #5
 80007c4:	e030      	b.n	8000828 <receive_handler+0x144>
		}
		else
		{
			//Hic okunacak veri yok geri don
			status = NEW_READ;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <receive_handler+0x14c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
			return NOT_ENOUGH_DATA;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e02b      	b.n	8000828 <receive_handler+0x144>
	else
	{
		//Eski kaldigin yerden okumaya devam et.
		while(USART_BytesToRead() > 0 && bufferIndex < PACKET_LENGTH)
		{
			receivedByteCnt++;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <receive_handler+0x158>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <receive_handler+0x158>)
 80007d8:	601a      	str	r2, [r3, #0]
			buffer[bufferIndex++] = USART_ReadByte();
 80007da:	f000 fba9 	bl	8000f30 <USART_ReadByte>
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <receive_handler+0x150>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	b2d1      	uxtb	r1, r2
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <receive_handler+0x150>)
 80007e8:	7011      	strb	r1, [r2, #0]
 80007ea:	001a      	movs	r2, r3
 80007ec:	b2c1      	uxtb	r1, r0
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <receive_handler+0x154>)
 80007f0:	5499      	strb	r1, [r3, r2]
		while(USART_BytesToRead() > 0 && bufferIndex < PACKET_LENGTH)
 80007f2:	f000 fbc9 	bl	8000f88 <USART_BytesToRead>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d003      	beq.n	8000802 <receive_handler+0x11e>
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <receive_handler+0x150>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b0e      	cmp	r3, #14
 8000800:	d9e6      	bls.n	80007d0 <receive_handler+0xec>
		}

		//Hepsi okunduysa ve finisher dogruysa basarili olarak don.
		if(bufferIndex == PACKET_LENGTH)
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <receive_handler+0x150>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b0f      	cmp	r3, #15
 8000808:	d10a      	bne.n	8000820 <receive_handler+0x13c>
		{
			status = NEW_READ;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <receive_handler+0x14c>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
			//Finisher dogrumu?
			if (buffer[PACKET_LENGTH-1] == PACKET_FINISHER)
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <receive_handler+0x154>)
 8000812:	7b9b      	ldrb	r3, [r3, #14]
 8000814:	2b25      	cmp	r3, #37	; 0x25
 8000816:	d101      	bne.n	800081c <receive_handler+0x138>
				return RECEIVE_OK;
 8000818:	2301      	movs	r3, #1
 800081a:	e005      	b.n	8000828 <receive_handler+0x144>
			else
				return FINISHER_ERROR;
 800081c:	2306      	movs	r3, #6
 800081e:	e003      	b.n	8000828 <receive_handler+0x144>
		}
		else
		{
			status = READING;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <receive_handler+0x14c>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
			return NOT_ENOUGH_DATA;
 8000826:	2300      	movs	r3, #0
		}
	}
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200001af 	.word	0x200001af
 8000834:	200001b0 	.word	0x200001b0
 8000838:	200001a0 	.word	0x200001a0
 800083c:	20000194 	.word	0x20000194

08000840 <parse_handler>:

static parser_status_t parse_handler(packet_struct_t* receivedPacket){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

	//Slave numara bu cihaz icin mi? Muhatap bu mu?
	if(buffer[SLAVE_NUM_INDEX] == MY_SLAVE_NUM)
 8000848:	4b34      	ldr	r3, [pc, #208]	; (800091c <parse_handler+0xdc>)
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	2b45      	cmp	r3, #69	; 0x45
 800084e:	d15b      	bne.n	8000908 <parse_handler+0xc8>
	{
		//Read-Write komutu dogru mu?
		if(buffer[RW_INDEX] == READ || buffer[RW_INDEX] == WRITE)
 8000850:	4b32      	ldr	r3, [pc, #200]	; (800091c <parse_handler+0xdc>)
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d003      	beq.n	8000860 <parse_handler+0x20>
 8000858:	4b30      	ldr	r3, [pc, #192]	; (800091c <parse_handler+0xdc>)
 800085a:	7a1b      	ldrb	r3, [r3, #8]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d14c      	bne.n	80008fa <parse_handler+0xba>
		{
			//Data tipi verilen araliktami?
			if(buffer[DATA_TYPE_INDEX] > 0 && buffer[DATA_TYPE_INDEX] < DATA_TYPE_LIM)
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <parse_handler+0xdc>)
 8000862:	7a5b      	ldrb	r3, [r3, #9]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d041      	beq.n	80008ec <parse_handler+0xac>
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <parse_handler+0xdc>)
 800086a:	7a5b      	ldrb	r3, [r3, #9]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d83d      	bhi.n	80008ec <parse_handler+0xac>
			{
				receivedPacket->header = buffer[HEADER_INDEX];
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <parse_handler+0xdc>)
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	701a      	strb	r2, [r3, #0]
				receivedPacket->finisher = buffer[FINISHER_INDEX];
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <parse_handler+0xdc>)
 800087a:	7b9a      	ldrb	r2, [r3, #14]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	751a      	strb	r2, [r3, #20]
				receivedPacket->slaveNum = buffer[SLAVE_NUM_INDEX];
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <parse_handler+0xdc>)
 8000882:	78da      	ldrb	r2, [r3, #3]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	711a      	strb	r2, [r3, #4]
				receivedPacket->rw = buffer[RW_INDEX];
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <parse_handler+0xdc>)
 800088a:	7a1a      	ldrb	r2, [r3, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	731a      	strb	r2, [r3, #12]
				receivedPacket->dataType = buffer[DATA_TYPE_INDEX];
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <parse_handler+0xdc>)
 8000892:	7a5a      	ldrb	r2, [r3, #9]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	735a      	strb	r2, [r3, #13]

				//MSB byte birinci yada LSB byte birinci. Burada LSB byte birinci.
				//MSB birinci ise asagida byte siralamasi degistirilmeli
				receivedPacket->commandNumber.high_low.low = buffer[COMM_NUM_L_INDEX];
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <parse_handler+0xdc>)
 800089a:	785a      	ldrb	r2, [r3, #1]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	709a      	strb	r2, [r3, #2]
				receivedPacket->commandNumber.high_low.high = buffer[COMM_NUM_H_INDEX];
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <parse_handler+0xdc>)
 80008a2:	789a      	ldrb	r2, [r3, #2]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	70da      	strb	r2, [r3, #3]
				receivedPacket->commandAddress.bytes.byte0 = buffer[COMM_ADDR_BYTE_0_INDEX];
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <parse_handler+0xdc>)
 80008aa:	791a      	ldrb	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	721a      	strb	r2, [r3, #8]
				receivedPacket->commandAddress.bytes.byte1 = buffer[COMM_ADDR_BYTE_1_INDEX];
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <parse_handler+0xdc>)
 80008b2:	795a      	ldrb	r2, [r3, #5]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	725a      	strb	r2, [r3, #9]
				receivedPacket->commandAddress.bytes.byte2 = buffer[COMM_ADDR_BYTE_2_INDEX];
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <parse_handler+0xdc>)
 80008ba:	799a      	ldrb	r2, [r3, #6]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	729a      	strb	r2, [r3, #10]
				receivedPacket->commandAddress.bytes.byte3 = buffer[COMM_ADDR_BYTE_3_INDEX];
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <parse_handler+0xdc>)
 80008c2:	79da      	ldrb	r2, [r3, #7]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	72da      	strb	r2, [r3, #11]
				receivedPacket->data.bytes.byte0 = buffer[DATA_BYTE_0_INDEX];
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <parse_handler+0xdc>)
 80008ca:	7a9a      	ldrb	r2, [r3, #10]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	741a      	strb	r2, [r3, #16]
				receivedPacket->data.bytes.byte1 = buffer[DATA_BYTE_1_INDEX];
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <parse_handler+0xdc>)
 80008d2:	7ada      	ldrb	r2, [r3, #11]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	745a      	strb	r2, [r3, #17]
				receivedPacket->data.bytes.byte2 = buffer[DATA_BYTE_2_INDEX];
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <parse_handler+0xdc>)
 80008da:	7b1a      	ldrb	r2, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	749a      	strb	r2, [r3, #18]
				receivedPacket->data.bytes.byte3 = buffer[DATA_BYTE_3_INDEX];
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <parse_handler+0xdc>)
 80008e2:	7b5a      	ldrb	r2, [r3, #13]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	74da      	strb	r2, [r3, #19]

				return PARSE_OK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	e013      	b.n	8000914 <parse_handler+0xd4>
			}
			else
			{
				wrongPacketCnt++;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <parse_handler+0xe0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <parse_handler+0xe0>)
 80008f4:	601a      	str	r2, [r3, #0]
				return DATA_TYPE_ERROR;
 80008f6:	2308      	movs	r3, #8
 80008f8:	e00c      	b.n	8000914 <parse_handler+0xd4>
			}
		}
		else
		{
			wrongPacketCnt++;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <parse_handler+0xe0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <parse_handler+0xe0>)
 8000902:	601a      	str	r2, [r3, #0]
			return RW_BYTE_ERROR;
 8000904:	2307      	movs	r3, #7
 8000906:	e005      	b.n	8000914 <parse_handler+0xd4>
		}
	}
	else
	{
		wrongPacketCnt++;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <parse_handler+0xe0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <parse_handler+0xe0>)
 8000910:	601a      	str	r2, [r3, #0]
		return SLAVE_NUM_FALSE;
 8000912:	230c      	movs	r3, #12
	}

}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200001a0 	.word	0x200001a0
 8000920:	2000019c 	.word	0x2000019c

08000924 <process_handler>:

static parser_status_t process_handler(packet_struct_t* receivedPacket, receive_data_t* sendData){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]

	//sendData->data_u32 = 0;

	//Emir numarasi belirli aralikta olmali. Emir numaralari ozelse her seferinde artmiyorsa.
	if(receivedPacket->commandNumber.all > 0 && receivedPacket->commandNumber.all < COMM_TYPE_LIM)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	885b      	ldrh	r3, [r3, #2]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d046      	beq.n	80009c4 <process_handler+0xa0>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	885b      	ldrh	r3, [r3, #2]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d842      	bhi.n	80009c4 <process_handler+0xa0>
	{
		//Cevap gelen data ile birlikte aynisi olarak veriliyor.
		sendData->data_u32 = receivedPacket->data.data_u32;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	691a      	ldr	r2, [r3, #16]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	601a      	str	r2, [r3, #0]

		if(receivedPacket->commandNumber.all == PERIPH_COMM)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	885b      	ldrh	r3, [r3, #2]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d133      	bne.n	80009b6 <process_handler+0x92>
		{
			//Cevre birimi (Ornegin Timer1) konfigurasyon komutu geldiyse veri tipi unsigned int olmali. (Soru gereksinimi)
			//Projeye gore diger kontroller de tanimlanabilir.
			if(receivedPacket->dataType != UINT32_DATA)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7b5b      	ldrb	r3, [r3, #13]
 8000952:	2b06      	cmp	r3, #6
 8000954:	d006      	beq.n	8000964 <process_handler+0x40>
			{
				wrongPacketCnt++;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <process_handler+0xb4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <process_handler+0xb4>)
 800095e:	601a      	str	r2, [r3, #0]
				return DATA_TYPE_FALSE;
 8000960:	230a      	movs	r3, #10
 8000962:	e035      	b.n	80009d0 <process_handler+0xac>
			}
			//Ayrica gelen emir adresi cevre birimi adres araliginda olmali.
			else if(receivedPacket->commandAddress.all < MY_MCU_PERIPH_START_ADDR ||
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	429a      	cmp	r2, r3
 800096e:	d304      	bcc.n	800097a <process_handler+0x56>
					receivedPacket->commandAddress.all > MY_MCU_PERIPH_END_ADDR)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
			else if(receivedPacket->commandAddress.all < MY_MCU_PERIPH_START_ADDR ||
 8000974:	4a19      	ldr	r2, [pc, #100]	; (80009dc <process_handler+0xb8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d906      	bls.n	8000988 <process_handler+0x64>
			{
				wrongPacketCnt++;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <process_handler+0xb4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <process_handler+0xb4>)
 8000982:	601a      	str	r2, [r3, #0]
				return ADDR_RANGE_ERROR;
 8000984:	2309      	movs	r3, #9
 8000986:	e023      	b.n	80009d0 <process_handler+0xac>
			else
			{
				//Bu asamaya gelindiyse alinan paket hatasizdir, dogrudur.
				//Alinan paket sayisini artir.
				//Yazma yada okuma islemini yap.
				if(receivedPacket->rw == WRITE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7b1b      	ldrb	r3, [r3, #12]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d106      	bne.n	800099e <process_handler+0x7a>
				{
					//Bellek bolgesine yaz
					*((uint32_t*)(receivedPacket->commandAddress.all)) = receivedPacket->data.data_u32;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	001a      	movs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e004      	b.n	80009a8 <process_handler+0x84>
				}
				else
				{
					//Bellek bolgesini oku ve gonder
					sendData->data_u32 = *((uint32_t*)(receivedPacket->commandAddress.all));
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	601a      	str	r2, [r3, #0]
				}
				receivedPacketCnt++;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <process_handler+0xbc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <process_handler+0xbc>)
 80009b0:	601a      	str	r2, [r3, #0]
				return PROCESS_OK;
 80009b2:	2303      	movs	r3, #3
 80009b4:	e00c      	b.n	80009d0 <process_handler+0xac>
			}
		}
		else
		{
			receivedPacketCnt++;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <process_handler+0xbc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <process_handler+0xbc>)
 80009be:	601a      	str	r2, [r3, #0]
			return PROCESS_OK;
 80009c0:	2303      	movs	r3, #3
 80009c2:	e005      	b.n	80009d0 <process_handler+0xac>
		}
	}
	else
	{
		wrongPacketCnt++;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <process_handler+0xb4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <process_handler+0xb4>)
 80009cc:	601a      	str	r2, [r3, #0]
		return COMM_NUM_ERROR;
 80009ce:	230b      	movs	r3, #11
	}


}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000019c 	.word	0x2000019c
 80009dc:	480017ff 	.word	0x480017ff
 80009e0:	20000198 	.word	0x20000198

080009e4 <answer_handler>:

//Mesaj dogru ve parse basarili ise cevap gonderme hatali ise NACK gonderecek sekildede kodlanabilir.
parser_status_t answer_handler(packet_struct_t* receivedPacket,  receive_data_t* sendData){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]

	USART_SendByte(receivedPacket->header);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fa5e 	bl	8000eb4 <USART_SendByte>
	USART_SendByteArray(((uint8_t*)&receivedPacket->commandNumber.all), 2);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3302      	adds	r3, #2
 80009fc:	2102      	movs	r1, #2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fad6 	bl	8000fb0 <USART_SendByteArray>
	USART_SendByte(receivedPacket->slaveNum);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fa53 	bl	8000eb4 <USART_SendByte>
	USART_SendByteArray(((uint8_t*)&receivedPacket->commandAddress.all), 4);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3308      	adds	r3, #8
 8000a12:	2104      	movs	r1, #4
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 facb 	bl	8000fb0 <USART_SendByteArray>
	USART_SendByte(receivedPacket->rw);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7b1b      	ldrb	r3, [r3, #12]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fa48 	bl	8000eb4 <USART_SendByte>
	USART_SendByte(receivedPacket->dataType);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7b5b      	ldrb	r3, [r3, #13]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fa43 	bl	8000eb4 <USART_SendByte>
	USART_SendByteArray(((uint8_t*)&sendData->data_u32), 4);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2104      	movs	r1, #4
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fabc 	bl	8000fb0 <USART_SendByteArray>
	USART_SendByte(receivedPacket->finisher);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7d1b      	ldrb	r3, [r3, #20]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fa39 	bl	8000eb4 <USART_SendByte>

	return ANSWER_OK;
 8000a42:	2304      	movs	r3, #4
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	619a      	str	r2, [r3, #24]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0549      	lsls	r1, r1, #21
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_MspInit+0x44>)
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	055b      	lsls	r3, r3, #21
 8000a80:	4013      	ands	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08d      	sub	sp, #52	; 0x34
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	241c      	movs	r4, #28
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	2314      	movs	r3, #20
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f002 f88c 	bl	8002bc4 <memset>
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a3c      	ldr	r2, [pc, #240]	; (8000ba4 <HAL_UART_MspInit+0x110>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d13b      	bne.n	8000b2e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000ab8:	69da      	ldr	r2, [r3, #28]
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	0289      	lsls	r1, r1, #10
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	61da      	str	r2, [r3, #28]
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000ac6:	69da      	ldr	r2, [r3, #28]
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	029b      	lsls	r3, r3, #10
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0289      	lsls	r1, r1, #10
 8000adc:	430a      	orrs	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	0021      	movs	r1, r4
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2203      	movs	r2, #3
 8000b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	187a      	adds	r2, r7, r1
 8000b10:	2390      	movs	r3, #144	; 0x90
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fdf8 	bl	800170c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	201c      	movs	r0, #28
 8000b22:	f000 fbbf 	bl	80012a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b26:	201c      	movs	r0, #28
 8000b28:	f000 fbd1 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b2c:	e036      	b.n	8000b9c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_UART_MspInit+0x118>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d131      	bne.n	8000b9c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000b3a:	69da      	ldr	r2, [r3, #28]
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	02c9      	lsls	r1, r1, #11
 8000b42:	430a      	orrs	r2, r1
 8000b44:	61da      	str	r2, [r3, #28]
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000b48:	69da      	ldr	r2, [r3, #28]
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	02db      	lsls	r3, r3, #11
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	0309      	lsls	r1, r1, #12
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_UART_MspInit+0x114>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	031b      	lsls	r3, r3, #12
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b70:	211c      	movs	r1, #28
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2230      	movs	r2, #48	; 0x30
 8000b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2203      	movs	r2, #3
 8000b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_UART_MspInit+0x11c>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f000 fdb8 	bl	800170c <HAL_GPIO_Init>
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b00d      	add	sp, #52	; 0x34
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	48000800 	.word	0x48000800

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:
__attribute__((naked)) void HardFault_Handler(void)
{
	//here we extracted the value of MSP which happens to be the
	//base address of the stack frame(thread mode) which got saved during the exception entry
	//from thread mode to handler mode
	__asm ("MRS r0,MSP");
 8000bba:	f3ef 8008 	mrs	r0, MSP
	__asm ("B HardFault_Handler_c");
 8000bbe:	e011      	b.n	8000be4 <HardFault_Handler_c>
}
 8000bc0:	46c0      	nop			; (mov r8, r8)

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 fa77 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HardFault_Handler_c>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void HardFault_Handler_c(uint32_t *pBaseStackFrame)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	//uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	//MY_PRINTF("Exception : UsageFault\n");
	//MY_PRINTF("UFSR = %lx\n",(*pUFSR) & 0xFFFF);
	MY_PRINTF("!!!HARD FAULT!!!\r\n");
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <HardFault_Handler_c+0x9c>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 f87c 	bl	8002cec <puts>
	MY_PRINTF("pBaseStackFrame = %p\r\n",pBaseStackFrame);
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HardFault_Handler_c+0xa0>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 ffea 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of R0 = %lx\r\n", pBaseStackFrame[0]);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <HardFault_Handler_c+0xa4>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 ffe3 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of R1 = %lx\r\n", pBaseStackFrame[1]);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3304      	adds	r3, #4
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HardFault_Handler_c+0xa8>)
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 ffdb 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of R2 = %lx\r\n", pBaseStackFrame[2]);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3308      	adds	r3, #8
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HardFault_Handler_c+0xac>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 ffd3 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of R3 = %lx\r\n", pBaseStackFrame[3]);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	330c      	adds	r3, #12
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HardFault_Handler_c+0xb0>)
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 ffcb 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of R12 = %lx\r\n", pBaseStackFrame[4]);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3310      	adds	r3, #16
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HardFault_Handler_c+0xb4>)
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 ffc3 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of LR = %lx\r\n", pBaseStackFrame[5]);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3314      	adds	r3, #20
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HardFault_Handler_c+0xb8>)
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 ffbb 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of PC = %lx\r\n", pBaseStackFrame[6]);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3318      	adds	r3, #24
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HardFault_Handler_c+0xbc>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 ffb3 	bl	8002bd4 <iprintf>
	MY_PRINTF("Value of XPSR = %lx\r\n", pBaseStackFrame[7]);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	331c      	adds	r3, #28
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HardFault_Handler_c+0xc0>)
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 ffab 	bl	8002bd4 <iprintf>
	while(1);
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler_c+0x9a>
 8000c80:	08003d34 	.word	0x08003d34
 8000c84:	08003d48 	.word	0x08003d48
 8000c88:	08003d60 	.word	0x08003d60
 8000c8c:	08003d74 	.word	0x08003d74
 8000c90:	08003d88 	.word	0x08003d88
 8000c94:	08003d9c 	.word	0x08003d9c
 8000c98:	08003db0 	.word	0x08003db0
 8000c9c:	08003dc8 	.word	0x08003dc8
 8000ca0:	08003ddc 	.word	0x08003ddc
 8000ca4:	08003df0 	.word	0x08003df0

08000ca8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00a      	b.n	8000cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cba:	e000      	b.n	8000cbe <_read+0x16>
 8000cbc:	bf00      	nop
 8000cbe:	0001      	movs	r1, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf0      	blt.n	8000cba <_read+0x12>
	}

return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b006      	add	sp, #24
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e009      	b.n	8000d08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fb43 	bl	8000388 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf1      	blt.n	8000cf4 <_write+0x12>
	}
	return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b006      	add	sp, #24
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_close>:

int _close(int file)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	return -1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	425b      	negs	r3, r3
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	0192      	lsls	r2, r2, #6
 8000d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_isatty>:

int _isatty(int file)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f001 fee4 	bl	8002b70 <__errno>
 8000da8:	0003      	movs	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	18d2      	adds	r2, r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b006      	add	sp, #24
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20004000 	.word	0x20004000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200001b4 	.word	0x200001b4
 8000ddc:	200003e0 	.word	0x200003e0

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <USART2_IRQHandler>:
*/

static volatile uartBufferT uartBuffTX;
static volatile uartBufferT uartBuffRX;

void USART2_IRQHandler(void){
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0

	uint32_t usart2_isrflags = USART2->ISR;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <USART2_IRQHandler+0xbc>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	607b      	str	r3, [r7, #4]
	uint32_t usart2_control_reg = USART2->CR1;
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <USART2_IRQHandler+0xbc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	603b      	str	r3, [r7, #0]

	if (((usart2_isrflags & USART_ISR_RXNE) != RESET) && ((usart2_control_reg & USART_CR1_RXNEIE) != RESET))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2220      	movs	r2, #32
 8000e02:	4013      	ands	r3, r2
 8000e04:	d01b      	beq.n	8000e3e <USART2_IRQHandler+0x52>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d017      	beq.n	8000e3e <USART2_IRQHandler+0x52>
	{
		uartBuffRX.buffer[uartBuffRX.headPointer++] = USART2->RDR;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <USART2_IRQHandler+0xbc>)
 8000e10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e12:	b29c      	uxth	r4, r3
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <USART2_IRQHandler+0xc0>)
 8000e16:	22f0      	movs	r2, #240	; 0xf0
 8000e18:	589b      	ldr	r3, [r3, r2]
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	4a23      	ldr	r2, [pc, #140]	; (8000eac <USART2_IRQHandler+0xc0>)
 8000e1e:	20f0      	movs	r0, #240	; 0xf0
 8000e20:	5011      	str	r1, [r2, r0]
 8000e22:	0021      	movs	r1, r4
 8000e24:	4a21      	ldr	r2, [pc, #132]	; (8000eac <USART2_IRQHandler+0xc0>)
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	5099      	str	r1, [r3, r2]

		if(uartBuffRX.headPointer == UART_BUFFER_SIZE)
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <USART2_IRQHandler+0xc0>)
 8000e2c:	22f0      	movs	r2, #240	; 0xf0
 8000e2e:	589b      	ldr	r3, [r3, r2]
 8000e30:	2b3c      	cmp	r3, #60	; 0x3c
 8000e32:	d132      	bne.n	8000e9a <USART2_IRQHandler+0xae>
		{
			uartBuffRX.headPointer = 0;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <USART2_IRQHandler+0xc0>)
 8000e36:	22f0      	movs	r2, #240	; 0xf0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	5099      	str	r1, [r3, r2]
		}

		return;
 8000e3c:	e02d      	b.n	8000e9a <USART2_IRQHandler+0xae>
	}

	if (((usart2_isrflags & USART_ISR_TXE) != RESET) && ((usart2_control_reg & USART_CR1_TXEIE) != RESET))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	4013      	ands	r3, r2
 8000e44:	d02c      	beq.n	8000ea0 <USART2_IRQHandler+0xb4>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d028      	beq.n	8000ea0 <USART2_IRQHandler+0xb4>
	{
		if(uartBuffTX.headPointer != uartBuffTX.tailPointer)
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e50:	22f0      	movs	r2, #240	; 0xf0
 8000e52:	589a      	ldr	r2, [r3, r2]
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e56:	21f4      	movs	r1, #244	; 0xf4
 8000e58:	585b      	ldr	r3, [r3, r1]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d016      	beq.n	8000e8c <USART2_IRQHandler+0xa0>
		{
			USART2->TDR = uartBuffTX.buffer[uartBuffTX.tailPointer++];
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e60:	22f4      	movs	r2, #244	; 0xf4
 8000e62:	589b      	ldr	r3, [r3, r2]
 8000e64:	1c59      	adds	r1, r3, #1
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e68:	20f4      	movs	r0, #244	; 0xf4
 8000e6a:	5011      	str	r1, [r2, r0]
 8000e6c:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	589a      	ldr	r2, [r3, r2]
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <USART2_IRQHandler+0xbc>)
 8000e74:	b292      	uxth	r2, r2
 8000e76:	851a      	strh	r2, [r3, #40]	; 0x28

			if(uartBuffTX.tailPointer == UART_BUFFER_SIZE)
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e7a:	22f4      	movs	r2, #244	; 0xf4
 8000e7c:	589b      	ldr	r3, [r3, r2]
 8000e7e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e80:	d10d      	bne.n	8000e9e <USART2_IRQHandler+0xb2>
			{
				uartBuffTX.tailPointer = 0;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <USART2_IRQHandler+0xc4>)
 8000e84:	22f4      	movs	r2, #244	; 0xf4
 8000e86:	2100      	movs	r1, #0
 8000e88:	5099      	str	r1, [r3, r2]
		else
		{
			CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
		}

		return;
 8000e8a:	e008      	b.n	8000e9e <USART2_IRQHandler+0xb2>
			CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <USART2_IRQHandler+0xbc>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <USART2_IRQHandler+0xbc>)
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	438a      	bics	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
		return;
 8000e98:	e001      	b.n	8000e9e <USART2_IRQHandler+0xb2>
		return;
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	e000      	b.n	8000ea0 <USART2_IRQHandler+0xb4>
		return;
 8000e9e:	46c0      	nop			; (mov r8, r8)
	}


}
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b003      	add	sp, #12
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	200002b0 	.word	0x200002b0
 8000eb0:	200001b8 	.word	0x200001b8

08000eb4 <USART_SendByte>:

void USART_SendByte(uint8_t data){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	701a      	strb	r2, [r3, #0]

	uartBuffTX.buffer[uartBuffTX.headPointer++] = data;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <USART_SendByte+0x4c>)
 8000ec2:	22f0      	movs	r2, #240	; 0xf0
 8000ec4:	589b      	ldr	r3, [r3, r2]
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <USART_SendByte+0x4c>)
 8000eca:	20f0      	movs	r0, #240	; 0xf0
 8000ecc:	5011      	str	r1, [r2, r0]
 8000ece:	1dfa      	adds	r2, r7, #7
 8000ed0:	7811      	ldrb	r1, [r2, #0]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <USART_SendByte+0x4c>)
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	5099      	str	r1, [r3, r2]

	if(uartBuffTX.headPointer == UART_BUFFER_SIZE)
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <USART_SendByte+0x4c>)
 8000eda:	22f0      	movs	r2, #240	; 0xf0
 8000edc:	589b      	ldr	r3, [r3, r2]
 8000ede:	2b3c      	cmp	r3, #60	; 0x3c
 8000ee0:	d103      	bne.n	8000eea <USART_SendByte+0x36>
	{
		uartBuffTX.headPointer = 0;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <USART_SendByte+0x4c>)
 8000ee4:	22f0      	movs	r2, #240	; 0xf0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	5099      	str	r1, [r3, r2]
	}

	SET_BIT(USART2->CR1, USART_CR1_TXEIE);
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <USART_SendByte+0x50>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <USART_SendByte+0x50>)
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	200001b8 	.word	0x200001b8
 8000f04:	40004400 	.word	0x40004400

08000f08 <USART_IsBuffEmpty>:

uint8_t USART_IsBuffEmpty(volatile uartBufferT* buffer){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

	if(buffer->headPointer == buffer->tailPointer)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	22f0      	movs	r2, #240	; 0xf0
 8000f14:	589a      	ldr	r2, [r3, r2]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	21f4      	movs	r1, #244	; 0xf4
 8000f1a:	585b      	ldr	r3, [r3, r1]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d101      	bne.n	8000f24 <USART_IsBuffEmpty+0x1c>
	{
		return 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <USART_IsBuffEmpty+0x1e>
	}
	else
	{
		return 0;
 8000f24:	2300      	movs	r3, #0
	}
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <USART_ReadByte>:

int32_t USART_ReadByte(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

	int32_t receivedByte = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
	if(USART_IsBuffEmpty(&uartBuffRX) == 1)
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <USART_ReadByte+0x54>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ffe3 	bl	8000f08 <USART_IsBuffEmpty>
 8000f42:	0003      	movs	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d103      	bne.n	8000f50 <USART_ReadByte+0x20>
	{
		receivedByte = -1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	e013      	b.n	8000f78 <USART_ReadByte+0x48>
	}
	else
	{
		receivedByte = uartBuffRX.buffer[uartBuffRX.tailPointer++];
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <USART_ReadByte+0x54>)
 8000f52:	22f4      	movs	r2, #244	; 0xf4
 8000f54:	589b      	ldr	r3, [r3, r2]
 8000f56:	1c59      	adds	r1, r3, #1
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <USART_ReadByte+0x54>)
 8000f5a:	20f4      	movs	r0, #244	; 0xf4
 8000f5c:	5011      	str	r1, [r2, r0]
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <USART_ReadByte+0x54>)
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	589b      	ldr	r3, [r3, r2]
 8000f64:	607b      	str	r3, [r7, #4]

		if(uartBuffRX.tailPointer==UART_BUFFER_SIZE)
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <USART_ReadByte+0x54>)
 8000f68:	22f4      	movs	r2, #244	; 0xf4
 8000f6a:	589b      	ldr	r3, [r3, r2]
 8000f6c:	2b3c      	cmp	r3, #60	; 0x3c
 8000f6e:	d103      	bne.n	8000f78 <USART_ReadByte+0x48>
		{
			uartBuffRX.tailPointer = 0;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <USART_ReadByte+0x54>)
 8000f72:	22f4      	movs	r2, #244	; 0xf4
 8000f74:	2100      	movs	r1, #0
 8000f76:	5099      	str	r1, [r3, r2]
		}
	}

	return receivedByte;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	200002b0 	.word	0x200002b0

08000f88 <USART_BytesToRead>:

uint32_t USART_BytesToRead(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	return (UART_BUFFER_SIZE + uartBuffRX.headPointer - uartBuffRX.tailPointer) % UART_BUFFER_SIZE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <USART_BytesToRead+0x24>)
 8000f8e:	22f0      	movs	r2, #240	; 0xf0
 8000f90:	589a      	ldr	r2, [r3, r2]
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <USART_BytesToRead+0x24>)
 8000f94:	21f4      	movs	r1, #244	; 0xf4
 8000f96:	585b      	ldr	r3, [r3, r1]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	333c      	adds	r3, #60	; 0x3c
 8000f9c:	213c      	movs	r1, #60	; 0x3c
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff f942 	bl	8000228 <__aeabi_uidivmod>
 8000fa4:	000b      	movs	r3, r1

}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200002b0 	.word	0x200002b0

08000fb0 <USART_SendByteArray>:

void USART_SendByteArray(uint8_t* buffer, uint32_t size){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]

	uint32_t i;
	for(i=0; i<size; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e009      	b.n	8000fd4 <USART_SendByteArray+0x24>
	{
		USART_SendByte(buffer[i]);
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff ff73 	bl	8000eb4 <USART_SendByte>
	for(i=0; i<size; i++)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3f1      	bcc.n	8000fc0 <USART_SendByteArray+0x10>
	}
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b004      	add	sp, #16
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001012:	f7ff fee5 	bl	8000de0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001016:	f001 fdb1 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101a:	f7ff f9c7 	bl	80003ac <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   r0, =_estack
 8001020:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800102c:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 8001030:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001034:	200003e0 	.word	0x200003e0

08001038 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_IRQHandler>
	...

0800103c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_Init+0x24>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_Init+0x24>)
 8001046:	2110      	movs	r1, #16
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f809 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fcfb 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_InitTick+0x5c>)
 800106e:	681c      	ldr	r4, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	0019      	movs	r1, r3
 8001076:	23fa      	movs	r3, #250	; 0xfa
 8001078:	0098      	lsls	r0, r3, #2
 800107a:	f7ff f84f 	bl	800011c <__udivsi3>
 800107e:	0003      	movs	r3, r0
 8001080:	0019      	movs	r1, r3
 8001082:	0020      	movs	r0, r4
 8001084:	f7ff f84a 	bl	800011c <__udivsi3>
 8001088:	0003      	movs	r3, r0
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f92f 	bl	80012ee <HAL_SYSTICK_Config>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e00f      	b.n	80010b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d80b      	bhi.n	80010b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	2301      	movs	r3, #1
 80010a2:	425b      	negs	r3, r3
 80010a4:	2200      	movs	r2, #0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 f8fc 	bl	80012a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_InitTick+0x64>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b003      	add	sp, #12
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	001a      	movs	r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x20>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	18d2      	adds	r2, r2, r3
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_IncTick+0x20>)
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000008 	.word	0x20000008
 80010ec:	200003a8 	.word	0x200003a8

080010f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <HAL_GetTick+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	200003a8 	.word	0x200003a8

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fff0 	bl	80010f0 <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	001a      	movs	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	189b      	adds	r3, r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	f7ff ffe0 	bl	80010f0 <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b7f      	cmp	r3, #127	; 0x7f
 800115e:	d809      	bhi.n	8001174 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	001a      	movs	r2, r3
 8001166:	231f      	movs	r3, #31
 8001168:	401a      	ands	r2, r3
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_EnableIRQ+0x30>)
 800116c:	2101      	movs	r1, #1
 800116e:	4091      	lsls	r1, r2
 8001170:	000a      	movs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
  }
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b7f      	cmp	r3, #127	; 0x7f
 8001194:	d828      	bhi.n	80011e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <__NVIC_SetPriority+0xd4>)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	33c0      	adds	r3, #192	; 0xc0
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	589b      	ldr	r3, [r3, r2]
 80011a6:	1dfa      	adds	r2, r7, #7
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	2203      	movs	r2, #3
 80011ae:	400a      	ands	r2, r1
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	43d2      	mvns	r2, r2
 80011ba:	401a      	ands	r2, r3
 80011bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	401a      	ands	r2, r3
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	4003      	ands	r3, r0
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	481f      	ldr	r0, [pc, #124]	; (8001254 <__NVIC_SetPriority+0xd4>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	430a      	orrs	r2, r1
 80011e0:	33c0      	adds	r3, #192	; 0xc0
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011e6:	e031      	b.n	800124c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <__NVIC_SetPriority+0xd8>)
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0019      	movs	r1, r3
 80011f0:	230f      	movs	r3, #15
 80011f2:	400b      	ands	r3, r1
 80011f4:	3b08      	subs	r3, #8
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3306      	adds	r3, #6
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	3304      	adds	r3, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	0011      	movs	r1, r2
 8001208:	2203      	movs	r2, #3
 800120a:	400a      	ands	r2, r1
 800120c:	00d2      	lsls	r2, r2, #3
 800120e:	21ff      	movs	r1, #255	; 0xff
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	43d2      	mvns	r2, r2
 8001216:	401a      	ands	r2, r3
 8001218:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	019b      	lsls	r3, r3, #6
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	401a      	ands	r2, r3
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0018      	movs	r0, r3
 8001228:	2303      	movs	r3, #3
 800122a:	4003      	ands	r3, r0
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <__NVIC_SetPriority+0xd8>)
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	001c      	movs	r4, r3
 8001238:	230f      	movs	r3, #15
 800123a:	4023      	ands	r3, r4
 800123c:	3b08      	subs	r3, #8
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	430a      	orrs	r2, r1
 8001242:	3306      	adds	r3, #6
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	18c3      	adds	r3, r0, r3
 8001248:	3304      	adds	r3, #4
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b003      	add	sp, #12
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	045b      	lsls	r3, r3, #17
 800126c:	429a      	cmp	r2, r3
 800126e:	d301      	bcc.n	8001274 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001270:	2301      	movs	r3, #1
 8001272:	e010      	b.n	8001296 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <SysTick_Config+0x44>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	3a01      	subs	r2, #1
 800127a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127c:	2301      	movs	r3, #1
 800127e:	425b      	negs	r3, r3
 8001280:	2103      	movs	r1, #3
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff ff7c 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x44>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x44>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	210f      	movs	r1, #15
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	0002      	movs	r2, r0
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ff33 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ffaf 	bl	800125c <SysTick_Config>
 80012fe:	0003      	movs	r3, r0
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	603a      	str	r2, [r7, #0]
 8001314:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001316:	2317      	movs	r3, #23
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800131e:	2316      	movs	r3, #22
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8001326:	2315      	movs	r3, #21
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_FLASH_Program+0x120>)
 8001330:	7e1b      	ldrb	r3, [r3, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_FLASH_Program+0x32>
 8001336:	2302      	movs	r3, #2
 8001338:	e072      	b.n	8001420 <HAL_FLASH_Program+0x118>
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_FLASH_Program+0x120>)
 800133c:	2201      	movs	r2, #1
 800133e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001340:	2317      	movs	r3, #23
 8001342:	18fe      	adds	r6, r7, r3
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_FLASH_Program+0x124>)
 8001346:	0018      	movs	r0, r3
 8001348:	f000 f8c4 	bl	80014d4 <FLASH_WaitForLastOperation>
 800134c:	0003      	movs	r3, r0
 800134e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8001350:	2317      	movs	r3, #23
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d15c      	bne.n	8001414 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d104      	bne.n	800136a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001360:	2315      	movs	r3, #21
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e00b      	b.n	8001382 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d104      	bne.n	800137a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001370:	2315      	movs	r3, #21
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2202      	movs	r2, #2
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e003      	b.n	8001382 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800137a:	2315      	movs	r3, #21
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2204      	movs	r2, #4
 8001380:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8001382:	2316      	movs	r3, #22
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e039      	b.n	8001400 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800138c:	2116      	movs	r1, #22
 800138e:	187b      	adds	r3, r7, r1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	005a      	lsls	r2, r3, #1
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	18d0      	adds	r0, r2, r3
 8001398:	187b      	adds	r3, r7, r1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	001a      	movs	r2, r3
 80013a0:	3a20      	subs	r2, #32
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	db03      	blt.n	80013ae <HAL_FLASH_Program+0xa6>
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	40d1      	lsrs	r1, r2
 80013aa:	000c      	movs	r4, r1
 80013ac:	e008      	b.n	80013c0 <HAL_FLASH_Program+0xb8>
 80013ae:	2220      	movs	r2, #32
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	6839      	ldr	r1, [r7, #0]
 80013ba:	40d9      	lsrs	r1, r3
 80013bc:	000c      	movs	r4, r1
 80013be:	4314      	orrs	r4, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	40da      	lsrs	r2, r3
 80013c4:	0015      	movs	r5, r2
 80013c6:	b2a3      	uxth	r3, r4
 80013c8:	0019      	movs	r1, r3
 80013ca:	f000 f867 	bl	800149c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013ce:	2317      	movs	r3, #23
 80013d0:	18fe      	adds	r6, r7, r3
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_FLASH_Program+0x124>)
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 f87d 	bl	80014d4 <FLASH_WaitForLastOperation>
 80013da:	0003      	movs	r3, r0
 80013dc:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_FLASH_Program+0x128>)
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_FLASH_Program+0x128>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	438a      	bics	r2, r1
 80013e8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80013ea:	2317      	movs	r3, #23
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10e      	bne.n	8001412 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80013f4:	2116      	movs	r1, #22
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	3201      	adds	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	2316      	movs	r3, #22
 8001402:	18fa      	adds	r2, r7, r3
 8001404:	2315      	movs	r3, #21
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3bd      	bcc.n	800138c <HAL_FLASH_Program+0x84>
 8001410:	e000      	b.n	8001414 <HAL_FLASH_Program+0x10c>
      {
        break;
 8001412:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_FLASH_Program+0x120>)
 8001416:	2200      	movs	r2, #0
 8001418:	761a      	strb	r2, [r3, #24]

  return status;
 800141a:	2317      	movs	r3, #23
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	781b      	ldrb	r3, [r3, #0]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b007      	add	sp, #28
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	200003b0 	.word	0x200003b0
 800142c:	0000c350 	.word	0x0000c350
 8001430:	40022000 	.word	0x40022000

08001434 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_FLASH_Unlock+0x40>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	4013      	ands	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_FLASH_Unlock+0x40>)
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_FLASH_Unlock+0x44>)
 800144e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_FLASH_Unlock+0x40>)
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_FLASH_Unlock+0x48>)
 8001454:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_FLASH_Unlock+0x40>)
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	4013      	ands	r3, r2
 800145e:	d002      	beq.n	8001466 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40022000 	.word	0x40022000
 8001478:	45670123 	.word	0x45670123
 800147c:	cdef89ab 	.word	0xcdef89ab

08001480 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <HAL_FLASH_Lock+0x18>)
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_FLASH_Lock+0x18>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	430a      	orrs	r2, r1
 800148e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001490:	2300      	movs	r3, #0
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40022000 	.word	0x40022000

0800149c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	000a      	movs	r2, r1
 80014a6:	1cbb      	adds	r3, r7, #2
 80014a8:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <FLASH_Program_HalfWord+0x30>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <FLASH_Program_HalfWord+0x34>)
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <FLASH_Program_HalfWord+0x34>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	1cba      	adds	r2, r7, #2
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	801a      	strh	r2, [r3, #0]
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200003b0 	.word	0x200003b0
 80014d0:	40022000 	.word	0x40022000

080014d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff fe08 	bl	80010f0 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014e4:	e00f      	b.n	8001506 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	d00c      	beq.n	8001506 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <FLASH_WaitForLastOperation+0x2e>
 80014f2:	f7ff fdfd 	bl	80010f0 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d201      	bcs.n	8001506 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e01f      	b.n	8001546 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <FLASH_WaitForLastOperation+0x7c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	2b01      	cmp	r3, #1
 8001510:	d0e9      	beq.n	80014e6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <FLASH_WaitForLastOperation+0x7c>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2220      	movs	r2, #32
 8001518:	4013      	ands	r3, r2
 800151a:	2b20      	cmp	r3, #32
 800151c:	d102      	bne.n	8001524 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <FLASH_WaitForLastOperation+0x7c>)
 8001520:	2220      	movs	r2, #32
 8001522:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <FLASH_WaitForLastOperation+0x7c>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2210      	movs	r2, #16
 800152a:	4013      	ands	r3, r2
 800152c:	2b10      	cmp	r3, #16
 800152e:	d005      	beq.n	800153c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <FLASH_WaitForLastOperation+0x7c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2204      	movs	r2, #4
 8001536:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001538:	2b04      	cmp	r3, #4
 800153a:	d103      	bne.n	8001544 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800153c:	f000 f80a 	bl	8001554 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40022000 	.word	0x40022000

08001554 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <FLASH_SetErrorCode+0x58>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2210      	movs	r2, #16
 8001564:	4013      	ands	r3, r2
 8001566:	2b10      	cmp	r3, #16
 8001568:	d109      	bne.n	800157e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <FLASH_SetErrorCode+0x5c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2202      	movs	r2, #2
 8001570:	431a      	orrs	r2, r3
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <FLASH_SetErrorCode+0x5c>)
 8001574:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2210      	movs	r2, #16
 800157a:	4313      	orrs	r3, r2
 800157c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <FLASH_SetErrorCode+0x58>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2204      	movs	r2, #4
 8001584:	4013      	ands	r3, r2
 8001586:	2b04      	cmp	r3, #4
 8001588:	d109      	bne.n	800159e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <FLASH_SetErrorCode+0x5c>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2201      	movs	r2, #1
 8001590:	431a      	orrs	r2, r3
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <FLASH_SetErrorCode+0x5c>)
 8001594:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	4313      	orrs	r3, r2
 800159c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <FLASH_SetErrorCode+0x58>)
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
}  
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40022000 	.word	0x40022000
 80015b0:	200003b0 	.word	0x200003b0

080015b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80015b4:	b5b0      	push	{r4, r5, r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015be:	230f      	movs	r3, #15
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_FLASHEx_Erase+0xe0>)
 80015cc:	7e1b      	ldrb	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_FLASHEx_Erase+0x22>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e05a      	b.n	800168c <HAL_FLASHEx_Erase+0xd8>
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_FLASHEx_Erase+0xe0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d116      	bne.n	8001612 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_FLASHEx_Erase+0xe4>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff ff74 	bl	80014d4 <FLASH_WaitForLastOperation>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d147      	bne.n	8001680 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80015f0:	f000 f856 	bl	80016a0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f4:	230f      	movs	r3, #15
 80015f6:	18fc      	adds	r4, r7, r3
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_FLASHEx_Erase+0xe4>)
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff ff6a 	bl	80014d4 <FLASH_WaitForLastOperation>
 8001600:	0003      	movs	r3, r0
 8001602:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_FLASHEx_Erase+0xe8>)
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_FLASHEx_Erase+0xe8>)
 800160a:	2104      	movs	r1, #4
 800160c:	438a      	bics	r2, r1
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	e036      	b.n	8001680 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_FLASHEx_Erase+0xe4>)
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff ff5d 	bl	80014d4 <FLASH_WaitForLastOperation>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d130      	bne.n	8001680 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4252      	negs	r2, r2
 8001624:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	e01f      	b.n	800166e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	0018      	movs	r0, r3
 8001632:	f000 f84d 	bl	80016d0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001636:	250f      	movs	r5, #15
 8001638:	197c      	adds	r4, r7, r5
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_FLASHEx_Erase+0xe4>)
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff ff49 	bl	80014d4 <FLASH_WaitForLastOperation>
 8001642:	0003      	movs	r3, r0
 8001644:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_FLASHEx_Erase+0xe8>)
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_FLASHEx_Erase+0xe8>)
 800164c:	2102      	movs	r1, #2
 800164e:	438a      	bics	r2, r1
 8001650:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001652:	197b      	adds	r3, r7, r5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	601a      	str	r2, [r3, #0]
            break;
 8001660:	e00e      	b.n	8001680 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	4694      	mov	ip, r2
 800166a:	4463      	add	r3, ip
 800166c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	02da      	lsls	r2, r3, #11
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	d3d6      	bcc.n	800162e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_FLASHEx_Erase+0xe0>)
 8001682:	2200      	movs	r2, #0
 8001684:	761a      	strb	r2, [r3, #24]

  return status;
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bdb0      	pop	{r4, r5, r7, pc}
 8001694:	200003b0 	.word	0x200003b0
 8001698:	0000c350 	.word	0x0000c350
 800169c:	40022000 	.word	0x40022000

080016a0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <FLASH_MassErase+0x28>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <FLASH_MassErase+0x2c>)
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <FLASH_MassErase+0x2c>)
 80016b0:	2104      	movs	r1, #4
 80016b2:	430a      	orrs	r2, r1
 80016b4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <FLASH_MassErase+0x2c>)
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <FLASH_MassErase+0x2c>)
 80016bc:	2140      	movs	r1, #64	; 0x40
 80016be:	430a      	orrs	r2, r1
 80016c0:	611a      	str	r2, [r3, #16]
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200003b0 	.word	0x200003b0
 80016cc:	40022000 	.word	0x40022000

080016d0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <FLASH_PageErase+0x34>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <FLASH_PageErase+0x38>)
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <FLASH_PageErase+0x38>)
 80016e4:	2102      	movs	r1, #2
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <FLASH_PageErase+0x38>)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <FLASH_PageErase+0x38>)
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <FLASH_PageErase+0x38>)
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	430a      	orrs	r2, r1
 80016fa:	611a      	str	r2, [r3, #16]
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200003b0 	.word	0x200003b0
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e14f      	b.n	80019bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4091      	lsls	r1, r2
 8001726:	000a      	movs	r2, r1
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d100      	bne.n	8001734 <HAL_GPIO_Init+0x28>
 8001732:	e140      	b.n	80019b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	4013      	ands	r3, r2
 800173c:	2b01      	cmp	r3, #1
 800173e:	d005      	beq.n	800174c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001748:	2b02      	cmp	r3, #2
 800174a:	d130      	bne.n	80017ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	409a      	lsls	r2, r3
 800176e:	0013      	movs	r3, r2
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001782:	2201      	movs	r2, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	2201      	movs	r2, #1
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d017      	beq.n	80017ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d123      	bne.n	800183e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	58d3      	ldr	r3, [r2, r3]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2207      	movs	r2, #7
 8001808:	4013      	ands	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2107      	movs	r1, #7
 8001822:	400b      	ands	r3, r1
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	6939      	ldr	r1, [r7, #16]
 800183c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	43da      	mvns	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	401a      	ands	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	23c0      	movs	r3, #192	; 0xc0
 8001878:	029b      	lsls	r3, r3, #10
 800187a:	4013      	ands	r3, r2
 800187c:	d100      	bne.n	8001880 <HAL_GPIO_Init+0x174>
 800187e:	e09a      	b.n	80019b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b54      	ldr	r3, [pc, #336]	; (80019d4 <HAL_GPIO_Init+0x2c8>)
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_GPIO_Init+0x2c8>)
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	619a      	str	r2, [r3, #24]
 800188c:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <HAL_GPIO_Init+0x2c8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	589b      	ldr	r3, [r3, r2]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	409a      	lsls	r2, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	43da      	mvns	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	2390      	movs	r3, #144	; 0x90
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a44      	ldr	r2, [pc, #272]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x1de>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a43      	ldr	r2, [pc, #268]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x1da>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a42      	ldr	r2, [pc, #264]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x1d6>
 80018de:	2303      	movs	r3, #3
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x1e4>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e004      	b.n	80018f0 <HAL_GPIO_Init+0x1e4>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_Init+0x1e4>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x1e4>
 80018ee:	2300      	movs	r3, #0
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	2103      	movs	r1, #3
 80018f4:	400a      	ands	r2, r1
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4093      	lsls	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001900:	4935      	ldr	r1, [pc, #212]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	4013      	ands	r3, r2
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43da      	mvns	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	4013      	ands	r3, r2
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	40da      	lsrs	r2, r3
 80019c4:	1e13      	subs	r3, r2, #0
 80019c6:	d000      	beq.n	80019ca <HAL_GPIO_Init+0x2be>
 80019c8:	e6a8      	b.n	800171c <HAL_GPIO_Init+0x10>
  } 
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b006      	add	sp, #24
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	48000400 	.word	0x48000400
 80019e0:	48000800 	.word	0x48000800
 80019e4:	48000c00 	.word	0x48000c00
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	000a      	movs	r2, r1
 80019f6:	1cbb      	adds	r3, r7, #2
 80019f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	1cba      	adds	r2, r7, #2
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	4013      	ands	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a06:	230f      	movs	r3, #15
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a10:	230f      	movs	r3, #15
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
  }
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	0008      	movs	r0, r1
 8001a30:	0011      	movs	r1, r2
 8001a32:	1cbb      	adds	r3, r7, #2
 8001a34:	1c02      	adds	r2, r0, #0
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	1c7b      	adds	r3, r7, #1
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3e:	1c7b      	adds	r3, r7, #1
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a46:	1cbb      	adds	r3, r7, #2
 8001a48:	881a      	ldrh	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a50:	1cbb      	adds	r3, r7, #2
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e305      	b.n	800207e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x1e>
 8001a7c:	e08d      	b.n	8001b9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a7e:	4bc5      	ldr	r3, [pc, #788]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	220c      	movs	r2, #12
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d00e      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8a:	4bc2      	ldr	r3, [pc, #776]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	220c      	movs	r2, #12
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x64>
 8001a96:	4bbf      	ldr	r3, [pc, #764]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	4bba      	ldr	r3, [pc, #744]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x56>
 8001ab4:	e070      	b.n	8001b98 <HAL_RCC_OscConfig+0x138>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d000      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x60>
 8001abe:	e06b      	b.n	8001b98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2dc      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x7c>
 8001acc:	4bb1      	ldr	r3, [pc, #708]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4bb0      	ldr	r3, [pc, #704]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0249      	lsls	r1, r1, #9
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e02f      	b.n	8001b3c <HAL_RCC_OscConfig+0xdc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x9e>
 8001ae4:	4bab      	ldr	r3, [pc, #684]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001aea:	49ab      	ldr	r1, [pc, #684]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	4ba8      	ldr	r3, [pc, #672]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4ba7      	ldr	r3, [pc, #668]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001af6:	49a9      	ldr	r1, [pc, #676]	; (8001d9c <HAL_RCC_OscConfig+0x33c>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e01e      	b.n	8001b3c <HAL_RCC_OscConfig+0xdc>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d10e      	bne.n	8001b24 <HAL_RCC_OscConfig+0xc4>
 8001b06:	4ba3      	ldr	r3, [pc, #652]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4ba2      	ldr	r3, [pc, #648]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	02c9      	lsls	r1, r1, #11
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	4b9f      	ldr	r3, [pc, #636]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0249      	lsls	r1, r1, #9
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xdc>
 8001b24:	4b9b      	ldr	r3, [pc, #620]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b9a      	ldr	r3, [pc, #616]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b2a:	499b      	ldr	r1, [pc, #620]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b97      	ldr	r3, [pc, #604]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b36:	4999      	ldr	r1, [pc, #612]	; (8001d9c <HAL_RCC_OscConfig+0x33c>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d014      	beq.n	8001b6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fad4 	bl	80010f0 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4e:	f7ff facf 	bl	80010f0 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e28e      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b60:	4b8c      	ldr	r3, [pc, #560]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0xee>
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fabf 	bl	80010f0 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff faba 	bl	80010f0 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e279      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x118>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x146>
 8001ba4:	e06c      	b.n	8001c80 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	220c      	movs	r2, #12
 8001bac:	4013      	ands	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bb0:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d11f      	bne.n	8001bfc <HAL_RCC_OscConfig+0x19c>
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	23c0      	movs	r3, #192	; 0xc0
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_OscConfig+0x184>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e24c      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b6b      	ldr	r3, [pc, #428]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	22f8      	movs	r2, #248	; 0xf8
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00da      	lsls	r2, r3, #3
 8001bf4:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e041      	b.n	8001c80 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d024      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fa6e 	bl	80010f0 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fa69 	bl	80010f0 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e228      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0f1      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	22f8      	movs	r2, #248	; 0xf8
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00da      	lsls	r2, r3, #3
 8001c46:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b51      	ldr	r3, [pc, #324]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	438a      	bics	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa49 	bl	80010f0 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fa44 	bl	80010f0 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e203      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d1f1      	bne.n	8001c64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d019      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fa27 	bl	80010f0 <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fa22 	bl	80010f0 <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1e1      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f1      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x248>
 8001cc4:	e018      	b.n	8001cf8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	438a      	bics	r2, r1
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fa0d 	bl	80010f0 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fa08 	bl	80010f0 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1c7      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1f1      	bne.n	8001cdc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d100      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2a4>
 8001d02:	e0b5      	b.n	8001e70 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d04:	201f      	movs	r0, #31
 8001d06:	183b      	adds	r3, r7, r0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	055b      	lsls	r3, r3, #21
 8001d14:	4013      	ands	r3, r2
 8001d16:	d110      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	0549      	lsls	r1, r1, #21
 8001d22:	430a      	orrs	r2, r1
 8001d24:	61da      	str	r2, [r3, #28]
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_OscConfig+0x340>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_RCC_OscConfig+0x340>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_RCC_OscConfig+0x340>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d54:	f7ff f9cc 	bl	80010f0 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff f9c7 	bl	80010f0 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e186      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x340>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x344>
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <HAL_RCC_OscConfig+0x334>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	621a      	str	r2, [r3, #32]
 8001d90:	e036      	b.n	8001e00 <HAL_RCC_OscConfig+0x3a0>
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	40021000 	.word	0x40021000
 8001d98:	fffeffff 	.word	0xfffeffff
 8001d9c:	fffbffff 	.word	0xfffbffff
 8001da0:	40007000 	.word	0x40007000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x366>
 8001dac:	4bb6      	ldr	r3, [pc, #728]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	4bb5      	ldr	r3, [pc, #724]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	438a      	bics	r2, r1
 8001db6:	621a      	str	r2, [r3, #32]
 8001db8:	4bb3      	ldr	r3, [pc, #716]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	4bb2      	ldr	r3, [pc, #712]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	621a      	str	r2, [r3, #32]
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x3a0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x388>
 8001dce:	4bae      	ldr	r3, [pc, #696]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	4bad      	ldr	r3, [pc, #692]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	621a      	str	r2, [r3, #32]
 8001dda:	4bab      	ldr	r3, [pc, #684]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	4baa      	ldr	r3, [pc, #680]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	621a      	str	r2, [r3, #32]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0x3a0>
 8001de8:	4ba7      	ldr	r3, [pc, #668]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	4ba6      	ldr	r3, [pc, #664]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	621a      	str	r2, [r3, #32]
 8001df4:	4ba4      	ldr	r3, [pc, #656]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4ba3      	ldr	r3, [pc, #652]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d014      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff f972 	bl	80010f0 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e009      	b.n	8001e26 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff f96d 	bl	80010f0 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	4a9b      	ldr	r2, [pc, #620]	; (800208c <HAL_RCC_OscConfig+0x62c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e12b      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e26:	4b98      	ldr	r3, [pc, #608]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3b2>
 8001e30:	e013      	b.n	8001e5a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f95d 	bl	80010f0 <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3a:	e009      	b.n	8001e50 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f958 	bl	80010f0 <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a91      	ldr	r2, [pc, #580]	; (800208c <HAL_RCC_OscConfig+0x62c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e116      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b8d      	ldr	r3, [pc, #564]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e5a:	231f      	movs	r3, #31
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	4b87      	ldr	r3, [pc, #540]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e6a:	4989      	ldr	r1, [pc, #548]	; (8002090 <HAL_RCC_OscConfig+0x630>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2210      	movs	r2, #16
 8001e76:	4013      	ands	r3, r2
 8001e78:	d063      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d12a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e82:	4b81      	ldr	r3, [pc, #516]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e86:	4b80      	ldr	r3, [pc, #512]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e88:	2104      	movs	r1, #4
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e8e:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff f929 	bl	80010f0 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ea4:	f7ff f924 	bl	80010f0 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0e3      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb6:	4b74      	ldr	r3, [pc, #464]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f1      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ec0:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	22f8      	movs	r2, #248	; 0xf8
 8001ec6:	4393      	bics	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	00da      	lsls	r2, r3, #3
 8001ed0:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed6:	e034      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	3305      	adds	r3, #5
 8001ede:	d111      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ee0:	4b69      	ldr	r3, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	438a      	bics	r2, r1
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	22f8      	movs	r2, #248	; 0xf8
 8001ef2:	4393      	bics	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	00da      	lsls	r2, r3, #3
 8001efc:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
 8001f02:	e01e      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f04:	4b60      	ldr	r3, [pc, #384]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f08:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f10:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f14:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	438a      	bics	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f8e8 	bl	80010f0 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f26:	f7ff f8e3 	bl	80010f0 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0a2      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d1f1      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d100      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4ec>
 8001f4a:	e097      	b.n	800207c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	220c      	movs	r2, #12
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d100      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4fa>
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d14c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b48      	ldr	r3, [pc, #288]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f68:	494a      	ldr	r1, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x634>)
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f8bf 	bl	80010f0 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff f8ba 	bl	80010f0 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e079      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	049b      	lsls	r3, r3, #18
 8001f92:	4013      	ands	r3, r2
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a3a      	ldr	r2, [pc, #232]	; (8002098 <HAL_RCC_OscConfig+0x638>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	0449      	lsls	r1, r1, #17
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f88d 	bl	80010f0 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff f888 	bl	80010f0 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e047      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	049b      	lsls	r3, r3, #18
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x57c>
 8001ffa:	e03f      	b.n	800207c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8002002:	4924      	ldr	r1, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x634>)
 8002004:	400a      	ands	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f872 	bl	80010f0 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff f86d 	bl	80010f0 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e02c      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	049b      	lsls	r3, r3, #18
 800202c:	4013      	ands	r3, r2
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x5b2>
 8002030:	e024      	b.n	800207c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e01f      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_OscConfig+0x628>)
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	025b      	lsls	r3, r3, #9
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	429a      	cmp	r2, r3
 8002058:	d10e      	bne.n	8002078 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	220f      	movs	r2, #15
 800205e:	401a      	ands	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	23f0      	movs	r3, #240	; 0xf0
 800206c:	039b      	lsls	r3, r3, #14
 800206e:	401a      	ands	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b008      	add	sp, #32
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	40021000 	.word	0x40021000
 800208c:	00001388 	.word	0x00001388
 8002090:	efffffff 	.word	0xefffffff
 8002094:	feffffff 	.word	0xfeffffff
 8002098:	ffc27fff 	.word	0xffc27fff

0800209c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b3      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d911      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4393      	bics	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e09a      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d015      	beq.n	8002118 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2204      	movs	r2, #4
 80020f2:	4013      	ands	r3, r2
 80020f4:	d006      	beq.n	8002104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020f6:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 80020fc:	21e0      	movs	r1, #224	; 0xe0
 80020fe:	00c9      	lsls	r1, r1, #3
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	22f0      	movs	r2, #240	; 0xf0
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	4b44      	ldr	r3, [pc, #272]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	d040      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	029b      	lsls	r3, r3, #10
 8002132:	4013      	ands	r3, r2
 8002134:	d114      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06e      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	049b      	lsls	r3, r3, #18
 800214a:	4013      	ands	r3, r2
 800214c:	d108      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e062      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4b34      	ldr	r3, [pc, #208]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2202      	movs	r2, #2
 8002158:	4013      	ands	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e05b      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	4393      	bics	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe ffbc 	bl	80010f0 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217c:	e009      	b.n	8002192 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217e:	f7fe ffb7 	bl	80010f0 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_RCC_ClockConfig+0x18c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e042      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	220c      	movs	r2, #12
 8002198:	401a      	ands	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1ec      	bne.n	800217e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d211      	bcs.n	80021d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4393      	bics	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x184>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e020      	b.n	8002218 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2204      	movs	r2, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_RCC_ClockConfig+0x190>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021f4:	f000 f820 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021f8:	0001      	movs	r1, r0
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x188>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	220f      	movs	r2, #15
 8002202:	4013      	ands	r3, r2
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x194>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	000a      	movs	r2, r1
 800220a:	40da      	lsrs	r2, r3
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x198>)
 800220e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe ff27 	bl	8001064 <HAL_InitTick>
  
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	00001388 	.word	0x00001388
 800222c:	fffff8ff 	.word	0xfffff8ff
 8002230:	08003e28 	.word	0x08003e28
 8002234:	20000000 	.word	0x20000000

08002238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b08f      	sub	sp, #60	; 0x3c
 800223c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800223e:	2314      	movs	r3, #20
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002246:	c313      	stmia	r3!, {r0, r1, r4}
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002252:	c313      	stmia	r3!, {r0, r1, r4}
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	220c      	movs	r2, #12
 8002276:	4013      	ands	r3, r2
 8002278:	2b04      	cmp	r3, #4
 800227a:	d002      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x4a>
 800227c:	2b08      	cmp	r3, #8
 800227e:	d003      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x50>
 8002280:	e02f      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002286:	e02f      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	0c9b      	lsrs	r3, r3, #18
 800228c:	220f      	movs	r2, #15
 800228e:	4013      	ands	r3, r2
 8002290:	2214      	movs	r2, #20
 8002292:	18ba      	adds	r2, r7, r2
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	220f      	movs	r2, #15
 800229e:	4013      	ands	r3, r2
 80022a0:	1d3a      	adds	r2, r7, #4
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	025b      	lsls	r3, r3, #9
 80022ac:	401a      	ands	r2, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b8:	4811      	ldr	r0, [pc, #68]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ba:	f7fd ff2f 	bl	800011c <__udivsi3>
 80022be:	0003      	movs	r3, r0
 80022c0:	001a      	movs	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	4353      	muls	r3, r2
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
 80022c8:	e008      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ce:	f7fd ff25 	bl	800011c <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	001a      	movs	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	4353      	muls	r3, r2
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b00f      	add	sp, #60	; 0x3c
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	08003e08 	.word	0x08003e08
 80022f8:	08003e18 	.word	0x08003e18
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <HAL_RCC_GetHCLKFreq+0x10>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800231c:	f7ff fff2 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002320:	0001      	movs	r1, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	2207      	movs	r2, #7
 800232a:	4013      	ands	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	40d9      	lsrs	r1, r3
 8002332:	000b      	movs	r3, r1
}    
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	40021000 	.word	0x40021000
 8002340:	08003e38 	.word	0x08003e38

08002344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e044      	b.n	80023e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2274      	movs	r2, #116	; 0x74
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe fb93 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2224      	movs	r2, #36	; 0x24
 8002372:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2101      	movs	r1, #1
 8002380:	438a      	bics	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f000 f8da 	bl	8002540 <UART_SetConfig>
 800238c:	0003      	movs	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e024      	b.n	80023e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 fa25 	bl	80027f0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	490d      	ldr	r1, [pc, #52]	; (80023e8 <HAL_UART_Init+0xa4>)
 80023b2:	400a      	ands	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2108      	movs	r1, #8
 80023c2:	438a      	bics	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 fabd 	bl	8002958 <UART_CheckIdleState>
 80023de:	0003      	movs	r3, r0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	fffff7ff 	.word	0xfffff7ff

080023ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002400:	2b20      	cmp	r3, #32
 8002402:	d000      	beq.n	8002406 <HAL_UART_Transmit+0x1a>
 8002404:	e096      	b.n	8002534 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_UART_Transmit+0x28>
 800240c:	1dbb      	adds	r3, r7, #6
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e08e      	b.n	8002536 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	429a      	cmp	r2, r3
 8002422:	d109      	bne.n	8002438 <HAL_UART_Transmit+0x4c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d001      	beq.n	8002438 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e07e      	b.n	8002536 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2274      	movs	r2, #116	; 0x74
 800243c:	5c9b      	ldrb	r3, [r3, r2]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_UART_Transmit+0x5a>
 8002442:	2302      	movs	r3, #2
 8002444:	e077      	b.n	8002536 <HAL_UART_Transmit+0x14a>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2274      	movs	r2, #116	; 0x74
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	2100      	movs	r1, #0
 8002454:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245c:	f7fe fe48 	bl	80010f0 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1dba      	adds	r2, r7, #6
 8002468:	2150      	movs	r1, #80	; 0x50
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1dba      	adds	r2, r7, #6
 8002472:	2152      	movs	r1, #82	; 0x52
 8002474:	8812      	ldrh	r2, [r2, #0]
 8002476:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	015b      	lsls	r3, r3, #5
 8002480:	429a      	cmp	r2, r3
 8002482:	d108      	bne.n	8002496 <HAL_UART_Transmit+0xaa>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e003      	b.n	800249e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2274      	movs	r2, #116	; 0x74
 80024a2:	2100      	movs	r1, #0
 80024a4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80024a6:	e02d      	b.n	8002504 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	0013      	movs	r3, r2
 80024b2:	2200      	movs	r2, #0
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	f000 fa97 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e039      	b.n	8002536 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	05d2      	lsls	r2, r2, #23
 80024d2:	0dd2      	lsrs	r2, r2, #23
 80024d4:	b292      	uxth	r2, r2
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	3302      	adds	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e008      	b.n	80024f2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b292      	uxth	r2, r2
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2252      	movs	r2, #82	; 0x52
 80024f6:	5a9b      	ldrh	r3, [r3, r2]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b299      	uxth	r1, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2252      	movs	r2, #82	; 0x52
 8002502:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2252      	movs	r2, #82	; 0x52
 8002508:	5a9b      	ldrh	r3, [r3, r2]
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1cb      	bne.n	80024a8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	0013      	movs	r3, r2
 800251a:	2200      	movs	r2, #0
 800251c:	2140      	movs	r1, #64	; 0x40
 800251e:	f000 fa63 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d001      	beq.n	800252a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e005      	b.n	8002536 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b008      	add	sp, #32
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002548:	231e      	movs	r3, #30
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a97      	ldr	r2, [pc, #604]	; (80027cc <UART_SetConfig+0x28c>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a92      	ldr	r2, [pc, #584]	; (80027d0 <UART_SetConfig+0x290>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a89      	ldr	r2, [pc, #548]	; (80027d4 <UART_SetConfig+0x294>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a85      	ldr	r2, [pc, #532]	; (80027d8 <UART_SetConfig+0x298>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d127      	bne.n	8002616 <UART_SetConfig+0xd6>
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <UART_SetConfig+0x29c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	2203      	movs	r2, #3
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d00d      	beq.n	80025ee <UART_SetConfig+0xae>
 80025d2:	d81b      	bhi.n	800260c <UART_SetConfig+0xcc>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d014      	beq.n	8002602 <UART_SetConfig+0xc2>
 80025d8:	d818      	bhi.n	800260c <UART_SetConfig+0xcc>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <UART_SetConfig+0xa4>
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d00a      	beq.n	80025f8 <UART_SetConfig+0xb8>
 80025e2:	e013      	b.n	800260c <UART_SetConfig+0xcc>
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e035      	b.n	800265a <UART_SetConfig+0x11a>
 80025ee:	231f      	movs	r3, #31
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e030      	b.n	800265a <UART_SetConfig+0x11a>
 80025f8:	231f      	movs	r3, #31
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2204      	movs	r2, #4
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e02b      	b.n	800265a <UART_SetConfig+0x11a>
 8002602:	231f      	movs	r3, #31
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2208      	movs	r2, #8
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e026      	b.n	800265a <UART_SetConfig+0x11a>
 800260c:	231f      	movs	r3, #31
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2210      	movs	r2, #16
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e021      	b.n	800265a <UART_SetConfig+0x11a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a71      	ldr	r2, [pc, #452]	; (80027e0 <UART_SetConfig+0x2a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d104      	bne.n	800262a <UART_SetConfig+0xea>
 8002620:	231f      	movs	r3, #31
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e017      	b.n	800265a <UART_SetConfig+0x11a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6d      	ldr	r2, [pc, #436]	; (80027e4 <UART_SetConfig+0x2a4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d104      	bne.n	800263e <UART_SetConfig+0xfe>
 8002634:	231f      	movs	r3, #31
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e00d      	b.n	800265a <UART_SetConfig+0x11a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <UART_SetConfig+0x2a8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d104      	bne.n	8002652 <UART_SetConfig+0x112>
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e003      	b.n	800265a <UART_SetConfig+0x11a>
 8002652:	231f      	movs	r3, #31
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2210      	movs	r2, #16
 8002658:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	429a      	cmp	r2, r3
 8002664:	d15d      	bne.n	8002722 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8002666:	231f      	movs	r3, #31
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d015      	beq.n	800269c <UART_SetConfig+0x15c>
 8002670:	dc18      	bgt.n	80026a4 <UART_SetConfig+0x164>
 8002672:	2b04      	cmp	r3, #4
 8002674:	d00d      	beq.n	8002692 <UART_SetConfig+0x152>
 8002676:	dc15      	bgt.n	80026a4 <UART_SetConfig+0x164>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <UART_SetConfig+0x142>
 800267c:	2b02      	cmp	r3, #2
 800267e:	d005      	beq.n	800268c <UART_SetConfig+0x14c>
 8002680:	e010      	b.n	80026a4 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002682:	f7ff fe49 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8002686:	0003      	movs	r3, r0
 8002688:	61bb      	str	r3, [r7, #24]
        break;
 800268a:	e012      	b.n	80026b2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800268c:	4b57      	ldr	r3, [pc, #348]	; (80027ec <UART_SetConfig+0x2ac>)
 800268e:	61bb      	str	r3, [r7, #24]
        break;
 8002690:	e00f      	b.n	80026b2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002692:	f7ff fdd1 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002696:	0003      	movs	r3, r0
 8002698:	61bb      	str	r3, [r7, #24]
        break;
 800269a:	e00a      	b.n	80026b2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	61bb      	str	r3, [r7, #24]
        break;
 80026a2:	e006      	b.n	80026b2 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026a8:	231e      	movs	r3, #30
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
        break;
 80026b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d100      	bne.n	80026ba <UART_SetConfig+0x17a>
 80026b8:	e07b      	b.n	80027b2 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	005a      	lsls	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	18d2      	adds	r2, r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0019      	movs	r1, r3
 80026cc:	0010      	movs	r0, r2
 80026ce:	f7fd fd25 	bl	800011c <__udivsi3>
 80026d2:	0003      	movs	r3, r0
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d91c      	bls.n	8002718 <UART_SetConfig+0x1d8>
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	025b      	lsls	r3, r3, #9
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d217      	bcs.n	8002718 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	200e      	movs	r0, #14
 80026ee:	183b      	adds	r3, r7, r0
 80026f0:	210f      	movs	r1, #15
 80026f2:	438a      	bics	r2, r1
 80026f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2207      	movs	r2, #7
 80026fe:	4013      	ands	r3, r2
 8002700:	b299      	uxth	r1, r3
 8002702:	183b      	adds	r3, r7, r0
 8002704:	183a      	adds	r2, r7, r0
 8002706:	8812      	ldrh	r2, [r2, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	183a      	adds	r2, r7, r0
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	e04c      	b.n	80027b2 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8002718:	231e      	movs	r3, #30
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e047      	b.n	80027b2 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002722:	231f      	movs	r3, #31
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d015      	beq.n	8002758 <UART_SetConfig+0x218>
 800272c:	dc18      	bgt.n	8002760 <UART_SetConfig+0x220>
 800272e:	2b04      	cmp	r3, #4
 8002730:	d00d      	beq.n	800274e <UART_SetConfig+0x20e>
 8002732:	dc15      	bgt.n	8002760 <UART_SetConfig+0x220>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <UART_SetConfig+0x1fe>
 8002738:	2b02      	cmp	r3, #2
 800273a:	d005      	beq.n	8002748 <UART_SetConfig+0x208>
 800273c:	e010      	b.n	8002760 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273e:	f7ff fdeb 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8002742:	0003      	movs	r3, r0
 8002744:	61bb      	str	r3, [r7, #24]
        break;
 8002746:	e012      	b.n	800276e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <UART_SetConfig+0x2ac>)
 800274a:	61bb      	str	r3, [r7, #24]
        break;
 800274c:	e00f      	b.n	800276e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800274e:	f7ff fd73 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002752:	0003      	movs	r3, r0
 8002754:	61bb      	str	r3, [r7, #24]
        break;
 8002756:	e00a      	b.n	800276e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	61bb      	str	r3, [r7, #24]
        break;
 800275e:	e006      	b.n	800276e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002764:	231e      	movs	r3, #30
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
        break;
 800276c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01e      	beq.n	80027b2 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	085a      	lsrs	r2, r3, #1
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	18d2      	adds	r2, r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	0019      	movs	r1, r3
 8002784:	0010      	movs	r0, r2
 8002786:	f7fd fcc9 	bl	800011c <__udivsi3>
 800278a:	0003      	movs	r3, r0
 800278c:	b29b      	uxth	r3, r3
 800278e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	d909      	bls.n	80027aa <UART_SetConfig+0x26a>
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	025b      	lsls	r3, r3, #9
 800279c:	429a      	cmp	r2, r3
 800279e:	d204      	bcs.n	80027aa <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	e003      	b.n	80027b2 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80027aa:	231e      	movs	r3, #30
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027be:	231e      	movs	r3, #30
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	781b      	ldrb	r3, [r3, #0]
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b008      	add	sp, #32
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	efff69f3 	.word	0xefff69f3
 80027d0:	ffffcfff 	.word	0xffffcfff
 80027d4:	fffff4ff 	.word	0xfffff4ff
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40004400 	.word	0x40004400
 80027e4:	40004800 	.word	0x40004800
 80027e8:	40004c00 	.word	0x40004c00
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2201      	movs	r2, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	d00b      	beq.n	800281a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <UART_AdvFeatureConfig+0x144>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d00b      	beq.n	800283c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a43      	ldr	r2, [pc, #268]	; (8002938 <UART_AdvFeatureConfig+0x148>)
 800282c:	4013      	ands	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d00b      	beq.n	800285e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a3b      	ldr	r2, [pc, #236]	; (800293c <UART_AdvFeatureConfig+0x14c>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2208      	movs	r2, #8
 8002864:	4013      	ands	r3, r2
 8002866:	d00b      	beq.n	8002880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a34      	ldr	r2, [pc, #208]	; (8002940 <UART_AdvFeatureConfig+0x150>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2210      	movs	r2, #16
 8002886:	4013      	ands	r3, r2
 8002888:	d00b      	beq.n	80028a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <UART_AdvFeatureConfig+0x154>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2220      	movs	r2, #32
 80028a8:	4013      	ands	r3, r2
 80028aa:	d00b      	beq.n	80028c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4a25      	ldr	r2, [pc, #148]	; (8002948 <UART_AdvFeatureConfig+0x158>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	d01d      	beq.n	800290a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a1d      	ldr	r2, [pc, #116]	; (800294c <UART_AdvFeatureConfig+0x15c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	035b      	lsls	r3, r3, #13
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10b      	bne.n	800290a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <UART_AdvFeatureConfig+0x160>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	4013      	ands	r3, r2
 8002912:	d00b      	beq.n	800292c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <UART_AdvFeatureConfig+0x164>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
  }
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fffdffff 	.word	0xfffdffff
 8002938:	fffeffff 	.word	0xfffeffff
 800293c:	fffbffff 	.word	0xfffbffff
 8002940:	ffff7fff 	.word	0xffff7fff
 8002944:	ffffefff 	.word	0xffffefff
 8002948:	ffffdfff 	.word	0xffffdfff
 800294c:	ffefffff 	.word	0xffefffff
 8002950:	ff9fffff 	.word	0xff9fffff
 8002954:	fff7ffff 	.word	0xfff7ffff

08002958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	2100      	movs	r1, #0
 8002966:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002968:	f7fe fbc2 	bl	80010f0 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2208      	movs	r2, #8
 8002978:	4013      	ands	r3, r2
 800297a:	2b08      	cmp	r3, #8
 800297c:	d10c      	bne.n	8002998 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0391      	lsls	r1, r2, #14
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <UART_CheckIdleState+0x8c>)
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	f000 f82c 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e021      	b.n	80029dc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2204      	movs	r2, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d10c      	bne.n	80029c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	03d1      	lsls	r1, r2, #15
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <UART_CheckIdleState+0x8c>)
 80029b0:	9200      	str	r2, [sp, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f000 f818 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e00d      	b.n	80029dc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2274      	movs	r2, #116	; 0x74
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b004      	add	sp, #16
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	01ffffff 	.word	0x01ffffff

080029e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b094      	sub	sp, #80	; 0x50
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f8:	e0a3      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	3301      	adds	r3, #1
 80029fe:	d100      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a00:	e09f      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fb75 	bl	80010f0 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d13d      	bne.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
 8002a22:	2301      	movs	r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	494c      	ldr	r1, [pc, #304]	; (8002b6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
 8002a54:	2301      	movs	r3, #1
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2274      	movs	r2, #116	; 0x74
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e067      	b.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d050      	beq.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	401a      	ands	r2, r3
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d146      	bne.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8002ac4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	2301      	movs	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4923      	ldr	r1, [pc, #140]	; (8002b6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f383 8810 	msr	PRIMASK, r3
}
 8002aee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af0:	f3ef 8310 	mrs	r3, PRIMASK
 8002af4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002af6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002afa:	2301      	movs	r3, #1
 8002afc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f383 8810 	msr	PRIMASK, r3
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	438a      	bics	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	2120      	movs	r1, #32
 8002b34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2274      	movs	r2, #116	; 0x74
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e010      	b.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	425a      	negs	r2, r3
 8002b52:	4153      	adcs	r3, r2
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	001a      	movs	r2, r3
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d100      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b60:	e74b      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b014      	add	sp, #80	; 0x50
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	fffffe5f 	.word	0xfffffe5f

08002b70 <__errno>:
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <__errno+0x8>)
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	4770      	bx	lr
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	2000000c 	.word	0x2000000c

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	2600      	movs	r6, #0
 8002b80:	4d0c      	ldr	r5, [pc, #48]	; (8002bb4 <__libc_init_array+0x38>)
 8002b82:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b84:	1b64      	subs	r4, r4, r5
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	42a6      	cmp	r6, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	f001 f875 	bl	8003c7c <_init>
 8002b92:	4d0a      	ldr	r5, [pc, #40]	; (8002bbc <__libc_init_array+0x40>)
 8002b94:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <__libc_init_array+0x44>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	42a6      	cmp	r6, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	00b3      	lsls	r3, r6, #2
 8002ba2:	58eb      	ldr	r3, [r5, r3]
 8002ba4:	4798      	blx	r3
 8002ba6:	3601      	adds	r6, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	00b3      	lsls	r3, r6, #2
 8002bac:	58eb      	ldr	r3, [r5, r3]
 8002bae:	4798      	blx	r3
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	08003ed8 	.word	0x08003ed8
 8002bb8:	08003ed8 	.word	0x08003ed8
 8002bbc:	08003ed8 	.word	0x08003ed8
 8002bc0:	08003edc 	.word	0x08003edc

08002bc4 <memset>:
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	1882      	adds	r2, r0, r2
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	7019      	strb	r1, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <iprintf>:
 8002bd4:	b40f      	push	{r0, r1, r2, r3}
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <iprintf+0x30>)
 8002bd8:	b513      	push	{r0, r1, r4, lr}
 8002bda:	681c      	ldr	r4, [r3, #0]
 8002bdc:	2c00      	cmp	r4, #0
 8002bde:	d005      	beq.n	8002bec <iprintf+0x18>
 8002be0:	69a3      	ldr	r3, [r4, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <iprintf+0x18>
 8002be6:	0020      	movs	r0, r4
 8002be8:	f000 fa86 	bl	80030f8 <__sinit>
 8002bec:	ab05      	add	r3, sp, #20
 8002bee:	0020      	movs	r0, r4
 8002bf0:	9a04      	ldr	r2, [sp, #16]
 8002bf2:	68a1      	ldr	r1, [r4, #8]
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	f000 fc99 	bl	800352c <_vfiprintf_r>
 8002bfa:	bc16      	pop	{r1, r2, r4}
 8002bfc:	bc08      	pop	{r3}
 8002bfe:	b004      	add	sp, #16
 8002c00:	4718      	bx	r3
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <_puts_r>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	0005      	movs	r5, r0
 8002c0c:	000e      	movs	r6, r1
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d004      	beq.n	8002c1c <_puts_r+0x14>
 8002c12:	6983      	ldr	r3, [r0, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <_puts_r+0x14>
 8002c18:	f000 fa6e 	bl	80030f8 <__sinit>
 8002c1c:	69ab      	ldr	r3, [r5, #24]
 8002c1e:	68ac      	ldr	r4, [r5, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <_puts_r+0x22>
 8002c24:	0028      	movs	r0, r5
 8002c26:	f000 fa67 	bl	80030f8 <__sinit>
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <_puts_r+0xd8>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d122      	bne.n	8002c76 <_puts_r+0x6e>
 8002c30:	686c      	ldr	r4, [r5, #4]
 8002c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c34:	07db      	lsls	r3, r3, #31
 8002c36:	d405      	bmi.n	8002c44 <_puts_r+0x3c>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	059b      	lsls	r3, r3, #22
 8002c3c:	d402      	bmi.n	8002c44 <_puts_r+0x3c>
 8002c3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c40:	f000 fafb 	bl	800323a <__retarget_lock_acquire_recursive>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	071b      	lsls	r3, r3, #28
 8002c48:	d502      	bpl.n	8002c50 <_puts_r+0x48>
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d129      	bne.n	8002ca4 <_puts_r+0x9c>
 8002c50:	0021      	movs	r1, r4
 8002c52:	0028      	movs	r0, r5
 8002c54:	f000 f8aa 	bl	8002dac <__swsetup_r>
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d023      	beq.n	8002ca4 <_puts_r+0x9c>
 8002c5c:	2501      	movs	r5, #1
 8002c5e:	426d      	negs	r5, r5
 8002c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c62:	07db      	lsls	r3, r3, #31
 8002c64:	d405      	bmi.n	8002c72 <_puts_r+0x6a>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	059b      	lsls	r3, r3, #22
 8002c6a:	d402      	bmi.n	8002c72 <_puts_r+0x6a>
 8002c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c6e:	f000 fae5 	bl	800323c <__retarget_lock_release_recursive>
 8002c72:	0028      	movs	r0, r5
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <_puts_r+0xdc>)
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	d101      	bne.n	8002c80 <_puts_r+0x78>
 8002c7c:	68ac      	ldr	r4, [r5, #8]
 8002c7e:	e7d8      	b.n	8002c32 <_puts_r+0x2a>
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <_puts_r+0xe0>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d1d5      	bne.n	8002c32 <_puts_r+0x2a>
 8002c86:	68ec      	ldr	r4, [r5, #12]
 8002c88:	e7d3      	b.n	8002c32 <_puts_r+0x2a>
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	60a3      	str	r3, [r4, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da04      	bge.n	8002c9c <_puts_r+0x94>
 8002c92:	69a2      	ldr	r2, [r4, #24]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dc16      	bgt.n	8002cc6 <_puts_r+0xbe>
 8002c98:	290a      	cmp	r1, #10
 8002c9a:	d014      	beq.n	8002cc6 <_puts_r+0xbe>
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	6022      	str	r2, [r4, #0]
 8002ca2:	7019      	strb	r1, [r3, #0]
 8002ca4:	68a3      	ldr	r3, [r4, #8]
 8002ca6:	7831      	ldrb	r1, [r6, #0]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	2900      	cmp	r1, #0
 8002cac:	d1ed      	bne.n	8002c8a <_puts_r+0x82>
 8002cae:	60a3      	str	r3, [r4, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da0f      	bge.n	8002cd4 <_puts_r+0xcc>
 8002cb4:	0028      	movs	r0, r5
 8002cb6:	0022      	movs	r2, r4
 8002cb8:	310a      	adds	r1, #10
 8002cba:	f000 f821 	bl	8002d00 <__swbuf_r>
 8002cbe:	250a      	movs	r5, #10
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d1cd      	bne.n	8002c60 <_puts_r+0x58>
 8002cc4:	e7ca      	b.n	8002c5c <_puts_r+0x54>
 8002cc6:	0022      	movs	r2, r4
 8002cc8:	0028      	movs	r0, r5
 8002cca:	f000 f819 	bl	8002d00 <__swbuf_r>
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	d1e8      	bne.n	8002ca4 <_puts_r+0x9c>
 8002cd2:	e7c3      	b.n	8002c5c <_puts_r+0x54>
 8002cd4:	250a      	movs	r5, #10
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	6022      	str	r2, [r4, #0]
 8002cdc:	701d      	strb	r5, [r3, #0]
 8002cde:	e7bf      	b.n	8002c60 <_puts_r+0x58>
 8002ce0:	08003e64 	.word	0x08003e64
 8002ce4:	08003e84 	.word	0x08003e84
 8002ce8:	08003e44 	.word	0x08003e44

08002cec <puts>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <puts+0x10>)
 8002cf0:	0001      	movs	r1, r0
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f7ff ff88 	bl	8002c08 <_puts_r>
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	2000000c 	.word	0x2000000c

08002d00 <__swbuf_r>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	0005      	movs	r5, r0
 8002d04:	000e      	movs	r6, r1
 8002d06:	0014      	movs	r4, r2
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d004      	beq.n	8002d16 <__swbuf_r+0x16>
 8002d0c:	6983      	ldr	r3, [r0, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <__swbuf_r+0x16>
 8002d12:	f000 f9f1 	bl	80030f8 <__sinit>
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <__swbuf_r+0xa0>)
 8002d18:	429c      	cmp	r4, r3
 8002d1a:	d12e      	bne.n	8002d7a <__swbuf_r+0x7a>
 8002d1c:	686c      	ldr	r4, [r5, #4]
 8002d1e:	69a3      	ldr	r3, [r4, #24]
 8002d20:	60a3      	str	r3, [r4, #8]
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	071b      	lsls	r3, r3, #28
 8002d26:	d532      	bpl.n	8002d8e <__swbuf_r+0x8e>
 8002d28:	6923      	ldr	r3, [r4, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02f      	beq.n	8002d8e <__swbuf_r+0x8e>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	6922      	ldr	r2, [r4, #16]
 8002d32:	b2f7      	uxtb	r7, r6
 8002d34:	1a98      	subs	r0, r3, r2
 8002d36:	6963      	ldr	r3, [r4, #20]
 8002d38:	b2f6      	uxtb	r6, r6
 8002d3a:	4283      	cmp	r3, r0
 8002d3c:	dc05      	bgt.n	8002d4a <__swbuf_r+0x4a>
 8002d3e:	0021      	movs	r1, r4
 8002d40:	0028      	movs	r0, r5
 8002d42:	f000 f937 	bl	8002fb4 <_fflush_r>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d127      	bne.n	8002d9a <__swbuf_r+0x9a>
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	3001      	adds	r0, #1
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60a3      	str	r3, [r4, #8]
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	701f      	strb	r7, [r3, #0]
 8002d5a:	6963      	ldr	r3, [r4, #20]
 8002d5c:	4283      	cmp	r3, r0
 8002d5e:	d004      	beq.n	8002d6a <__swbuf_r+0x6a>
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	07db      	lsls	r3, r3, #31
 8002d64:	d507      	bpl.n	8002d76 <__swbuf_r+0x76>
 8002d66:	2e0a      	cmp	r6, #10
 8002d68:	d105      	bne.n	8002d76 <__swbuf_r+0x76>
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	0028      	movs	r0, r5
 8002d6e:	f000 f921 	bl	8002fb4 <_fflush_r>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d111      	bne.n	8002d9a <__swbuf_r+0x9a>
 8002d76:	0030      	movs	r0, r6
 8002d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <__swbuf_r+0xa4>)
 8002d7c:	429c      	cmp	r4, r3
 8002d7e:	d101      	bne.n	8002d84 <__swbuf_r+0x84>
 8002d80:	68ac      	ldr	r4, [r5, #8]
 8002d82:	e7cc      	b.n	8002d1e <__swbuf_r+0x1e>
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <__swbuf_r+0xa8>)
 8002d86:	429c      	cmp	r4, r3
 8002d88:	d1c9      	bne.n	8002d1e <__swbuf_r+0x1e>
 8002d8a:	68ec      	ldr	r4, [r5, #12]
 8002d8c:	e7c7      	b.n	8002d1e <__swbuf_r+0x1e>
 8002d8e:	0021      	movs	r1, r4
 8002d90:	0028      	movs	r0, r5
 8002d92:	f000 f80b 	bl	8002dac <__swsetup_r>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d0c9      	beq.n	8002d2e <__swbuf_r+0x2e>
 8002d9a:	2601      	movs	r6, #1
 8002d9c:	4276      	negs	r6, r6
 8002d9e:	e7ea      	b.n	8002d76 <__swbuf_r+0x76>
 8002da0:	08003e64 	.word	0x08003e64
 8002da4:	08003e84 	.word	0x08003e84
 8002da8:	08003e44 	.word	0x08003e44

08002dac <__swsetup_r>:
 8002dac:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <__swsetup_r+0xe0>)
 8002dae:	b570      	push	{r4, r5, r6, lr}
 8002db0:	681d      	ldr	r5, [r3, #0]
 8002db2:	0006      	movs	r6, r0
 8002db4:	000c      	movs	r4, r1
 8002db6:	2d00      	cmp	r5, #0
 8002db8:	d005      	beq.n	8002dc6 <__swsetup_r+0x1a>
 8002dba:	69ab      	ldr	r3, [r5, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <__swsetup_r+0x1a>
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 f999 	bl	80030f8 <__sinit>
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <__swsetup_r+0xe4>)
 8002dc8:	429c      	cmp	r4, r3
 8002dca:	d10f      	bne.n	8002dec <__swsetup_r+0x40>
 8002dcc:	686c      	ldr	r4, [r5, #4]
 8002dce:	230c      	movs	r3, #12
 8002dd0:	5ee2      	ldrsh	r2, [r4, r3]
 8002dd2:	b293      	uxth	r3, r2
 8002dd4:	0711      	lsls	r1, r2, #28
 8002dd6:	d42d      	bmi.n	8002e34 <__swsetup_r+0x88>
 8002dd8:	06d9      	lsls	r1, r3, #27
 8002dda:	d411      	bmi.n	8002e00 <__swsetup_r+0x54>
 8002ddc:	2309      	movs	r3, #9
 8002dde:	2001      	movs	r0, #1
 8002de0:	6033      	str	r3, [r6, #0]
 8002de2:	3337      	adds	r3, #55	; 0x37
 8002de4:	4313      	orrs	r3, r2
 8002de6:	81a3      	strh	r3, [r4, #12]
 8002de8:	4240      	negs	r0, r0
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <__swsetup_r+0xe8>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d101      	bne.n	8002df6 <__swsetup_r+0x4a>
 8002df2:	68ac      	ldr	r4, [r5, #8]
 8002df4:	e7eb      	b.n	8002dce <__swsetup_r+0x22>
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <__swsetup_r+0xec>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	d1e8      	bne.n	8002dce <__swsetup_r+0x22>
 8002dfc:	68ec      	ldr	r4, [r5, #12]
 8002dfe:	e7e6      	b.n	8002dce <__swsetup_r+0x22>
 8002e00:	075b      	lsls	r3, r3, #29
 8002e02:	d513      	bpl.n	8002e2c <__swsetup_r+0x80>
 8002e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e06:	2900      	cmp	r1, #0
 8002e08:	d008      	beq.n	8002e1c <__swsetup_r+0x70>
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	3344      	adds	r3, #68	; 0x44
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d002      	beq.n	8002e18 <__swsetup_r+0x6c>
 8002e12:	0030      	movs	r0, r6
 8002e14:	f000 fa80 	bl	8003318 <_free_r>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6363      	str	r3, [r4, #52]	; 0x34
 8002e1c:	2224      	movs	r2, #36	; 0x24
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	4393      	bics	r3, r2
 8002e22:	81a3      	strh	r3, [r4, #12]
 8002e24:	2300      	movs	r3, #0
 8002e26:	6063      	str	r3, [r4, #4]
 8002e28:	6923      	ldr	r3, [r4, #16]
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	89a2      	ldrh	r2, [r4, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	81a3      	strh	r3, [r4, #12]
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <__swsetup_r+0xa6>
 8002e3a:	21a0      	movs	r1, #160	; 0xa0
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	0089      	lsls	r1, r1, #2
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	400b      	ands	r3, r1
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <__swsetup_r+0xa6>
 8002e4a:	0021      	movs	r1, r4
 8002e4c:	0030      	movs	r0, r6
 8002e4e:	f000 fa1f 	bl	8003290 <__smakebuf_r>
 8002e52:	220c      	movs	r2, #12
 8002e54:	5ea3      	ldrsh	r3, [r4, r2]
 8002e56:	2001      	movs	r0, #1
 8002e58:	001a      	movs	r2, r3
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	4002      	ands	r2, r0
 8002e5e:	4203      	tst	r3, r0
 8002e60:	d00f      	beq.n	8002e82 <__swsetup_r+0xd6>
 8002e62:	2200      	movs	r2, #0
 8002e64:	60a2      	str	r2, [r4, #8]
 8002e66:	6962      	ldr	r2, [r4, #20]
 8002e68:	4252      	negs	r2, r2
 8002e6a:	61a2      	str	r2, [r4, #24]
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	6922      	ldr	r2, [r4, #16]
 8002e70:	4282      	cmp	r2, r0
 8002e72:	d1ba      	bne.n	8002dea <__swsetup_r+0x3e>
 8002e74:	060a      	lsls	r2, r1, #24
 8002e76:	d5b8      	bpl.n	8002dea <__swsetup_r+0x3e>
 8002e78:	2240      	movs	r2, #64	; 0x40
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	81a3      	strh	r3, [r4, #12]
 8002e7e:	3801      	subs	r0, #1
 8002e80:	e7b3      	b.n	8002dea <__swsetup_r+0x3e>
 8002e82:	0788      	lsls	r0, r1, #30
 8002e84:	d400      	bmi.n	8002e88 <__swsetup_r+0xdc>
 8002e86:	6962      	ldr	r2, [r4, #20]
 8002e88:	60a2      	str	r2, [r4, #8]
 8002e8a:	e7ef      	b.n	8002e6c <__swsetup_r+0xc0>
 8002e8c:	2000000c 	.word	0x2000000c
 8002e90:	08003e64 	.word	0x08003e64
 8002e94:	08003e84 	.word	0x08003e84
 8002e98:	08003e44 	.word	0x08003e44

08002e9c <__sflush_r>:
 8002e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e9e:	898b      	ldrh	r3, [r1, #12]
 8002ea0:	0005      	movs	r5, r0
 8002ea2:	000c      	movs	r4, r1
 8002ea4:	071a      	lsls	r2, r3, #28
 8002ea6:	d45f      	bmi.n	8002f68 <__sflush_r+0xcc>
 8002ea8:	684a      	ldr	r2, [r1, #4]
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	dc04      	bgt.n	8002eb8 <__sflush_r+0x1c>
 8002eae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	dc01      	bgt.n	8002eb8 <__sflush_r+0x1c>
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eb8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002eba:	2f00      	cmp	r7, #0
 8002ebc:	d0fa      	beq.n	8002eb4 <__sflush_r+0x18>
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	682e      	ldr	r6, [r5, #0]
 8002ec4:	602a      	str	r2, [r5, #0]
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	0149      	lsls	r1, r1, #5
 8002eca:	400a      	ands	r2, r1
 8002ecc:	420b      	tst	r3, r1
 8002ece:	d034      	beq.n	8002f3a <__sflush_r+0x9e>
 8002ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	075b      	lsls	r3, r3, #29
 8002ed6:	d506      	bpl.n	8002ee6 <__sflush_r+0x4a>
 8002ed8:	6863      	ldr	r3, [r4, #4]
 8002eda:	1ac0      	subs	r0, r0, r3
 8002edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <__sflush_r+0x4a>
 8002ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ee4:	1ac0      	subs	r0, r0, r3
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	6a21      	ldr	r1, [r4, #32]
 8002eea:	2300      	movs	r3, #0
 8002eec:	0028      	movs	r0, r5
 8002eee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002ef0:	47b8      	blx	r7
 8002ef2:	89a1      	ldrh	r1, [r4, #12]
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d106      	bne.n	8002f06 <__sflush_r+0x6a>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	2b1d      	cmp	r3, #29
 8002efc:	d831      	bhi.n	8002f62 <__sflush_r+0xc6>
 8002efe:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <__sflush_r+0x114>)
 8002f00:	40da      	lsrs	r2, r3
 8002f02:	07d3      	lsls	r3, r2, #31
 8002f04:	d52d      	bpl.n	8002f62 <__sflush_r+0xc6>
 8002f06:	2300      	movs	r3, #0
 8002f08:	6063      	str	r3, [r4, #4]
 8002f0a:	6923      	ldr	r3, [r4, #16]
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	04cb      	lsls	r3, r1, #19
 8002f10:	d505      	bpl.n	8002f1e <__sflush_r+0x82>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	d102      	bne.n	8002f1c <__sflush_r+0x80>
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d100      	bne.n	8002f1e <__sflush_r+0x82>
 8002f1c:	6560      	str	r0, [r4, #84]	; 0x54
 8002f1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f20:	602e      	str	r6, [r5, #0]
 8002f22:	2900      	cmp	r1, #0
 8002f24:	d0c6      	beq.n	8002eb4 <__sflush_r+0x18>
 8002f26:	0023      	movs	r3, r4
 8002f28:	3344      	adds	r3, #68	; 0x44
 8002f2a:	4299      	cmp	r1, r3
 8002f2c:	d002      	beq.n	8002f34 <__sflush_r+0x98>
 8002f2e:	0028      	movs	r0, r5
 8002f30:	f000 f9f2 	bl	8003318 <_free_r>
 8002f34:	2000      	movs	r0, #0
 8002f36:	6360      	str	r0, [r4, #52]	; 0x34
 8002f38:	e7bd      	b.n	8002eb6 <__sflush_r+0x1a>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	0028      	movs	r0, r5
 8002f3e:	6a21      	ldr	r1, [r4, #32]
 8002f40:	47b8      	blx	r7
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	d1c5      	bne.n	8002ed2 <__sflush_r+0x36>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0c2      	beq.n	8002ed2 <__sflush_r+0x36>
 8002f4c:	2b1d      	cmp	r3, #29
 8002f4e:	d001      	beq.n	8002f54 <__sflush_r+0xb8>
 8002f50:	2b16      	cmp	r3, #22
 8002f52:	d101      	bne.n	8002f58 <__sflush_r+0xbc>
 8002f54:	602e      	str	r6, [r5, #0]
 8002f56:	e7ad      	b.n	8002eb4 <__sflush_r+0x18>
 8002f58:	2340      	movs	r3, #64	; 0x40
 8002f5a:	89a2      	ldrh	r2, [r4, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	81a3      	strh	r3, [r4, #12]
 8002f60:	e7a9      	b.n	8002eb6 <__sflush_r+0x1a>
 8002f62:	2340      	movs	r3, #64	; 0x40
 8002f64:	430b      	orrs	r3, r1
 8002f66:	e7fa      	b.n	8002f5e <__sflush_r+0xc2>
 8002f68:	690f      	ldr	r7, [r1, #16]
 8002f6a:	2f00      	cmp	r7, #0
 8002f6c:	d0a2      	beq.n	8002eb4 <__sflush_r+0x18>
 8002f6e:	680a      	ldr	r2, [r1, #0]
 8002f70:	600f      	str	r7, [r1, #0]
 8002f72:	1bd2      	subs	r2, r2, r7
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	079b      	lsls	r3, r3, #30
 8002f7a:	d100      	bne.n	8002f7e <__sflush_r+0xe2>
 8002f7c:	694a      	ldr	r2, [r1, #20]
 8002f7e:	60a2      	str	r2, [r4, #8]
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__sflush_r+0xec>
 8002f86:	e795      	b.n	8002eb4 <__sflush_r+0x18>
 8002f88:	003a      	movs	r2, r7
 8002f8a:	0028      	movs	r0, r5
 8002f8c:	9b01      	ldr	r3, [sp, #4]
 8002f8e:	6a21      	ldr	r1, [r4, #32]
 8002f90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f92:	47b0      	blx	r6
 8002f94:	2800      	cmp	r0, #0
 8002f96:	dc06      	bgt.n	8002fa6 <__sflush_r+0x10a>
 8002f98:	2340      	movs	r3, #64	; 0x40
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	89a2      	ldrh	r2, [r4, #12]
 8002f9e:	4240      	negs	r0, r0
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	e787      	b.n	8002eb6 <__sflush_r+0x1a>
 8002fa6:	9b01      	ldr	r3, [sp, #4]
 8002fa8:	183f      	adds	r7, r7, r0
 8002faa:	1a1b      	subs	r3, r3, r0
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	e7e7      	b.n	8002f80 <__sflush_r+0xe4>
 8002fb0:	20400001 	.word	0x20400001

08002fb4 <_fflush_r>:
 8002fb4:	690b      	ldr	r3, [r1, #16]
 8002fb6:	b570      	push	{r4, r5, r6, lr}
 8002fb8:	0005      	movs	r5, r0
 8002fba:	000c      	movs	r4, r1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_fflush_r+0x12>
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	0028      	movs	r0, r5
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d004      	beq.n	8002fd4 <_fflush_r+0x20>
 8002fca:	6983      	ldr	r3, [r0, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <_fflush_r+0x20>
 8002fd0:	f000 f892 	bl	80030f8 <__sinit>
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <_fflush_r+0x74>)
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	d11b      	bne.n	8003012 <_fflush_r+0x5e>
 8002fda:	686c      	ldr	r4, [r5, #4]
 8002fdc:	220c      	movs	r2, #12
 8002fde:	5ea3      	ldrsh	r3, [r4, r2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ed      	beq.n	8002fc0 <_fflush_r+0xc>
 8002fe4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fe6:	07d2      	lsls	r2, r2, #31
 8002fe8:	d404      	bmi.n	8002ff4 <_fflush_r+0x40>
 8002fea:	059b      	lsls	r3, r3, #22
 8002fec:	d402      	bmi.n	8002ff4 <_fflush_r+0x40>
 8002fee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ff0:	f000 f923 	bl	800323a <__retarget_lock_acquire_recursive>
 8002ff4:	0028      	movs	r0, r5
 8002ff6:	0021      	movs	r1, r4
 8002ff8:	f7ff ff50 	bl	8002e9c <__sflush_r>
 8002ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ffe:	0005      	movs	r5, r0
 8003000:	07db      	lsls	r3, r3, #31
 8003002:	d4de      	bmi.n	8002fc2 <_fflush_r+0xe>
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	059b      	lsls	r3, r3, #22
 8003008:	d4db      	bmi.n	8002fc2 <_fflush_r+0xe>
 800300a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800300c:	f000 f916 	bl	800323c <__retarget_lock_release_recursive>
 8003010:	e7d7      	b.n	8002fc2 <_fflush_r+0xe>
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <_fflush_r+0x78>)
 8003014:	429c      	cmp	r4, r3
 8003016:	d101      	bne.n	800301c <_fflush_r+0x68>
 8003018:	68ac      	ldr	r4, [r5, #8]
 800301a:	e7df      	b.n	8002fdc <_fflush_r+0x28>
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <_fflush_r+0x7c>)
 800301e:	429c      	cmp	r4, r3
 8003020:	d1dc      	bne.n	8002fdc <_fflush_r+0x28>
 8003022:	68ec      	ldr	r4, [r5, #12]
 8003024:	e7da      	b.n	8002fdc <_fflush_r+0x28>
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	08003e64 	.word	0x08003e64
 800302c:	08003e84 	.word	0x08003e84
 8003030:	08003e44 	.word	0x08003e44

08003034 <std>:
 8003034:	2300      	movs	r3, #0
 8003036:	b510      	push	{r4, lr}
 8003038:	0004      	movs	r4, r0
 800303a:	6003      	str	r3, [r0, #0]
 800303c:	6043      	str	r3, [r0, #4]
 800303e:	6083      	str	r3, [r0, #8]
 8003040:	8181      	strh	r1, [r0, #12]
 8003042:	6643      	str	r3, [r0, #100]	; 0x64
 8003044:	0019      	movs	r1, r3
 8003046:	81c2      	strh	r2, [r0, #14]
 8003048:	6103      	str	r3, [r0, #16]
 800304a:	6143      	str	r3, [r0, #20]
 800304c:	6183      	str	r3, [r0, #24]
 800304e:	2208      	movs	r2, #8
 8003050:	305c      	adds	r0, #92	; 0x5c
 8003052:	f7ff fdb7 	bl	8002bc4 <memset>
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <std+0x38>)
 8003058:	6224      	str	r4, [r4, #32]
 800305a:	6263      	str	r3, [r4, #36]	; 0x24
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <std+0x3c>)
 800305e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <std+0x40>)
 8003062:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <std+0x44>)
 8003066:	6323      	str	r3, [r4, #48]	; 0x30
 8003068:	bd10      	pop	{r4, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	08003ac9 	.word	0x08003ac9
 8003070:	08003af1 	.word	0x08003af1
 8003074:	08003b29 	.word	0x08003b29
 8003078:	08003b55 	.word	0x08003b55

0800307c <_cleanup_r>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4902      	ldr	r1, [pc, #8]	; (8003088 <_cleanup_r+0xc>)
 8003080:	f000 f8ba 	bl	80031f8 <_fwalk_reent>
 8003084:	bd10      	pop	{r4, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	08002fb5 	.word	0x08002fb5

0800308c <__sfmoreglue>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2568      	movs	r5, #104	; 0x68
 8003090:	1e4a      	subs	r2, r1, #1
 8003092:	4355      	muls	r5, r2
 8003094:	000e      	movs	r6, r1
 8003096:	0029      	movs	r1, r5
 8003098:	3174      	adds	r1, #116	; 0x74
 800309a:	f000 f9a9 	bl	80033f0 <_malloc_r>
 800309e:	1e04      	subs	r4, r0, #0
 80030a0:	d008      	beq.n	80030b4 <__sfmoreglue+0x28>
 80030a2:	2100      	movs	r1, #0
 80030a4:	002a      	movs	r2, r5
 80030a6:	6001      	str	r1, [r0, #0]
 80030a8:	6046      	str	r6, [r0, #4]
 80030aa:	300c      	adds	r0, #12
 80030ac:	60a0      	str	r0, [r4, #8]
 80030ae:	3268      	adds	r2, #104	; 0x68
 80030b0:	f7ff fd88 	bl	8002bc4 <memset>
 80030b4:	0020      	movs	r0, r4
 80030b6:	bd70      	pop	{r4, r5, r6, pc}

080030b8 <__sfp_lock_acquire>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4802      	ldr	r0, [pc, #8]	; (80030c4 <__sfp_lock_acquire+0xc>)
 80030bc:	f000 f8bd 	bl	800323a <__retarget_lock_acquire_recursive>
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	200003d1 	.word	0x200003d1

080030c8 <__sfp_lock_release>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4802      	ldr	r0, [pc, #8]	; (80030d4 <__sfp_lock_release+0xc>)
 80030cc:	f000 f8b6 	bl	800323c <__retarget_lock_release_recursive>
 80030d0:	bd10      	pop	{r4, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	200003d1 	.word	0x200003d1

080030d8 <__sinit_lock_acquire>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	4802      	ldr	r0, [pc, #8]	; (80030e4 <__sinit_lock_acquire+0xc>)
 80030dc:	f000 f8ad 	bl	800323a <__retarget_lock_acquire_recursive>
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	200003d2 	.word	0x200003d2

080030e8 <__sinit_lock_release>:
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4802      	ldr	r0, [pc, #8]	; (80030f4 <__sinit_lock_release+0xc>)
 80030ec:	f000 f8a6 	bl	800323c <__retarget_lock_release_recursive>
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	200003d2 	.word	0x200003d2

080030f8 <__sinit>:
 80030f8:	b513      	push	{r0, r1, r4, lr}
 80030fa:	0004      	movs	r4, r0
 80030fc:	f7ff ffec 	bl	80030d8 <__sinit_lock_acquire>
 8003100:	69a3      	ldr	r3, [r4, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <__sinit+0x14>
 8003106:	f7ff ffef 	bl	80030e8 <__sinit_lock_release>
 800310a:	bd13      	pop	{r0, r1, r4, pc}
 800310c:	64a3      	str	r3, [r4, #72]	; 0x48
 800310e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003110:	6523      	str	r3, [r4, #80]	; 0x50
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <__sinit+0x68>)
 8003114:	4a13      	ldr	r2, [pc, #76]	; (8003164 <__sinit+0x6c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	62a2      	str	r2, [r4, #40]	; 0x28
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	42a3      	cmp	r3, r4
 800311e:	d101      	bne.n	8003124 <__sinit+0x2c>
 8003120:	2301      	movs	r3, #1
 8003122:	61a3      	str	r3, [r4, #24]
 8003124:	0020      	movs	r0, r4
 8003126:	f000 f81f 	bl	8003168 <__sfp>
 800312a:	6060      	str	r0, [r4, #4]
 800312c:	0020      	movs	r0, r4
 800312e:	f000 f81b 	bl	8003168 <__sfp>
 8003132:	60a0      	str	r0, [r4, #8]
 8003134:	0020      	movs	r0, r4
 8003136:	f000 f817 	bl	8003168 <__sfp>
 800313a:	2200      	movs	r2, #0
 800313c:	2104      	movs	r1, #4
 800313e:	60e0      	str	r0, [r4, #12]
 8003140:	6860      	ldr	r0, [r4, #4]
 8003142:	f7ff ff77 	bl	8003034 <std>
 8003146:	2201      	movs	r2, #1
 8003148:	2109      	movs	r1, #9
 800314a:	68a0      	ldr	r0, [r4, #8]
 800314c:	f7ff ff72 	bl	8003034 <std>
 8003150:	2202      	movs	r2, #2
 8003152:	2112      	movs	r1, #18
 8003154:	68e0      	ldr	r0, [r4, #12]
 8003156:	f7ff ff6d 	bl	8003034 <std>
 800315a:	2301      	movs	r3, #1
 800315c:	61a3      	str	r3, [r4, #24]
 800315e:	e7d2      	b.n	8003106 <__sinit+0xe>
 8003160:	08003e40 	.word	0x08003e40
 8003164:	0800307d 	.word	0x0800307d

08003168 <__sfp>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	0007      	movs	r7, r0
 800316c:	f7ff ffa4 	bl	80030b8 <__sfp_lock_acquire>
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <__sfp+0x88>)
 8003172:	681e      	ldr	r6, [r3, #0]
 8003174:	69b3      	ldr	r3, [r6, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <__sfp+0x18>
 800317a:	0030      	movs	r0, r6
 800317c:	f7ff ffbc 	bl	80030f8 <__sinit>
 8003180:	3648      	adds	r6, #72	; 0x48
 8003182:	68b4      	ldr	r4, [r6, #8]
 8003184:	6873      	ldr	r3, [r6, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	d504      	bpl.n	8003194 <__sfp+0x2c>
 800318a:	6833      	ldr	r3, [r6, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d022      	beq.n	80031d6 <__sfp+0x6e>
 8003190:	6836      	ldr	r6, [r6, #0]
 8003192:	e7f6      	b.n	8003182 <__sfp+0x1a>
 8003194:	220c      	movs	r2, #12
 8003196:	5ea5      	ldrsh	r5, [r4, r2]
 8003198:	2d00      	cmp	r5, #0
 800319a:	d11a      	bne.n	80031d2 <__sfp+0x6a>
 800319c:	0020      	movs	r0, r4
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <__sfp+0x8c>)
 80031a0:	3058      	adds	r0, #88	; 0x58
 80031a2:	60e3      	str	r3, [r4, #12]
 80031a4:	6665      	str	r5, [r4, #100]	; 0x64
 80031a6:	f000 f847 	bl	8003238 <__retarget_lock_init_recursive>
 80031aa:	f7ff ff8d 	bl	80030c8 <__sfp_lock_release>
 80031ae:	0020      	movs	r0, r4
 80031b0:	2208      	movs	r2, #8
 80031b2:	0029      	movs	r1, r5
 80031b4:	6025      	str	r5, [r4, #0]
 80031b6:	60a5      	str	r5, [r4, #8]
 80031b8:	6065      	str	r5, [r4, #4]
 80031ba:	6125      	str	r5, [r4, #16]
 80031bc:	6165      	str	r5, [r4, #20]
 80031be:	61a5      	str	r5, [r4, #24]
 80031c0:	305c      	adds	r0, #92	; 0x5c
 80031c2:	f7ff fcff 	bl	8002bc4 <memset>
 80031c6:	6365      	str	r5, [r4, #52]	; 0x34
 80031c8:	63a5      	str	r5, [r4, #56]	; 0x38
 80031ca:	64a5      	str	r5, [r4, #72]	; 0x48
 80031cc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80031ce:	0020      	movs	r0, r4
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d2:	3468      	adds	r4, #104	; 0x68
 80031d4:	e7d7      	b.n	8003186 <__sfp+0x1e>
 80031d6:	2104      	movs	r1, #4
 80031d8:	0038      	movs	r0, r7
 80031da:	f7ff ff57 	bl	800308c <__sfmoreglue>
 80031de:	1e04      	subs	r4, r0, #0
 80031e0:	6030      	str	r0, [r6, #0]
 80031e2:	d1d5      	bne.n	8003190 <__sfp+0x28>
 80031e4:	f7ff ff70 	bl	80030c8 <__sfp_lock_release>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	e7ef      	b.n	80031ce <__sfp+0x66>
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	08003e40 	.word	0x08003e40
 80031f4:	ffff0001 	.word	0xffff0001

080031f8 <_fwalk_reent>:
 80031f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031fa:	0004      	movs	r4, r0
 80031fc:	0006      	movs	r6, r0
 80031fe:	2700      	movs	r7, #0
 8003200:	9101      	str	r1, [sp, #4]
 8003202:	3448      	adds	r4, #72	; 0x48
 8003204:	6863      	ldr	r3, [r4, #4]
 8003206:	68a5      	ldr	r5, [r4, #8]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	9b00      	ldr	r3, [sp, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	d504      	bpl.n	800321c <_fwalk_reent+0x24>
 8003212:	6824      	ldr	r4, [r4, #0]
 8003214:	2c00      	cmp	r4, #0
 8003216:	d1f5      	bne.n	8003204 <_fwalk_reent+0xc>
 8003218:	0038      	movs	r0, r7
 800321a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800321c:	89ab      	ldrh	r3, [r5, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d908      	bls.n	8003234 <_fwalk_reent+0x3c>
 8003222:	220e      	movs	r2, #14
 8003224:	5eab      	ldrsh	r3, [r5, r2]
 8003226:	3301      	adds	r3, #1
 8003228:	d004      	beq.n	8003234 <_fwalk_reent+0x3c>
 800322a:	0029      	movs	r1, r5
 800322c:	0030      	movs	r0, r6
 800322e:	9b01      	ldr	r3, [sp, #4]
 8003230:	4798      	blx	r3
 8003232:	4307      	orrs	r7, r0
 8003234:	3568      	adds	r5, #104	; 0x68
 8003236:	e7e8      	b.n	800320a <_fwalk_reent+0x12>

08003238 <__retarget_lock_init_recursive>:
 8003238:	4770      	bx	lr

0800323a <__retarget_lock_acquire_recursive>:
 800323a:	4770      	bx	lr

0800323c <__retarget_lock_release_recursive>:
 800323c:	4770      	bx	lr
	...

08003240 <__swhatbuf_r>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	000e      	movs	r6, r1
 8003244:	001d      	movs	r5, r3
 8003246:	230e      	movs	r3, #14
 8003248:	5ec9      	ldrsh	r1, [r1, r3]
 800324a:	0014      	movs	r4, r2
 800324c:	b096      	sub	sp, #88	; 0x58
 800324e:	2900      	cmp	r1, #0
 8003250:	da08      	bge.n	8003264 <__swhatbuf_r+0x24>
 8003252:	220c      	movs	r2, #12
 8003254:	5eb3      	ldrsh	r3, [r6, r2]
 8003256:	2200      	movs	r2, #0
 8003258:	602a      	str	r2, [r5, #0]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	d411      	bmi.n	8003282 <__swhatbuf_r+0x42>
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	e00f      	b.n	8003284 <__swhatbuf_r+0x44>
 8003264:	466a      	mov	r2, sp
 8003266:	f000 fca1 	bl	8003bac <_fstat_r>
 800326a:	2800      	cmp	r0, #0
 800326c:	dbf1      	blt.n	8003252 <__swhatbuf_r+0x12>
 800326e:	23f0      	movs	r3, #240	; 0xf0
 8003270:	9901      	ldr	r1, [sp, #4]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4019      	ands	r1, r3
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <__swhatbuf_r+0x4c>)
 8003278:	18c9      	adds	r1, r1, r3
 800327a:	424b      	negs	r3, r1
 800327c:	4159      	adcs	r1, r3
 800327e:	6029      	str	r1, [r5, #0]
 8003280:	e7ed      	b.n	800325e <__swhatbuf_r+0x1e>
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	2000      	movs	r0, #0
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	b016      	add	sp, #88	; 0x58
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	ffffe000 	.word	0xffffe000

08003290 <__smakebuf_r>:
 8003290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003292:	2602      	movs	r6, #2
 8003294:	898b      	ldrh	r3, [r1, #12]
 8003296:	0005      	movs	r5, r0
 8003298:	000c      	movs	r4, r1
 800329a:	4233      	tst	r3, r6
 800329c:	d006      	beq.n	80032ac <__smakebuf_r+0x1c>
 800329e:	0023      	movs	r3, r4
 80032a0:	3347      	adds	r3, #71	; 0x47
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	6123      	str	r3, [r4, #16]
 80032a6:	2301      	movs	r3, #1
 80032a8:	6163      	str	r3, [r4, #20]
 80032aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80032ac:	466a      	mov	r2, sp
 80032ae:	ab01      	add	r3, sp, #4
 80032b0:	f7ff ffc6 	bl	8003240 <__swhatbuf_r>
 80032b4:	9900      	ldr	r1, [sp, #0]
 80032b6:	0007      	movs	r7, r0
 80032b8:	0028      	movs	r0, r5
 80032ba:	f000 f899 	bl	80033f0 <_malloc_r>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d108      	bne.n	80032d4 <__smakebuf_r+0x44>
 80032c2:	220c      	movs	r2, #12
 80032c4:	5ea3      	ldrsh	r3, [r4, r2]
 80032c6:	059a      	lsls	r2, r3, #22
 80032c8:	d4ef      	bmi.n	80032aa <__smakebuf_r+0x1a>
 80032ca:	2203      	movs	r2, #3
 80032cc:	4393      	bics	r3, r2
 80032ce:	431e      	orrs	r6, r3
 80032d0:	81a6      	strh	r6, [r4, #12]
 80032d2:	e7e4      	b.n	800329e <__smakebuf_r+0xe>
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <__smakebuf_r+0x84>)
 80032d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	89a2      	ldrh	r2, [r4, #12]
 80032dc:	6020      	str	r0, [r4, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	9b00      	ldr	r3, [sp, #0]
 80032e4:	6120      	str	r0, [r4, #16]
 80032e6:	6163      	str	r3, [r4, #20]
 80032e8:	9b01      	ldr	r3, [sp, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <__smakebuf_r+0x7a>
 80032ee:	0028      	movs	r0, r5
 80032f0:	230e      	movs	r3, #14
 80032f2:	5ee1      	ldrsh	r1, [r4, r3]
 80032f4:	f000 fc6c 	bl	8003bd0 <_isatty_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d006      	beq.n	800330a <__smakebuf_r+0x7a>
 80032fc:	2203      	movs	r2, #3
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	4393      	bics	r3, r2
 8003302:	001a      	movs	r2, r3
 8003304:	2301      	movs	r3, #1
 8003306:	4313      	orrs	r3, r2
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	89a0      	ldrh	r0, [r4, #12]
 800330c:	4307      	orrs	r7, r0
 800330e:	81a7      	strh	r7, [r4, #12]
 8003310:	e7cb      	b.n	80032aa <__smakebuf_r+0x1a>
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	0800307d 	.word	0x0800307d

08003318 <_free_r>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	0005      	movs	r5, r0
 800331c:	2900      	cmp	r1, #0
 800331e:	d010      	beq.n	8003342 <_free_r+0x2a>
 8003320:	1f0c      	subs	r4, r1, #4
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	da00      	bge.n	800332a <_free_r+0x12>
 8003328:	18e4      	adds	r4, r4, r3
 800332a:	0028      	movs	r0, r5
 800332c:	f000 fc82 	bl	8003c34 <__malloc_lock>
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <_free_r+0x90>)
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <_free_r+0x2c>
 8003338:	6063      	str	r3, [r4, #4]
 800333a:	6014      	str	r4, [r2, #0]
 800333c:	0028      	movs	r0, r5
 800333e:	f000 fc81 	bl	8003c44 <__malloc_unlock>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	42a3      	cmp	r3, r4
 8003346:	d908      	bls.n	800335a <_free_r+0x42>
 8003348:	6821      	ldr	r1, [r4, #0]
 800334a:	1860      	adds	r0, r4, r1
 800334c:	4283      	cmp	r3, r0
 800334e:	d1f3      	bne.n	8003338 <_free_r+0x20>
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	1841      	adds	r1, r0, r1
 8003356:	6021      	str	r1, [r4, #0]
 8003358:	e7ee      	b.n	8003338 <_free_r+0x20>
 800335a:	001a      	movs	r2, r3
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <_free_r+0x4e>
 8003362:	42a3      	cmp	r3, r4
 8003364:	d9f9      	bls.n	800335a <_free_r+0x42>
 8003366:	6811      	ldr	r1, [r2, #0]
 8003368:	1850      	adds	r0, r2, r1
 800336a:	42a0      	cmp	r0, r4
 800336c:	d10b      	bne.n	8003386 <_free_r+0x6e>
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	1809      	adds	r1, r1, r0
 8003372:	1850      	adds	r0, r2, r1
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	4283      	cmp	r3, r0
 8003378:	d1e0      	bne.n	800333c <_free_r+0x24>
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	1841      	adds	r1, r0, r1
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	6053      	str	r3, [r2, #4]
 8003384:	e7da      	b.n	800333c <_free_r+0x24>
 8003386:	42a0      	cmp	r0, r4
 8003388:	d902      	bls.n	8003390 <_free_r+0x78>
 800338a:	230c      	movs	r3, #12
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	e7d5      	b.n	800333c <_free_r+0x24>
 8003390:	6821      	ldr	r1, [r4, #0]
 8003392:	1860      	adds	r0, r4, r1
 8003394:	4283      	cmp	r3, r0
 8003396:	d103      	bne.n	80033a0 <_free_r+0x88>
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	1841      	adds	r1, r0, r1
 800339e:	6021      	str	r1, [r4, #0]
 80033a0:	6063      	str	r3, [r4, #4]
 80033a2:	6054      	str	r4, [r2, #4]
 80033a4:	e7ca      	b.n	800333c <_free_r+0x24>
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	200003d4 	.word	0x200003d4

080033ac <sbrk_aligned>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4e0f      	ldr	r6, [pc, #60]	; (80033ec <sbrk_aligned+0x40>)
 80033b0:	000d      	movs	r5, r1
 80033b2:	6831      	ldr	r1, [r6, #0]
 80033b4:	0004      	movs	r4, r0
 80033b6:	2900      	cmp	r1, #0
 80033b8:	d102      	bne.n	80033c0 <sbrk_aligned+0x14>
 80033ba:	f000 fb73 	bl	8003aa4 <_sbrk_r>
 80033be:	6030      	str	r0, [r6, #0]
 80033c0:	0029      	movs	r1, r5
 80033c2:	0020      	movs	r0, r4
 80033c4:	f000 fb6e 	bl	8003aa4 <_sbrk_r>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d00a      	beq.n	80033e2 <sbrk_aligned+0x36>
 80033cc:	2303      	movs	r3, #3
 80033ce:	1cc5      	adds	r5, r0, #3
 80033d0:	439d      	bics	r5, r3
 80033d2:	42a8      	cmp	r0, r5
 80033d4:	d007      	beq.n	80033e6 <sbrk_aligned+0x3a>
 80033d6:	1a29      	subs	r1, r5, r0
 80033d8:	0020      	movs	r0, r4
 80033da:	f000 fb63 	bl	8003aa4 <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d101      	bne.n	80033e6 <sbrk_aligned+0x3a>
 80033e2:	2501      	movs	r5, #1
 80033e4:	426d      	negs	r5, r5
 80033e6:	0028      	movs	r0, r5
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	200003d8 	.word	0x200003d8

080033f0 <_malloc_r>:
 80033f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033f2:	2203      	movs	r2, #3
 80033f4:	1ccb      	adds	r3, r1, #3
 80033f6:	4393      	bics	r3, r2
 80033f8:	3308      	adds	r3, #8
 80033fa:	0006      	movs	r6, r0
 80033fc:	001f      	movs	r7, r3
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d232      	bcs.n	8003468 <_malloc_r+0x78>
 8003402:	270c      	movs	r7, #12
 8003404:	42b9      	cmp	r1, r7
 8003406:	d831      	bhi.n	800346c <_malloc_r+0x7c>
 8003408:	0030      	movs	r0, r6
 800340a:	f000 fc13 	bl	8003c34 <__malloc_lock>
 800340e:	4d32      	ldr	r5, [pc, #200]	; (80034d8 <_malloc_r+0xe8>)
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	001c      	movs	r4, r3
 8003414:	2c00      	cmp	r4, #0
 8003416:	d12e      	bne.n	8003476 <_malloc_r+0x86>
 8003418:	0039      	movs	r1, r7
 800341a:	0030      	movs	r0, r6
 800341c:	f7ff ffc6 	bl	80033ac <sbrk_aligned>
 8003420:	0004      	movs	r4, r0
 8003422:	1c43      	adds	r3, r0, #1
 8003424:	d11e      	bne.n	8003464 <_malloc_r+0x74>
 8003426:	682c      	ldr	r4, [r5, #0]
 8003428:	0025      	movs	r5, r4
 800342a:	2d00      	cmp	r5, #0
 800342c:	d14a      	bne.n	80034c4 <_malloc_r+0xd4>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	0029      	movs	r1, r5
 8003432:	18e3      	adds	r3, r4, r3
 8003434:	0030      	movs	r0, r6
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	f000 fb34 	bl	8003aa4 <_sbrk_r>
 800343c:	9b01      	ldr	r3, [sp, #4]
 800343e:	4283      	cmp	r3, r0
 8003440:	d143      	bne.n	80034ca <_malloc_r+0xda>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	3703      	adds	r7, #3
 8003446:	1aff      	subs	r7, r7, r3
 8003448:	2303      	movs	r3, #3
 800344a:	439f      	bics	r7, r3
 800344c:	3708      	adds	r7, #8
 800344e:	2f0c      	cmp	r7, #12
 8003450:	d200      	bcs.n	8003454 <_malloc_r+0x64>
 8003452:	270c      	movs	r7, #12
 8003454:	0039      	movs	r1, r7
 8003456:	0030      	movs	r0, r6
 8003458:	f7ff ffa8 	bl	80033ac <sbrk_aligned>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d034      	beq.n	80034ca <_malloc_r+0xda>
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	19df      	adds	r7, r3, r7
 8003464:	6027      	str	r7, [r4, #0]
 8003466:	e013      	b.n	8003490 <_malloc_r+0xa0>
 8003468:	2b00      	cmp	r3, #0
 800346a:	dacb      	bge.n	8003404 <_malloc_r+0x14>
 800346c:	230c      	movs	r3, #12
 800346e:	2500      	movs	r5, #0
 8003470:	6033      	str	r3, [r6, #0]
 8003472:	0028      	movs	r0, r5
 8003474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	1bd1      	subs	r1, r2, r7
 800347a:	d420      	bmi.n	80034be <_malloc_r+0xce>
 800347c:	290b      	cmp	r1, #11
 800347e:	d917      	bls.n	80034b0 <_malloc_r+0xc0>
 8003480:	19e2      	adds	r2, r4, r7
 8003482:	6027      	str	r7, [r4, #0]
 8003484:	42a3      	cmp	r3, r4
 8003486:	d111      	bne.n	80034ac <_malloc_r+0xbc>
 8003488:	602a      	str	r2, [r5, #0]
 800348a:	6863      	ldr	r3, [r4, #4]
 800348c:	6011      	str	r1, [r2, #0]
 800348e:	6053      	str	r3, [r2, #4]
 8003490:	0030      	movs	r0, r6
 8003492:	0025      	movs	r5, r4
 8003494:	f000 fbd6 	bl	8003c44 <__malloc_unlock>
 8003498:	2207      	movs	r2, #7
 800349a:	350b      	adds	r5, #11
 800349c:	1d23      	adds	r3, r4, #4
 800349e:	4395      	bics	r5, r2
 80034a0:	1aea      	subs	r2, r5, r3
 80034a2:	429d      	cmp	r5, r3
 80034a4:	d0e5      	beq.n	8003472 <_malloc_r+0x82>
 80034a6:	1b5b      	subs	r3, r3, r5
 80034a8:	50a3      	str	r3, [r4, r2]
 80034aa:	e7e2      	b.n	8003472 <_malloc_r+0x82>
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	e7ec      	b.n	800348a <_malloc_r+0x9a>
 80034b0:	6862      	ldr	r2, [r4, #4]
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	d101      	bne.n	80034ba <_malloc_r+0xca>
 80034b6:	602a      	str	r2, [r5, #0]
 80034b8:	e7ea      	b.n	8003490 <_malloc_r+0xa0>
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	e7e8      	b.n	8003490 <_malloc_r+0xa0>
 80034be:	0023      	movs	r3, r4
 80034c0:	6864      	ldr	r4, [r4, #4]
 80034c2:	e7a7      	b.n	8003414 <_malloc_r+0x24>
 80034c4:	002c      	movs	r4, r5
 80034c6:	686d      	ldr	r5, [r5, #4]
 80034c8:	e7af      	b.n	800342a <_malloc_r+0x3a>
 80034ca:	230c      	movs	r3, #12
 80034cc:	0030      	movs	r0, r6
 80034ce:	6033      	str	r3, [r6, #0]
 80034d0:	f000 fbb8 	bl	8003c44 <__malloc_unlock>
 80034d4:	e7cd      	b.n	8003472 <_malloc_r+0x82>
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	200003d4 	.word	0x200003d4

080034dc <__sfputc_r>:
 80034dc:	6893      	ldr	r3, [r2, #8]
 80034de:	b510      	push	{r4, lr}
 80034e0:	3b01      	subs	r3, #1
 80034e2:	6093      	str	r3, [r2, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da04      	bge.n	80034f2 <__sfputc_r+0x16>
 80034e8:	6994      	ldr	r4, [r2, #24]
 80034ea:	42a3      	cmp	r3, r4
 80034ec:	db07      	blt.n	80034fe <__sfputc_r+0x22>
 80034ee:	290a      	cmp	r1, #10
 80034f0:	d005      	beq.n	80034fe <__sfputc_r+0x22>
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	1c58      	adds	r0, r3, #1
 80034f6:	6010      	str	r0, [r2, #0]
 80034f8:	7019      	strb	r1, [r3, #0]
 80034fa:	0008      	movs	r0, r1
 80034fc:	bd10      	pop	{r4, pc}
 80034fe:	f7ff fbff 	bl	8002d00 <__swbuf_r>
 8003502:	0001      	movs	r1, r0
 8003504:	e7f9      	b.n	80034fa <__sfputc_r+0x1e>

08003506 <__sfputs_r>:
 8003506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003508:	0006      	movs	r6, r0
 800350a:	000f      	movs	r7, r1
 800350c:	0014      	movs	r4, r2
 800350e:	18d5      	adds	r5, r2, r3
 8003510:	42ac      	cmp	r4, r5
 8003512:	d101      	bne.n	8003518 <__sfputs_r+0x12>
 8003514:	2000      	movs	r0, #0
 8003516:	e007      	b.n	8003528 <__sfputs_r+0x22>
 8003518:	7821      	ldrb	r1, [r4, #0]
 800351a:	003a      	movs	r2, r7
 800351c:	0030      	movs	r0, r6
 800351e:	f7ff ffdd 	bl	80034dc <__sfputc_r>
 8003522:	3401      	adds	r4, #1
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d1f3      	bne.n	8003510 <__sfputs_r+0xa>
 8003528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800352c <_vfiprintf_r>:
 800352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352e:	b0a1      	sub	sp, #132	; 0x84
 8003530:	0006      	movs	r6, r0
 8003532:	000c      	movs	r4, r1
 8003534:	001f      	movs	r7, r3
 8003536:	9203      	str	r2, [sp, #12]
 8003538:	2800      	cmp	r0, #0
 800353a:	d004      	beq.n	8003546 <_vfiprintf_r+0x1a>
 800353c:	6983      	ldr	r3, [r0, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <_vfiprintf_r+0x1a>
 8003542:	f7ff fdd9 	bl	80030f8 <__sinit>
 8003546:	4b8e      	ldr	r3, [pc, #568]	; (8003780 <_vfiprintf_r+0x254>)
 8003548:	429c      	cmp	r4, r3
 800354a:	d11c      	bne.n	8003586 <_vfiprintf_r+0x5a>
 800354c:	6874      	ldr	r4, [r6, #4]
 800354e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003550:	07db      	lsls	r3, r3, #31
 8003552:	d405      	bmi.n	8003560 <_vfiprintf_r+0x34>
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	059b      	lsls	r3, r3, #22
 8003558:	d402      	bmi.n	8003560 <_vfiprintf_r+0x34>
 800355a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800355c:	f7ff fe6d 	bl	800323a <__retarget_lock_acquire_recursive>
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	071b      	lsls	r3, r3, #28
 8003564:	d502      	bpl.n	800356c <_vfiprintf_r+0x40>
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <_vfiprintf_r+0x7c>
 800356c:	0021      	movs	r1, r4
 800356e:	0030      	movs	r0, r6
 8003570:	f7ff fc1c 	bl	8002dac <__swsetup_r>
 8003574:	2800      	cmp	r0, #0
 8003576:	d017      	beq.n	80035a8 <_vfiprintf_r+0x7c>
 8003578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357a:	07db      	lsls	r3, r3, #31
 800357c:	d50d      	bpl.n	800359a <_vfiprintf_r+0x6e>
 800357e:	2001      	movs	r0, #1
 8003580:	4240      	negs	r0, r0
 8003582:	b021      	add	sp, #132	; 0x84
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003586:	4b7f      	ldr	r3, [pc, #508]	; (8003784 <_vfiprintf_r+0x258>)
 8003588:	429c      	cmp	r4, r3
 800358a:	d101      	bne.n	8003590 <_vfiprintf_r+0x64>
 800358c:	68b4      	ldr	r4, [r6, #8]
 800358e:	e7de      	b.n	800354e <_vfiprintf_r+0x22>
 8003590:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <_vfiprintf_r+0x25c>)
 8003592:	429c      	cmp	r4, r3
 8003594:	d1db      	bne.n	800354e <_vfiprintf_r+0x22>
 8003596:	68f4      	ldr	r4, [r6, #12]
 8003598:	e7d9      	b.n	800354e <_vfiprintf_r+0x22>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	059b      	lsls	r3, r3, #22
 800359e:	d4ee      	bmi.n	800357e <_vfiprintf_r+0x52>
 80035a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035a2:	f7ff fe4b 	bl	800323c <__retarget_lock_release_recursive>
 80035a6:	e7ea      	b.n	800357e <_vfiprintf_r+0x52>
 80035a8:	2300      	movs	r3, #0
 80035aa:	ad08      	add	r5, sp, #32
 80035ac:	616b      	str	r3, [r5, #20]
 80035ae:	3320      	adds	r3, #32
 80035b0:	766b      	strb	r3, [r5, #25]
 80035b2:	3310      	adds	r3, #16
 80035b4:	76ab      	strb	r3, [r5, #26]
 80035b6:	9707      	str	r7, [sp, #28]
 80035b8:	9f03      	ldr	r7, [sp, #12]
 80035ba:	783b      	ldrb	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <_vfiprintf_r+0x98>
 80035c0:	2b25      	cmp	r3, #37	; 0x25
 80035c2:	d14e      	bne.n	8003662 <_vfiprintf_r+0x136>
 80035c4:	9b03      	ldr	r3, [sp, #12]
 80035c6:	1afb      	subs	r3, r7, r3
 80035c8:	9305      	str	r3, [sp, #20]
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	429f      	cmp	r7, r3
 80035ce:	d00d      	beq.n	80035ec <_vfiprintf_r+0xc0>
 80035d0:	9b05      	ldr	r3, [sp, #20]
 80035d2:	0021      	movs	r1, r4
 80035d4:	0030      	movs	r0, r6
 80035d6:	9a03      	ldr	r2, [sp, #12]
 80035d8:	f7ff ff95 	bl	8003506 <__sfputs_r>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d100      	bne.n	80035e2 <_vfiprintf_r+0xb6>
 80035e0:	e0b5      	b.n	800374e <_vfiprintf_r+0x222>
 80035e2:	696a      	ldr	r2, [r5, #20]
 80035e4:	9b05      	ldr	r3, [sp, #20]
 80035e6:	4694      	mov	ip, r2
 80035e8:	4463      	add	r3, ip
 80035ea:	616b      	str	r3, [r5, #20]
 80035ec:	783b      	ldrb	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d100      	bne.n	80035f4 <_vfiprintf_r+0xc8>
 80035f2:	e0ac      	b.n	800374e <_vfiprintf_r+0x222>
 80035f4:	2201      	movs	r2, #1
 80035f6:	1c7b      	adds	r3, r7, #1
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	2300      	movs	r3, #0
 80035fc:	4252      	negs	r2, r2
 80035fe:	606a      	str	r2, [r5, #4]
 8003600:	a904      	add	r1, sp, #16
 8003602:	3254      	adds	r2, #84	; 0x54
 8003604:	1852      	adds	r2, r2, r1
 8003606:	602b      	str	r3, [r5, #0]
 8003608:	60eb      	str	r3, [r5, #12]
 800360a:	60ab      	str	r3, [r5, #8]
 800360c:	7013      	strb	r3, [r2, #0]
 800360e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003610:	9b03      	ldr	r3, [sp, #12]
 8003612:	2205      	movs	r2, #5
 8003614:	7819      	ldrb	r1, [r3, #0]
 8003616:	485d      	ldr	r0, [pc, #372]	; (800378c <_vfiprintf_r+0x260>)
 8003618:	f000 fb00 	bl	8003c1c <memchr>
 800361c:	9b03      	ldr	r3, [sp, #12]
 800361e:	1c5f      	adds	r7, r3, #1
 8003620:	2800      	cmp	r0, #0
 8003622:	d120      	bne.n	8003666 <_vfiprintf_r+0x13a>
 8003624:	682a      	ldr	r2, [r5, #0]
 8003626:	06d3      	lsls	r3, r2, #27
 8003628:	d504      	bpl.n	8003634 <_vfiprintf_r+0x108>
 800362a:	2353      	movs	r3, #83	; 0x53
 800362c:	a904      	add	r1, sp, #16
 800362e:	185b      	adds	r3, r3, r1
 8003630:	2120      	movs	r1, #32
 8003632:	7019      	strb	r1, [r3, #0]
 8003634:	0713      	lsls	r3, r2, #28
 8003636:	d504      	bpl.n	8003642 <_vfiprintf_r+0x116>
 8003638:	2353      	movs	r3, #83	; 0x53
 800363a:	a904      	add	r1, sp, #16
 800363c:	185b      	adds	r3, r3, r1
 800363e:	212b      	movs	r1, #43	; 0x2b
 8003640:	7019      	strb	r1, [r3, #0]
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b2a      	cmp	r3, #42	; 0x2a
 8003648:	d016      	beq.n	8003678 <_vfiprintf_r+0x14c>
 800364a:	2100      	movs	r1, #0
 800364c:	68eb      	ldr	r3, [r5, #12]
 800364e:	9f03      	ldr	r7, [sp, #12]
 8003650:	783a      	ldrb	r2, [r7, #0]
 8003652:	1c78      	adds	r0, r7, #1
 8003654:	3a30      	subs	r2, #48	; 0x30
 8003656:	4684      	mov	ip, r0
 8003658:	2a09      	cmp	r2, #9
 800365a:	d94f      	bls.n	80036fc <_vfiprintf_r+0x1d0>
 800365c:	2900      	cmp	r1, #0
 800365e:	d111      	bne.n	8003684 <_vfiprintf_r+0x158>
 8003660:	e017      	b.n	8003692 <_vfiprintf_r+0x166>
 8003662:	3701      	adds	r7, #1
 8003664:	e7a9      	b.n	80035ba <_vfiprintf_r+0x8e>
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <_vfiprintf_r+0x260>)
 8003668:	682a      	ldr	r2, [r5, #0]
 800366a:	1ac0      	subs	r0, r0, r3
 800366c:	2301      	movs	r3, #1
 800366e:	4083      	lsls	r3, r0
 8003670:	4313      	orrs	r3, r2
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	9703      	str	r7, [sp, #12]
 8003676:	e7cb      	b.n	8003610 <_vfiprintf_r+0xe4>
 8003678:	9b07      	ldr	r3, [sp, #28]
 800367a:	1d19      	adds	r1, r3, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	9107      	str	r1, [sp, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db01      	blt.n	8003688 <_vfiprintf_r+0x15c>
 8003684:	930b      	str	r3, [sp, #44]	; 0x2c
 8003686:	e004      	b.n	8003692 <_vfiprintf_r+0x166>
 8003688:	425b      	negs	r3, r3
 800368a:	60eb      	str	r3, [r5, #12]
 800368c:	2302      	movs	r3, #2
 800368e:	4313      	orrs	r3, r2
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	783b      	ldrb	r3, [r7, #0]
 8003694:	2b2e      	cmp	r3, #46	; 0x2e
 8003696:	d10a      	bne.n	80036ae <_vfiprintf_r+0x182>
 8003698:	787b      	ldrb	r3, [r7, #1]
 800369a:	2b2a      	cmp	r3, #42	; 0x2a
 800369c:	d137      	bne.n	800370e <_vfiprintf_r+0x1e2>
 800369e:	9b07      	ldr	r3, [sp, #28]
 80036a0:	3702      	adds	r7, #2
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	9207      	str	r2, [sp, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db2d      	blt.n	8003708 <_vfiprintf_r+0x1dc>
 80036ac:	9309      	str	r3, [sp, #36]	; 0x24
 80036ae:	2203      	movs	r2, #3
 80036b0:	7839      	ldrb	r1, [r7, #0]
 80036b2:	4837      	ldr	r0, [pc, #220]	; (8003790 <_vfiprintf_r+0x264>)
 80036b4:	f000 fab2 	bl	8003c1c <memchr>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d007      	beq.n	80036cc <_vfiprintf_r+0x1a0>
 80036bc:	4b34      	ldr	r3, [pc, #208]	; (8003790 <_vfiprintf_r+0x264>)
 80036be:	682a      	ldr	r2, [r5, #0]
 80036c0:	1ac0      	subs	r0, r0, r3
 80036c2:	2340      	movs	r3, #64	; 0x40
 80036c4:	4083      	lsls	r3, r0
 80036c6:	4313      	orrs	r3, r2
 80036c8:	3701      	adds	r7, #1
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	7839      	ldrb	r1, [r7, #0]
 80036ce:	1c7b      	adds	r3, r7, #1
 80036d0:	2206      	movs	r2, #6
 80036d2:	4830      	ldr	r0, [pc, #192]	; (8003794 <_vfiprintf_r+0x268>)
 80036d4:	9303      	str	r3, [sp, #12]
 80036d6:	7629      	strb	r1, [r5, #24]
 80036d8:	f000 faa0 	bl	8003c1c <memchr>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d045      	beq.n	800376c <_vfiprintf_r+0x240>
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <_vfiprintf_r+0x26c>)
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d127      	bne.n	8003736 <_vfiprintf_r+0x20a>
 80036e6:	2207      	movs	r2, #7
 80036e8:	9b07      	ldr	r3, [sp, #28]
 80036ea:	3307      	adds	r3, #7
 80036ec:	4393      	bics	r3, r2
 80036ee:	3308      	adds	r3, #8
 80036f0:	9307      	str	r3, [sp, #28]
 80036f2:	696b      	ldr	r3, [r5, #20]
 80036f4:	9a04      	ldr	r2, [sp, #16]
 80036f6:	189b      	adds	r3, r3, r2
 80036f8:	616b      	str	r3, [r5, #20]
 80036fa:	e75d      	b.n	80035b8 <_vfiprintf_r+0x8c>
 80036fc:	210a      	movs	r1, #10
 80036fe:	434b      	muls	r3, r1
 8003700:	4667      	mov	r7, ip
 8003702:	189b      	adds	r3, r3, r2
 8003704:	3909      	subs	r1, #9
 8003706:	e7a3      	b.n	8003650 <_vfiprintf_r+0x124>
 8003708:	2301      	movs	r3, #1
 800370a:	425b      	negs	r3, r3
 800370c:	e7ce      	b.n	80036ac <_vfiprintf_r+0x180>
 800370e:	2300      	movs	r3, #0
 8003710:	001a      	movs	r2, r3
 8003712:	3701      	adds	r7, #1
 8003714:	606b      	str	r3, [r5, #4]
 8003716:	7839      	ldrb	r1, [r7, #0]
 8003718:	1c78      	adds	r0, r7, #1
 800371a:	3930      	subs	r1, #48	; 0x30
 800371c:	4684      	mov	ip, r0
 800371e:	2909      	cmp	r1, #9
 8003720:	d903      	bls.n	800372a <_vfiprintf_r+0x1fe>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0c3      	beq.n	80036ae <_vfiprintf_r+0x182>
 8003726:	9209      	str	r2, [sp, #36]	; 0x24
 8003728:	e7c1      	b.n	80036ae <_vfiprintf_r+0x182>
 800372a:	230a      	movs	r3, #10
 800372c:	435a      	muls	r2, r3
 800372e:	4667      	mov	r7, ip
 8003730:	1852      	adds	r2, r2, r1
 8003732:	3b09      	subs	r3, #9
 8003734:	e7ef      	b.n	8003716 <_vfiprintf_r+0x1ea>
 8003736:	ab07      	add	r3, sp, #28
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	0022      	movs	r2, r4
 800373c:	0029      	movs	r1, r5
 800373e:	0030      	movs	r0, r6
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <_vfiprintf_r+0x270>)
 8003742:	e000      	b.n	8003746 <_vfiprintf_r+0x21a>
 8003744:	bf00      	nop
 8003746:	9004      	str	r0, [sp, #16]
 8003748:	9b04      	ldr	r3, [sp, #16]
 800374a:	3301      	adds	r3, #1
 800374c:	d1d1      	bne.n	80036f2 <_vfiprintf_r+0x1c6>
 800374e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003750:	07db      	lsls	r3, r3, #31
 8003752:	d405      	bmi.n	8003760 <_vfiprintf_r+0x234>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	059b      	lsls	r3, r3, #22
 8003758:	d402      	bmi.n	8003760 <_vfiprintf_r+0x234>
 800375a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800375c:	f7ff fd6e 	bl	800323c <__retarget_lock_release_recursive>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	065b      	lsls	r3, r3, #25
 8003764:	d500      	bpl.n	8003768 <_vfiprintf_r+0x23c>
 8003766:	e70a      	b.n	800357e <_vfiprintf_r+0x52>
 8003768:	980d      	ldr	r0, [sp, #52]	; 0x34
 800376a:	e70a      	b.n	8003582 <_vfiprintf_r+0x56>
 800376c:	ab07      	add	r3, sp, #28
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	0022      	movs	r2, r4
 8003772:	0029      	movs	r1, r5
 8003774:	0030      	movs	r0, r6
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <_vfiprintf_r+0x270>)
 8003778:	f000 f882 	bl	8003880 <_printf_i>
 800377c:	e7e3      	b.n	8003746 <_vfiprintf_r+0x21a>
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	08003e64 	.word	0x08003e64
 8003784:	08003e84 	.word	0x08003e84
 8003788:	08003e44 	.word	0x08003e44
 800378c:	08003ea4 	.word	0x08003ea4
 8003790:	08003eaa 	.word	0x08003eaa
 8003794:	08003eae 	.word	0x08003eae
 8003798:	00000000 	.word	0x00000000
 800379c:	08003507 	.word	0x08003507

080037a0 <_printf_common>:
 80037a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037a2:	0015      	movs	r5, r2
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	688a      	ldr	r2, [r1, #8]
 80037a8:	690b      	ldr	r3, [r1, #16]
 80037aa:	000c      	movs	r4, r1
 80037ac:	9000      	str	r0, [sp, #0]
 80037ae:	4293      	cmp	r3, r2
 80037b0:	da00      	bge.n	80037b4 <_printf_common+0x14>
 80037b2:	0013      	movs	r3, r2
 80037b4:	0022      	movs	r2, r4
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	3243      	adds	r2, #67	; 0x43
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	2a00      	cmp	r2, #0
 80037be:	d001      	beq.n	80037c4 <_printf_common+0x24>
 80037c0:	3301      	adds	r3, #1
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	069b      	lsls	r3, r3, #26
 80037c8:	d502      	bpl.n	80037d0 <_printf_common+0x30>
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	3302      	adds	r3, #2
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	2306      	movs	r3, #6
 80037d4:	0017      	movs	r7, r2
 80037d6:	401f      	ands	r7, r3
 80037d8:	421a      	tst	r2, r3
 80037da:	d027      	beq.n	800382c <_printf_common+0x8c>
 80037dc:	0023      	movs	r3, r4
 80037de:	3343      	adds	r3, #67	; 0x43
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	1e5a      	subs	r2, r3, #1
 80037e4:	4193      	sbcs	r3, r2
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	0692      	lsls	r2, r2, #26
 80037ea:	d430      	bmi.n	800384e <_printf_common+0xae>
 80037ec:	0022      	movs	r2, r4
 80037ee:	9901      	ldr	r1, [sp, #4]
 80037f0:	9800      	ldr	r0, [sp, #0]
 80037f2:	9e08      	ldr	r6, [sp, #32]
 80037f4:	3243      	adds	r2, #67	; 0x43
 80037f6:	47b0      	blx	r6
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d025      	beq.n	8003848 <_printf_common+0xa8>
 80037fc:	2306      	movs	r3, #6
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	682a      	ldr	r2, [r5, #0]
 8003802:	68e1      	ldr	r1, [r4, #12]
 8003804:	2500      	movs	r5, #0
 8003806:	4003      	ands	r3, r0
 8003808:	2b04      	cmp	r3, #4
 800380a:	d103      	bne.n	8003814 <_printf_common+0x74>
 800380c:	1a8d      	subs	r5, r1, r2
 800380e:	43eb      	mvns	r3, r5
 8003810:	17db      	asrs	r3, r3, #31
 8003812:	401d      	ands	r5, r3
 8003814:	68a3      	ldr	r3, [r4, #8]
 8003816:	6922      	ldr	r2, [r4, #16]
 8003818:	4293      	cmp	r3, r2
 800381a:	dd01      	ble.n	8003820 <_printf_common+0x80>
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	18ed      	adds	r5, r5, r3
 8003820:	2700      	movs	r7, #0
 8003822:	42bd      	cmp	r5, r7
 8003824:	d120      	bne.n	8003868 <_printf_common+0xc8>
 8003826:	2000      	movs	r0, #0
 8003828:	e010      	b.n	800384c <_printf_common+0xac>
 800382a:	3701      	adds	r7, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	682a      	ldr	r2, [r5, #0]
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	42bb      	cmp	r3, r7
 8003834:	ddd2      	ble.n	80037dc <_printf_common+0x3c>
 8003836:	0022      	movs	r2, r4
 8003838:	2301      	movs	r3, #1
 800383a:	9901      	ldr	r1, [sp, #4]
 800383c:	9800      	ldr	r0, [sp, #0]
 800383e:	9e08      	ldr	r6, [sp, #32]
 8003840:	3219      	adds	r2, #25
 8003842:	47b0      	blx	r6
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d1f0      	bne.n	800382a <_printf_common+0x8a>
 8003848:	2001      	movs	r0, #1
 800384a:	4240      	negs	r0, r0
 800384c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800384e:	2030      	movs	r0, #48	; 0x30
 8003850:	18e1      	adds	r1, r4, r3
 8003852:	3143      	adds	r1, #67	; 0x43
 8003854:	7008      	strb	r0, [r1, #0]
 8003856:	0021      	movs	r1, r4
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	3145      	adds	r1, #69	; 0x45
 800385c:	7809      	ldrb	r1, [r1, #0]
 800385e:	18a2      	adds	r2, r4, r2
 8003860:	3243      	adds	r2, #67	; 0x43
 8003862:	3302      	adds	r3, #2
 8003864:	7011      	strb	r1, [r2, #0]
 8003866:	e7c1      	b.n	80037ec <_printf_common+0x4c>
 8003868:	0022      	movs	r2, r4
 800386a:	2301      	movs	r3, #1
 800386c:	9901      	ldr	r1, [sp, #4]
 800386e:	9800      	ldr	r0, [sp, #0]
 8003870:	9e08      	ldr	r6, [sp, #32]
 8003872:	321a      	adds	r2, #26
 8003874:	47b0      	blx	r6
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	d0e6      	beq.n	8003848 <_printf_common+0xa8>
 800387a:	3701      	adds	r7, #1
 800387c:	e7d1      	b.n	8003822 <_printf_common+0x82>
	...

08003880 <_printf_i>:
 8003880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003882:	b08b      	sub	sp, #44	; 0x2c
 8003884:	9206      	str	r2, [sp, #24]
 8003886:	000a      	movs	r2, r1
 8003888:	3243      	adds	r2, #67	; 0x43
 800388a:	9307      	str	r3, [sp, #28]
 800388c:	9005      	str	r0, [sp, #20]
 800388e:	9204      	str	r2, [sp, #16]
 8003890:	7e0a      	ldrb	r2, [r1, #24]
 8003892:	000c      	movs	r4, r1
 8003894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003896:	2a78      	cmp	r2, #120	; 0x78
 8003898:	d807      	bhi.n	80038aa <_printf_i+0x2a>
 800389a:	2a62      	cmp	r2, #98	; 0x62
 800389c:	d809      	bhi.n	80038b2 <_printf_i+0x32>
 800389e:	2a00      	cmp	r2, #0
 80038a0:	d100      	bne.n	80038a4 <_printf_i+0x24>
 80038a2:	e0c1      	b.n	8003a28 <_printf_i+0x1a8>
 80038a4:	2a58      	cmp	r2, #88	; 0x58
 80038a6:	d100      	bne.n	80038aa <_printf_i+0x2a>
 80038a8:	e08c      	b.n	80039c4 <_printf_i+0x144>
 80038aa:	0026      	movs	r6, r4
 80038ac:	3642      	adds	r6, #66	; 0x42
 80038ae:	7032      	strb	r2, [r6, #0]
 80038b0:	e022      	b.n	80038f8 <_printf_i+0x78>
 80038b2:	0010      	movs	r0, r2
 80038b4:	3863      	subs	r0, #99	; 0x63
 80038b6:	2815      	cmp	r0, #21
 80038b8:	d8f7      	bhi.n	80038aa <_printf_i+0x2a>
 80038ba:	f7fc fc25 	bl	8000108 <__gnu_thumb1_case_shi>
 80038be:	0016      	.short	0x0016
 80038c0:	fff6001f 	.word	0xfff6001f
 80038c4:	fff6fff6 	.word	0xfff6fff6
 80038c8:	001ffff6 	.word	0x001ffff6
 80038cc:	fff6fff6 	.word	0xfff6fff6
 80038d0:	fff6fff6 	.word	0xfff6fff6
 80038d4:	003600a8 	.word	0x003600a8
 80038d8:	fff6009a 	.word	0xfff6009a
 80038dc:	00b9fff6 	.word	0x00b9fff6
 80038e0:	0036fff6 	.word	0x0036fff6
 80038e4:	fff6fff6 	.word	0xfff6fff6
 80038e8:	009e      	.short	0x009e
 80038ea:	0026      	movs	r6, r4
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	3642      	adds	r6, #66	; 0x42
 80038f0:	1d11      	adds	r1, r2, #4
 80038f2:	6019      	str	r1, [r3, #0]
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	7033      	strb	r3, [r6, #0]
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0a7      	b.n	8003a4c <_printf_i+0x1cc>
 80038fc:	6808      	ldr	r0, [r1, #0]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	1d0a      	adds	r2, r1, #4
 8003902:	0605      	lsls	r5, r0, #24
 8003904:	d50b      	bpl.n	800391e <_printf_i+0x9e>
 8003906:	680d      	ldr	r5, [r1, #0]
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	2d00      	cmp	r5, #0
 800390c:	da03      	bge.n	8003916 <_printf_i+0x96>
 800390e:	232d      	movs	r3, #45	; 0x2d
 8003910:	9a04      	ldr	r2, [sp, #16]
 8003912:	426d      	negs	r5, r5
 8003914:	7013      	strb	r3, [r2, #0]
 8003916:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <_printf_i+0x21c>)
 8003918:	270a      	movs	r7, #10
 800391a:	9303      	str	r3, [sp, #12]
 800391c:	e01b      	b.n	8003956 <_printf_i+0xd6>
 800391e:	680d      	ldr	r5, [r1, #0]
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	0641      	lsls	r1, r0, #25
 8003924:	d5f1      	bpl.n	800390a <_printf_i+0x8a>
 8003926:	b22d      	sxth	r5, r5
 8003928:	e7ef      	b.n	800390a <_printf_i+0x8a>
 800392a:	680d      	ldr	r5, [r1, #0]
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	1d08      	adds	r0, r1, #4
 8003930:	6018      	str	r0, [r3, #0]
 8003932:	062e      	lsls	r6, r5, #24
 8003934:	d501      	bpl.n	800393a <_printf_i+0xba>
 8003936:	680d      	ldr	r5, [r1, #0]
 8003938:	e003      	b.n	8003942 <_printf_i+0xc2>
 800393a:	066d      	lsls	r5, r5, #25
 800393c:	d5fb      	bpl.n	8003936 <_printf_i+0xb6>
 800393e:	680d      	ldr	r5, [r1, #0]
 8003940:	b2ad      	uxth	r5, r5
 8003942:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <_printf_i+0x21c>)
 8003944:	2708      	movs	r7, #8
 8003946:	9303      	str	r3, [sp, #12]
 8003948:	2a6f      	cmp	r2, #111	; 0x6f
 800394a:	d000      	beq.n	800394e <_printf_i+0xce>
 800394c:	3702      	adds	r7, #2
 800394e:	0023      	movs	r3, r4
 8003950:	2200      	movs	r2, #0
 8003952:	3343      	adds	r3, #67	; 0x43
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	60a3      	str	r3, [r4, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db03      	blt.n	8003966 <_printf_i+0xe6>
 800395e:	2204      	movs	r2, #4
 8003960:	6821      	ldr	r1, [r4, #0]
 8003962:	4391      	bics	r1, r2
 8003964:	6021      	str	r1, [r4, #0]
 8003966:	2d00      	cmp	r5, #0
 8003968:	d102      	bne.n	8003970 <_printf_i+0xf0>
 800396a:	9e04      	ldr	r6, [sp, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <_printf_i+0x10a>
 8003970:	9e04      	ldr	r6, [sp, #16]
 8003972:	0028      	movs	r0, r5
 8003974:	0039      	movs	r1, r7
 8003976:	f7fc fc57 	bl	8000228 <__aeabi_uidivmod>
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	3e01      	subs	r6, #1
 800397e:	5c5b      	ldrb	r3, [r3, r1]
 8003980:	7033      	strb	r3, [r6, #0]
 8003982:	002b      	movs	r3, r5
 8003984:	0005      	movs	r5, r0
 8003986:	429f      	cmp	r7, r3
 8003988:	d9f3      	bls.n	8003972 <_printf_i+0xf2>
 800398a:	2f08      	cmp	r7, #8
 800398c:	d109      	bne.n	80039a2 <_printf_i+0x122>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	07db      	lsls	r3, r3, #31
 8003992:	d506      	bpl.n	80039a2 <_printf_i+0x122>
 8003994:	6863      	ldr	r3, [r4, #4]
 8003996:	6922      	ldr	r2, [r4, #16]
 8003998:	4293      	cmp	r3, r2
 800399a:	dc02      	bgt.n	80039a2 <_printf_i+0x122>
 800399c:	2330      	movs	r3, #48	; 0x30
 800399e:	3e01      	subs	r6, #1
 80039a0:	7033      	strb	r3, [r6, #0]
 80039a2:	9b04      	ldr	r3, [sp, #16]
 80039a4:	1b9b      	subs	r3, r3, r6
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	9b07      	ldr	r3, [sp, #28]
 80039aa:	0021      	movs	r1, r4
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	9805      	ldr	r0, [sp, #20]
 80039b0:	9b06      	ldr	r3, [sp, #24]
 80039b2:	aa09      	add	r2, sp, #36	; 0x24
 80039b4:	f7ff fef4 	bl	80037a0 <_printf_common>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d14c      	bne.n	8003a56 <_printf_i+0x1d6>
 80039bc:	2001      	movs	r0, #1
 80039be:	4240      	negs	r0, r0
 80039c0:	b00b      	add	sp, #44	; 0x2c
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c4:	3145      	adds	r1, #69	; 0x45
 80039c6:	700a      	strb	r2, [r1, #0]
 80039c8:	4a34      	ldr	r2, [pc, #208]	; (8003a9c <_printf_i+0x21c>)
 80039ca:	9203      	str	r2, [sp, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	6821      	ldr	r1, [r4, #0]
 80039d0:	ca20      	ldmia	r2!, {r5}
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	0608      	lsls	r0, r1, #24
 80039d6:	d516      	bpl.n	8003a06 <_printf_i+0x186>
 80039d8:	07cb      	lsls	r3, r1, #31
 80039da:	d502      	bpl.n	80039e2 <_printf_i+0x162>
 80039dc:	2320      	movs	r3, #32
 80039de:	4319      	orrs	r1, r3
 80039e0:	6021      	str	r1, [r4, #0]
 80039e2:	2710      	movs	r7, #16
 80039e4:	2d00      	cmp	r5, #0
 80039e6:	d1b2      	bne.n	800394e <_printf_i+0xce>
 80039e8:	2320      	movs	r3, #32
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	439a      	bics	r2, r3
 80039ee:	6022      	str	r2, [r4, #0]
 80039f0:	e7ad      	b.n	800394e <_printf_i+0xce>
 80039f2:	2220      	movs	r2, #32
 80039f4:	6809      	ldr	r1, [r1, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	6022      	str	r2, [r4, #0]
 80039fa:	0022      	movs	r2, r4
 80039fc:	2178      	movs	r1, #120	; 0x78
 80039fe:	3245      	adds	r2, #69	; 0x45
 8003a00:	7011      	strb	r1, [r2, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <_printf_i+0x220>)
 8003a04:	e7e1      	b.n	80039ca <_printf_i+0x14a>
 8003a06:	0648      	lsls	r0, r1, #25
 8003a08:	d5e6      	bpl.n	80039d8 <_printf_i+0x158>
 8003a0a:	b2ad      	uxth	r5, r5
 8003a0c:	e7e4      	b.n	80039d8 <_printf_i+0x158>
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	680d      	ldr	r5, [r1, #0]
 8003a12:	1d10      	adds	r0, r2, #4
 8003a14:	6949      	ldr	r1, [r1, #20]
 8003a16:	6018      	str	r0, [r3, #0]
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	062e      	lsls	r6, r5, #24
 8003a1c:	d501      	bpl.n	8003a22 <_printf_i+0x1a2>
 8003a1e:	6019      	str	r1, [r3, #0]
 8003a20:	e002      	b.n	8003a28 <_printf_i+0x1a8>
 8003a22:	066d      	lsls	r5, r5, #25
 8003a24:	d5fb      	bpl.n	8003a1e <_printf_i+0x19e>
 8003a26:	8019      	strh	r1, [r3, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9e04      	ldr	r6, [sp, #16]
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	e7bb      	b.n	80039a8 <_printf_i+0x128>
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	1d11      	adds	r1, r2, #4
 8003a34:	6019      	str	r1, [r3, #0]
 8003a36:	6816      	ldr	r6, [r2, #0]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	0030      	movs	r0, r6
 8003a3c:	6862      	ldr	r2, [r4, #4]
 8003a3e:	f000 f8ed 	bl	8003c1c <memchr>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d001      	beq.n	8003a4a <_printf_i+0x1ca>
 8003a46:	1b80      	subs	r0, r0, r6
 8003a48:	6060      	str	r0, [r4, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9a04      	ldr	r2, [sp, #16]
 8003a52:	7013      	strb	r3, [r2, #0]
 8003a54:	e7a8      	b.n	80039a8 <_printf_i+0x128>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	0032      	movs	r2, r6
 8003a5a:	9906      	ldr	r1, [sp, #24]
 8003a5c:	9805      	ldr	r0, [sp, #20]
 8003a5e:	9d07      	ldr	r5, [sp, #28]
 8003a60:	47a8      	blx	r5
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	d0aa      	beq.n	80039bc <_printf_i+0x13c>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	079b      	lsls	r3, r3, #30
 8003a6a:	d415      	bmi.n	8003a98 <_printf_i+0x218>
 8003a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6e:	68e0      	ldr	r0, [r4, #12]
 8003a70:	4298      	cmp	r0, r3
 8003a72:	daa5      	bge.n	80039c0 <_printf_i+0x140>
 8003a74:	0018      	movs	r0, r3
 8003a76:	e7a3      	b.n	80039c0 <_printf_i+0x140>
 8003a78:	0022      	movs	r2, r4
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	9906      	ldr	r1, [sp, #24]
 8003a7e:	9805      	ldr	r0, [sp, #20]
 8003a80:	9e07      	ldr	r6, [sp, #28]
 8003a82:	3219      	adds	r2, #25
 8003a84:	47b0      	blx	r6
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	d098      	beq.n	80039bc <_printf_i+0x13c>
 8003a8a:	3501      	adds	r5, #1
 8003a8c:	68e3      	ldr	r3, [r4, #12]
 8003a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	42ab      	cmp	r3, r5
 8003a94:	dcf0      	bgt.n	8003a78 <_printf_i+0x1f8>
 8003a96:	e7e9      	b.n	8003a6c <_printf_i+0x1ec>
 8003a98:	2500      	movs	r5, #0
 8003a9a:	e7f7      	b.n	8003a8c <_printf_i+0x20c>
 8003a9c:	08003eb5 	.word	0x08003eb5
 8003aa0:	08003ec6 	.word	0x08003ec6

08003aa4 <_sbrk_r>:
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	4d06      	ldr	r5, [pc, #24]	; (8003ac4 <_sbrk_r+0x20>)
 8003aaa:	0004      	movs	r4, r0
 8003aac:	0008      	movs	r0, r1
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	f7fd f960 	bl	8000d74 <_sbrk>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d103      	bne.n	8003ac0 <_sbrk_r+0x1c>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d000      	beq.n	8003ac0 <_sbrk_r+0x1c>
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	200003dc 	.word	0x200003dc

08003ac8 <__sread>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	000c      	movs	r4, r1
 8003acc:	250e      	movs	r5, #14
 8003ace:	5f49      	ldrsh	r1, [r1, r5]
 8003ad0:	f000 f8c0 	bl	8003c54 <_read_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	db03      	blt.n	8003ae0 <__sread+0x18>
 8003ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ada:	181b      	adds	r3, r3, r0
 8003adc:	6563      	str	r3, [r4, #84]	; 0x54
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	4a02      	ldr	r2, [pc, #8]	; (8003aec <__sread+0x24>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	81a3      	strh	r3, [r4, #12]
 8003ae8:	e7f9      	b.n	8003ade <__sread+0x16>
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	ffffefff 	.word	0xffffefff

08003af0 <__swrite>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	001f      	movs	r7, r3
 8003af4:	898b      	ldrh	r3, [r1, #12]
 8003af6:	0005      	movs	r5, r0
 8003af8:	000c      	movs	r4, r1
 8003afa:	0016      	movs	r6, r2
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	d505      	bpl.n	8003b0c <__swrite+0x1c>
 8003b00:	230e      	movs	r3, #14
 8003b02:	5ec9      	ldrsh	r1, [r1, r3]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2302      	movs	r3, #2
 8003b08:	f000 f874 	bl	8003bf4 <_lseek_r>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <__swrite+0x34>)
 8003b10:	0028      	movs	r0, r5
 8003b12:	4013      	ands	r3, r2
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	0032      	movs	r2, r6
 8003b18:	230e      	movs	r3, #14
 8003b1a:	5ee1      	ldrsh	r1, [r4, r3]
 8003b1c:	003b      	movs	r3, r7
 8003b1e:	f000 f81f 	bl	8003b60 <_write_r>
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b24:	ffffefff 	.word	0xffffefff

08003b28 <__sseek>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	000c      	movs	r4, r1
 8003b2c:	250e      	movs	r5, #14
 8003b2e:	5f49      	ldrsh	r1, [r1, r5]
 8003b30:	f000 f860 	bl	8003bf4 <_lseek_r>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	1c42      	adds	r2, r0, #1
 8003b38:	d103      	bne.n	8003b42 <__sseek+0x1a>
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <__sseek+0x28>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	0152      	lsls	r2, r2, #5
 8003b46:	4313      	orrs	r3, r2
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b4c:	e7f8      	b.n	8003b40 <__sseek+0x18>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	ffffefff 	.word	0xffffefff

08003b54 <__sclose>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	230e      	movs	r3, #14
 8003b58:	5ec9      	ldrsh	r1, [r1, r3]
 8003b5a:	f000 f815 	bl	8003b88 <_close_r>
 8003b5e:	bd10      	pop	{r4, pc}

08003b60 <_write_r>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	0004      	movs	r4, r0
 8003b64:	0008      	movs	r0, r1
 8003b66:	0011      	movs	r1, r2
 8003b68:	001a      	movs	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	4d05      	ldr	r5, [pc, #20]	; (8003b84 <_write_r+0x24>)
 8003b6e:	602b      	str	r3, [r5, #0]
 8003b70:	f7fd f8b7 	bl	8000ce2 <_write>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d103      	bne.n	8003b80 <_write_r+0x20>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d000      	beq.n	8003b80 <_write_r+0x20>
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	200003dc 	.word	0x200003dc

08003b88 <_close_r>:
 8003b88:	2300      	movs	r3, #0
 8003b8a:	b570      	push	{r4, r5, r6, lr}
 8003b8c:	4d06      	ldr	r5, [pc, #24]	; (8003ba8 <_close_r+0x20>)
 8003b8e:	0004      	movs	r4, r0
 8003b90:	0008      	movs	r0, r1
 8003b92:	602b      	str	r3, [r5, #0]
 8003b94:	f7fd f8c1 	bl	8000d1a <_close>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d103      	bne.n	8003ba4 <_close_r+0x1c>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d000      	beq.n	8003ba4 <_close_r+0x1c>
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	200003dc 	.word	0x200003dc

08003bac <_fstat_r>:
 8003bac:	2300      	movs	r3, #0
 8003bae:	b570      	push	{r4, r5, r6, lr}
 8003bb0:	4d06      	ldr	r5, [pc, #24]	; (8003bcc <_fstat_r+0x20>)
 8003bb2:	0004      	movs	r4, r0
 8003bb4:	0008      	movs	r0, r1
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	f7fd f8b8 	bl	8000d2e <_fstat>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	d103      	bne.n	8003bca <_fstat_r+0x1e>
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d000      	beq.n	8003bca <_fstat_r+0x1e>
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	200003dc 	.word	0x200003dc

08003bd0 <_isatty_r>:
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	4d06      	ldr	r5, [pc, #24]	; (8003bf0 <_isatty_r+0x20>)
 8003bd6:	0004      	movs	r4, r0
 8003bd8:	0008      	movs	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fd f8b5 	bl	8000d4a <_isatty>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d103      	bne.n	8003bec <_isatty_r+0x1c>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d000      	beq.n	8003bec <_isatty_r+0x1c>
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	200003dc 	.word	0x200003dc

08003bf4 <_lseek_r>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	0004      	movs	r4, r0
 8003bf8:	0008      	movs	r0, r1
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4d05      	ldr	r5, [pc, #20]	; (8003c18 <_lseek_r+0x24>)
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fd f8aa 	bl	8000d5c <_lseek>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_lseek_r+0x20>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d000      	beq.n	8003c14 <_lseek_r+0x20>
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	200003dc 	.word	0x200003dc

08003c1c <memchr>:
 8003c1c:	b2c9      	uxtb	r1, r1
 8003c1e:	1882      	adds	r2, r0, r2
 8003c20:	4290      	cmp	r0, r2
 8003c22:	d101      	bne.n	8003c28 <memchr+0xc>
 8003c24:	2000      	movs	r0, #0
 8003c26:	4770      	bx	lr
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	428b      	cmp	r3, r1
 8003c2c:	d0fb      	beq.n	8003c26 <memchr+0xa>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	e7f6      	b.n	8003c20 <memchr+0x4>
	...

08003c34 <__malloc_lock>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	4802      	ldr	r0, [pc, #8]	; (8003c40 <__malloc_lock+0xc>)
 8003c38:	f7ff faff 	bl	800323a <__retarget_lock_acquire_recursive>
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	200003d0 	.word	0x200003d0

08003c44 <__malloc_unlock>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	4802      	ldr	r0, [pc, #8]	; (8003c50 <__malloc_unlock+0xc>)
 8003c48:	f7ff faf8 	bl	800323c <__retarget_lock_release_recursive>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	200003d0 	.word	0x200003d0

08003c54 <_read_r>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	0004      	movs	r4, r0
 8003c58:	0008      	movs	r0, r1
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	4d05      	ldr	r5, [pc, #20]	; (8003c78 <_read_r+0x24>)
 8003c62:	602b      	str	r3, [r5, #0]
 8003c64:	f7fd f820 	bl	8000ca8 <_read>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d103      	bne.n	8003c74 <_read_r+0x20>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d000      	beq.n	8003c74 <_read_r+0x20>
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	200003dc 	.word	0x200003dc

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
